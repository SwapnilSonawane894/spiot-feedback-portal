{"file_contents":{"src/components/portal-sidebar.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { Home, Layers, Users, LogOut } from \"lucide-react\";\n\nconst navItems = [\n  { href: \"/admin\", label: \"Dashboard\", icon: <Home size={16} /> },\n  { href: \"/admin/departments\", label: \"Departments\", icon: <Layers size={16} /> },\n  { href: \"/admin/hod-management\", label: \"HOD Management\", icon: <Users size={16} /> },\n  { href: \"/admin/staff\", label: \"Staff Management\", icon: <Users size={16} /> },\n  { href: \"/api/auth/signout\", label: \"Logout\", icon: <LogOut size={16} /> }\n];\n\nexport default function PortalSidebar() {\n  const pathname = usePathname() || \"/\";\n\n  return (\n    <aside className=\"w-[250px] bg-white h-screen border-r border-gray-200 fixed left-0 top-0\">\n      <div className=\"p-6\">\n        <div className=\"text-xl font-semibold text-gray-900\">SPIOT Admin</div>\n      </div>\n\n      <nav className=\"px-2 mt-4\">\n        {navItems.map((item) => {\n          const active = pathname === item.href || pathname.startsWith(item.href + \"/\");\n          return (\n            <Link key={item.href} href={item.href} className={`flex items-center gap-3 px-4 py-2 rounded-md mx-2 my-1 text-sm ${active ? 'bg-blue-50 text-[#005A9C]' : 'text-gray-700 hover:bg-gray-50'}`}>\n              <span className={`w-5 h-5 flex items-center ${active ? 'text-[#005A9C]' : 'text-gray-500'}`}>{item.icon}</span>\n              <span>{item.label}</span>\n            </Link>\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":1512},"src/app/(auth)/login/page.tsx":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport Image from \"next/image\";\nimport { Mail, Lock } from \"lucide-react\";\nimport { signIn, SignInResponse } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport LoadingOverlay from \"@/components/loading-overlay\";\n\nexport default function LoginPage(): React.JSX.Element {\n  const router = useRouter();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isNavigating, setIsNavigating] = useState(false);\n\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    setError(\"\");\n\n    if (!email || !password) {\n      setError(\"Please enter both email and password.\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const result = (await signIn(\"credentials\", {\n        redirect: false,\n        email,\n        password,\n      })) as SignInResponse | null;\n\n      if (result?.error) {\n        setError(\"Invalid credentials.\");\n        setIsLoading(false);\n        return;\n      }\n\n      if (result?.ok) {\n        setIsNavigating(true);\n        \n        try {\n          // Fetch the session to get user role\n          const sessionRes = await fetch('/api/auth/session');\n          \n          if (!sessionRes.ok) {\n            throw new Error('Failed to fetch session');\n          }\n          \n          const sessionData = await sessionRes.json();\n          const role = sessionData?.user?.role;\n          \n          // Redirect based on role\n          if (role === \"ADMIN\") {\n            router.push(\"/admin\");\n          } else if (role === \"HOD\") {\n            router.push(\"/hod/dashboard\");\n          } else if (role === \"FACULTY\") {\n            router.push(\"/faculty/dashboard\");\n          } else if (role === \"STUDENT\") {\n            router.push(\"/student/dashboard\");\n          } else {\n            router.push(\"/\");\n          }\n          return;\n        } catch (sessionErr) {\n          console.error('Session fetch error:', sessionErr);\n          setError(\"Login successful but failed to load dashboard. Please refresh the page.\");\n          setIsNavigating(false);\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      setError(\"Login failed. Please try again.\");\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n      setError(\"An unexpected error occurred.\");\n      setIsLoading(false);\n    }\n  }\n\n  if (isNavigating || isLoading) {\n    return <LoadingOverlay />;\n  }\n\n  return (\n    <div \n      className=\"min-h-screen flex items-center justify-center sm:p-6 md:p-8\" \n      style={{ background: \"var(--background)\" }}\n    >\n      <div className=\"w-full min-h-screen sm:min-h-0 sm:max-w-md fade-in flex flex-col justify-center\">\n        <div className=\"login-card p-8 sm:p-8 md:p-10\">\n          <div className=\"flex flex-col items-center mb-8 sm:mb-10\">\n            <div \n              className=\"w-24 h-24 sm:w-28 sm:h-28 rounded-full flex items-center justify-center mb-5 transition-transform hover:scale-105\" \n              style={{ background: \"var(--primary-light)\" }}\n            >\n              <Image \n                src=\"/logo.png\" \n                alt=\"SPIOT logo\" \n                width={80} \n                height={80} \n                priority\n                style={{ objectFit: \"contain\", width: \"auto\", height: \"auto\", maxWidth: \"80%\", maxHeight: \"80%\" }} \n              />\n            </div>\n            <h1 className=\"text-center text-xl sm:text-2xl font-bold mb-2\" style={{ color: \"var(--text-primary)\" }}>\n              SPIOT Feedback Portal\n            </h1>\n            <p className=\"text-center text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n              Sharadchandra Pawar Institute of Technology\n            </p>\n          </div>\n\n          <form className=\"space-y-5 sm:space-y-6\" onSubmit={handleSubmit}>\n            {error && (\n              <div \n                className=\"px-4 py-3 rounded-lg text-sm font-medium slide-in-right\" \n                style={{ background: \"var(--danger-light)\", color: \"var(--danger)\" }}\n              >\n                {error}\n              </div>\n            )}\n\n            <div>\n              <label className=\"form-label\">Email / Enrollment Number</label>\n              <div className=\"relative\">\n                <span className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\" style={{ color: \"var(--text-muted)\" }}>\n                  <Mail size={18} />\n                </span>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter your credentials\"\n                  style={{ paddingLeft: '3.5rem' }}\n                  className=\"input-field\"\n                  aria-label=\"Email or Enrollment Number\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  autoComplete=\"username\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"form-label\">Password</label>\n              <div className=\"relative\">\n                <span className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\" style={{ color: \"var(--text-muted)\" }}>\n                  <Lock size={18} />\n                </span>\n                <input\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  style={{ paddingLeft: '3.5rem' }}\n                  className=\"input-field\"\n                  aria-label=\"Password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  autoComplete=\"current-password\"\n                />\n              </div>\n            </div>\n\n            <button \n              type=\"submit\" \n              disabled={isLoading} \n              className=\"btn-primary w-full py-3.5 text-base font-semibold mt-6\"\n            >\n              {isLoading ? (\n                <span className=\"flex items-center justify-center gap-2\">\n                  <span className=\"loading-spinner\" />\n                  Logging in...\n                </span>\n              ) : (\n                \"Login\"\n              )}\n            </button>\n          </form>\n        </div>\n\n        <div className=\"text-center text-xs mt-6 sm:mt-8 px-4\" style={{ color: \"var(--text-muted)\" }}>\n          Â© 2025-26 SPIOT | Student Feedback Portal\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":6603},"prisma/seed-admin.js":{"content":"const { PrismaClient } = require(\"@prisma/client\");\nconst bcrypt = require(\"bcrypt\");\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  const password = \"123\";\n  const hashed = await bcrypt.hash(password, 10);\n\n  const admin = await prisma.user.upsert({\n    where: { email: \"admin@gmail.com\" },\n    update: {},\n    create: {\n      name: \"SPIOT Admin\",\n      email: \"admin@gmail.com\",\n      hashedPassword: hashed,\n      role: \"ADMIN\",\n    },\n  });\n\n  console.log(\"Admin upserted:\", admin.email);\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n\n\n//   admin@gmail.com- 123\n// kharat@gmail.com - 12\n// 23213070142 - same password\n// bhosale@gmail.com - 12\n// kadam@gmail.com - 12","size_bytes":781},"src/app/api/auth/[...nextauth]/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport \"../../../../lib/env-config\";\nimport NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcrypt\";\nimport { userService } from \"../../../../lib/mongodb-services\";\nimport { rateLimit, clearRateLimit, sanitizeString } from \"../../../../lib/security-utils\";\n\nexport const authOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const email = sanitizeString(credentials.email).toLowerCase();\n        \n        if (!rateLimit(email, 5, 15 * 60 * 1000)) {\n          throw new Error(\"Too many login attempts. Please try again later.\");\n        }\n\n        const user = await userService.findUnique({ \n          email: email\n        });\n        \n        if (!user || !user.hashedPassword) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const isCorrectPassword = await bcrypt.compare(credentials.password, user.hashedPassword);\n        if (!isCorrectPassword) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        clearRateLimit(email);\n\n        // Remove sensitive data before returning\n        const { hashedPassword, ...userWithoutPassword } = user;\n        console.log('[Authorize] Returning user:', { id: userWithoutPassword.id, role: userWithoutPassword.role, email: userWithoutPassword.email });\n        \n        return userWithoutPassword as any;\n      },\n    }),\n  ],\n  pages: {\n    signIn: \"/login\",\n    signOut: \"/login\",\n    error: \"/login\",\n  },\n  callbacks: {\n    async jwt({ token, user }: { token: any; user: any }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        token.email = user.email;\n      }\n      return token;\n    },\n    async session({ session, token }: { session: any; token: any }) {\n      if (token && session.user) {\n        session.user.id = token.id;\n        session.user.role = token.role;\n        session.user.email = token.email;\n      }\n      return session;\n    },\n  },\n  session: { \n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60,\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: false,\n};\n\nconst handler = (NextAuth as any)(authOptions);\nexport { handler as GET, handler as POST };\n","size_bytes":2550},"src/app/api/subjects/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, subjectService, academicYearService } from \"@/lib/mongodb-services\";\n\nexport async function GET(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n  const hodUserId = session.user.id as string;\n  const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n  if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found. Ensure your user has an associated staff profile.\" }, { status: 404 });\n\n    const departmentId = hodProfile.departmentId;\n\n  const subjects = await subjectService.findMany({\n    orderBy: { name: \"asc\" },\n  });\n\n  // Manually fetch academic year data\n  const subjectsWithYear = await Promise.all(\n    subjects.map(async (subject) => {\n      const academicYear = await academicYearService.findUnique({ id: subject.academicYearId });\n      return { ...subject, academicYear };\n    })\n  );\n\n  return NextResponse.json(subjectsWithYear);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch subjects\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || (session.user && session.user.role !== \"HOD\")) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n  const departmentId = hodProfile.departmentId;\n\n    const body = await request.json();\n    let { name, subjectCode, academicYearId, semester } = body || {};\n    name = typeof name === 'string' ? name.trim() : name;\n    subjectCode = typeof subjectCode === 'string' ? subjectCode.trim().toUpperCase() : subjectCode;\n\n    if (!name || !subjectCode || !academicYearId) {\n      return NextResponse.json({ error: \"Missing required fields: name, subjectCode, academicYearId are required\" }, { status: 400 });\n    }\n\n    if (semester && (semester < 1 || semester > 6)) {\n      return NextResponse.json({ error: \"Semester must be between 1 and 6\" }, { status: 400 });\n    }\n\n    const year = await academicYearService.findUnique({ id: academicYearId });\n    if (!year) return NextResponse.json({ error: `AcademicYear not found for id=${academicYearId}` }, { status: 400 });\n\n    const existing = await subjectService.findMany({ where: { subjectCode } });\n    if (existing && existing.length > 0) {\n      return NextResponse.json({ error: `Subject with code '${subjectCode}' already exists.` }, { status: 409 });\n    }\n\n    try {\n      const created = await subjectService.create({\n        name,\n        subjectCode,\n        academicYearId,\n        departmentId,\n        semester: semester ? Number(semester) : undefined,\n      });\n      return NextResponse.json(created, { status: 201 });\n    } catch (err: any) {\n      console.error(\"Failed to create subject:\", err);\n      return NextResponse.json({ error: err?.message || \"Failed to create subject\" }, { status: 500 });\n    }\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to create subject\" }, { status: 500 });\n  }\n}\n","size_bytes":3682},"src/app/(dashboard)/dashboard/page.tsx":{"content":"// src/app/(dashboard)/dashboard/page.tsx\nimport React from \"react\";\nimport { Building2, Users, PieChart, Calendar } from \"lucide-react\";\n\nfunction StatCard({ title, value, icon }: { title: string; value: string; icon: React.ReactNode }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4 flex items-center gap-4\">\n      <div className=\"p-3 rounded-md bg-blue-50 text-blue-700\">{icon}</div>\n      <div>\n        <div className=\"text-sm text-gray-500\">{title}</div>\n        <div className=\"text-2xl font-semibold mt-1\">{value}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default function DashboardPage(): React.JSX.Element {\n  return (\n    <div className=\"min-h-screen\">\n      <main className=\"max-w-7xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-6\">Institute Overview</h1>\n\n        {/* Summary Cards Grid */}\n        <section className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard title=\"Total Departments\" value=\"6\" icon={<Building2 size={28} />} />\n          <StatCard title=\"Total Staff\" value=\"48\" icon={<Users size={28} />} />\n          <StatCard title=\"Feedback Submitted\" value=\"89%\" icon={<PieChart size={28} />} />\n          <StatCard title=\"Active Semester\" value=\"Odd 2025-26\" icon={<Calendar size={28} />} />\n        </section>\n\n        {/* Chart Section */}\n        <section className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-medium mb-4\">Feedback Completion by Department</h2>\n          <div className=\"h-64 flex items-center justify-center border-2 border-dashed border-gray-200 rounded-md text-gray-500\">\n            Bar Chart will be here\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}","size_bytes":1715},"src/app/api/feedback/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { feedbackService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || ![\"ADMIN\", \"HOD\", \"STAFF\"].includes(session.user?.role)) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const feedback = await feedbackService.findMany({});\n    return NextResponse.json(feedback);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch feedback\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"STUDENT\") return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n\n    const userId = session.user.id as string;\n  const body = await request.json();\n  const { assignmentId, ratings, any_suggestion } = body || {};\n\n    if (!assignmentId || !ratings) return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\n\n    const required = [\n      \"coverage_of_syllabus\",\n      \"covering_relevant_topics_beyond_syllabus\",\n      \"effectiveness_technical_contents\",\n      \"effectiveness_communication_skills\",\n      \"effectiveness_teaching_aids\",\n      \"motivation_self_learning\",\n      \"support_practical_performance\",\n      \"support_project_seminar\",\n      \"feedback_on_student_progress\",\n      \"punctuality_and_discipline\",\n      \"domain_knowledge\",\n      \"interaction_with_students\",\n      \"ability_to_resolve_difficulties\",\n      \"encourage_cocurricular\",\n      \"encourage_extracurricular\",\n      \"guidance_during_internship\",\n    ];\n\n    for (const k of required) {\n      if (typeof ratings[k] !== \"number\") return NextResponse.json({ error: `Missing rating for ${k}` }, { status: 400 });\n    }\n\n    const existing = await feedbackService.findFirst({ assignmentId, studentId: userId });\n    if (existing) return NextResponse.json({ error: \"Feedback already submitted\" }, { status: 409 });\n\n    await feedbackService.create({\n      studentId: userId,\n      assignmentId,\n      coverage_of_syllabus: ratings.coverage_of_syllabus,\n      covering_relevant_topics_beyond_syllabus: ratings.covering_relevant_topics_beyond_syllabus,\n      effectiveness_technical_contents: ratings.effectiveness_technical_contents,\n      effectiveness_communication_skills: ratings.effectiveness_communication_skills,\n      effectiveness_teaching_aids: ratings.effectiveness_teaching_aids,\n      motivation_self_learning: ratings.motivation_self_learning,\n      support_practical_performance: ratings.support_practical_performance,\n      support_project_seminar: ratings.support_project_seminar,\n      feedback_on_student_progress: ratings.feedback_on_student_progress,\n      punctuality_and_discipline: ratings.punctuality_and_discipline,\n      domain_knowledge: ratings.domain_knowledge,\n      interaction_with_students: ratings.interaction_with_students,\n      ability_to_resolve_difficulties: ratings.ability_to_resolve_difficulties,\n      encourage_cocurricular: ratings.encourage_cocurricular,\n      encourage_extracurricular: ratings.encourage_extracurricular,\n      guidance_during_internship: ratings.guidance_during_internship,\n      any_suggestion: typeof any_suggestion === 'string' && any_suggestion.trim().length > 0 ? any_suggestion.trim() : null,\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to save feedback\" }, { status: 500 });\n  }\n}\n","size_bytes":3813},"src/app/api/hods/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { userService, staffService, departmentService } from \"@/lib/mongodb-services\";\nimport bcrypt from \"bcrypt\";\n\nexport async function GET() {\n  try {\n    const users = await userService.findMany({ where: { role: 'HOD' } });\n\n    const hods = await Promise.all(users.map(async (u: any) => {\n      const staffProfile = await staffService.findFirst({ where: { userId: u.id } });\n      let department = null;\n      if (staffProfile && staffProfile.departmentId) {\n        department = await departmentService.findUnique({ id: staffProfile.departmentId });\n      }\n\n      return {\n        id: u.id,\n        name: u.name,\n        email: u.email,\n        staffProfile: staffProfile\n          ? { department: department ? { id: department.id, name: department.name, abbreviation: department.abbreviation } : null }\n          : null,\n      };\n    }));\n\n    return NextResponse.json(hods);\n  } catch (error) {\n    return NextResponse.json({ error: \"Failed to fetch HODs\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { name, email, password, departmentId } = body || {};\n\n    if (!name || !email || !password || !departmentId) {\n      return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n\n    const existing = await userService.findUnique({ email });\n    if (existing) {\n      return NextResponse.json({ error: \"User with this email already exists\" }, { status: 409 });\n    }\n\n    const hashed = await bcrypt.hash(password, 10);\n\n    const created = await userService.create({\n      name,\n      email,\n      hashedPassword: hashed,\n      role: \"HOD\",\n    });\n\n    const createdStaff = await staffService.create({\n      userId: created.id,\n      departmentId,\n    });\n\n    const department = await departmentService.findUnique({ id: departmentId });\n\n    const result = {\n      ...created,\n      staffProfile: {\n        ...createdStaff,\n        department,\n      },\n    };\n\n    return NextResponse.json(result, { status: 201 });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to create HOD\" }, { status: 500 });\n  }\n}\n","size_bytes":2277},"src/app/(dashboard)/layout.tsx":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getServerSession } from \"next-auth/next\";\nimport { redirect } from \"next/navigation\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport React from \"react\";\n// Import the client-side DashboardShell directly. It's a client component so Next will handle it correctly.\nimport DashboardShell from \"@/components/dashboard-shell\";\n\nexport const metadata = {\n  title: \"SPIOT Dashboard\",\n};\n\n// Server-side layout that protects dashboard routes and renders the client Sidebar\nexport default async function DashboardLayout({ children }: { children: React.ReactNode }) {\n  const session = await getServerSession(authOptions as any);\n  if (!session) redirect(\"/login\");\n\n  return (\n    <DashboardShell>\n      {children}\n    </DashboardShell>\n  );\n}\n","size_bytes":825},"prisma/seed.js":{"content":"const { PrismaClient } = require(\"@prisma/client\");\nconst bcrypt = require(\"bcrypt\");\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Assumptions: admin password set to 'adminpassword' (change after first login)\n  const adminPassword = \"adminpassword\";\n  const adminHashed = await bcrypt.hash(adminPassword, 10);\n\n  const admin = await prisma.user.upsert({\n    where: { email: \"admin@gmail.com\" },\n    update: {},\n    create: {\n      name: \"SPIOT Admin\",\n      email: \"admin@gmail.com\",\n      hashedPassword: adminHashed,\n      role: \"ADMIN\",\n    },\n  });\n  console.log(\"Admin created:\", admin.email, \"password:\", adminPassword);\n\n  // HOD account\n  const hodPassword = \"12\";\n  const hodHashed = await bcrypt.hash(hodPassword, 10);\n  const hodUser = await prisma.user.upsert({\n    where: { email: \"kharat@gmail.com\" },\n    update: {},\n    create: {\n      name: \"Mrs. Kharat J. N.\",\n      email: \"kharat@gmail.com\",\n      hashedPassword: hodHashed,\n      role: \"HOD\",\n    },\n  });\n  console.log(\"HOD created:\", hodUser.email, \"password:\", hodPassword);\n\n  // Create Department\n  const dept = await prisma.department.upsert({\n    where: { name: \"Computer Engineering\" },\n    update: {},\n    create: { name: \"Computer Engineering\", abbreviation: \"CO\" },\n  });\n\n  // Create an Academic Year and link subjects/students to it\n  const academicYear = await prisma.academicYear.upsert({\n    where: { abbreviation: \"FYCO\" },\n    update: {},\n    create: { name: \"First Year Computer Engineering\", abbreviation: \"FYCO\" },\n  });\n\n  // ensure HOD has a staff profile in the department\n  const hodStaff = await prisma.staff.upsert({\n    where: { userId: hodUser.id },\n    update: {},\n    create: {\n      user: { connect: { id: hodUser.id } },\n      department: { connect: { id: dept.id } },\n    },\n  });\n\n  // attach HOD to department managed field\n  try {\n    await prisma.department.update({ where: { id: dept.id }, data: { hodId: hodStaff.id } });\n  } catch (e) {\n    // ignore\n  }\n\n  // Student account\n  const studentPassword = \"ss\";\n  const studentHashed = await bcrypt.hash(studentPassword, 10);\n  const student = await prisma.user.upsert({\n    where: { email: \"swapnil@gmail.com\" },\n    update: {},\n    create: {\n      name: \"swapnil\",\n      email: \"swapnil@gmail.com\",\n      hashedPassword: studentHashed,\n      role: \"STUDENT\",\n    },\n  });\n  // associate student with department and academic year\n  await prisma.user.update({ where: { id: student.id }, data: { departmentId: dept.id, academicYearId: academicYear.id } });\n\n  // ensure a staff profile for the student exists (some parts of app expect it)\n  await prisma.staff.upsert({\n    where: { userId: student.id },\n    update: {},\n    create: { user: { connect: { id: student.id } }, department: { connect: { id: dept.id } } },\n  });\n\n  // Create a demo faculty user and staff profile for the department\n  const facultyPassword = \"facultypass\";\n  const facultyHashed = await bcrypt.hash(facultyPassword, 10);\n  const faculty = await prisma.user.upsert({\n    where: { email: \"faculty@spiot.example\" },\n    update: {},\n    create: { name: \"Demo Faculty\", email: \"faculty@spiot.example\", hashedPassword: facultyHashed, role: \"HOD\" },\n  });\n  const facultyStaff = await prisma.staff.upsert({\n    where: { userId: faculty.id },\n    update: {},\n    create: { user: { connect: { id: faculty.id } }, department: { connect: { id: dept.id } } },\n  });\n\n  // create a subject for the academic year\n  const subject = await prisma.subject.upsert({\n    where: { subjectCode: \"OOP101\" },\n    update: {},\n    create: { name: \"Object Oriented Programming\", subjectCode: \"OOP101\", academicYear: { connect: { id: academicYear.id } } },\n  });\n\n  // create a faculty assignment linking the demo faculty and subject\n  try {\n    await prisma.facultyAssignment.create({ data: { semester: \"Odd 2025-26\", staff: { connect: { id: facultyStaff.id } }, subject: { connect: { id: subject.id } } } });\n  } catch (e) {\n    // ignore unique constraint errors\n  }\n\n  console.log(\"Student user created/upserted:\", student.email, \"password:\", studentPassword);\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n","size_bytes":4232},"src/app/api/hod/comparative-report/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService } from \"@/lib/mongodb-services\";\nimport ExcelJS from \"exceljs\";\n\nconst PARAM_KEYS = [\n  \"coverage_of_syllabus\",\n  \"covering_relevant_topics_beyond_syllabus\",\n  \"effectiveness_technical_contents\",\n  \"effectiveness_communication_skills\",\n  \"effectiveness_teaching_aids\",\n  \"motivation_self_learning\",\n  \"support_practical_performance\",\n  \"support_project_seminar\",\n  \"feedback_on_student_progress\",\n  \"punctuality_and_discipline\",\n  \"domain_knowledge\",\n  \"interaction_with_students\",\n  \"ability_to_resolve_difficulties\",\n  \"encourage_cocurricular\",\n  \"encourage_extracurricular\",\n  \"guidance_during_internship\",\n];\n\nconst PARAM_LABELS: Record<string, string> = {\n  coverage_of_syllabus: \"Coverage of syllabus\",\n  covering_relevant_topics_beyond_syllabus: \"Covering relevant topics beyond the syllabus\",\n  effectiveness_technical_contents: \"Effectiveness (technical contents)\",\n  effectiveness_communication_skills: \"Effectiveness (communication skills)\",\n  effectiveness_teaching_aids: \"Effectiveness (teaching aids)\",\n  motivation_self_learning: \"Motivation / self-learning\",\n  support_practical_performance: \"Support - practical performance\",\n  support_project_seminar: \"Support - project & seminar\",\n  feedback_on_student_progress: \"Feedback on student progress\",\n  punctuality_and_discipline: \"Punctuality & discipline\",\n  domain_knowledge: \"Domain knowledge\",\n  interaction_with_students: \"Interaction with students\",\n  ability_to_resolve_difficulties: \"Ability to resolve difficulties\",\n  encourage_cocurricular: \"Encourage cocurricular\",\n  encourage_extracurricular: \"Encourage extracurricular\",\n  guidance_during_internship: \"Guidance during internship\",\n};\n\nexport async function GET(req: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const url = new URL(req.url);\n    const yearId = url.searchParams.get(\"year\");\n    if (!yearId) return NextResponse.json({ error: \"Missing academicYearId (year) query param\" }, { status: 400 });\n\n    // find department for HOD\n    const hodStaff = await staffService.findUnique({ where: { userId: session.user.id } });\n    if (!hodStaff || !hodStaff.departmentId) return NextResponse.json({ error: \"HOD or department not found\" }, { status: 404 });\n    const departmentId = hodStaff.departmentId;\n\n    // fetch staff in department with assignments for the requested academic year\n    const staffs = await staffService.findMany({\n      where: { departmentId },\n      include: {\n        user: true,\n        assignments: {\n          where: { subject: { academicYearId: yearId } },\n          include: { subject: true, feedbacks: true },\n        },\n      },\n    });\n\n    // Build ordered list of staff with their assignments\n    const matrixStaffs: any[] = staffs\n      .map((s: any) => ({\n        staffId: s.id,\n        staffName: s.user?.name || s.user?.email || \"Unknown\",\n        assignments: (s.assignments || []).map((a: any) => ({\n          assignmentId: a.id,\n          semester: a.semester,\n          subject: { id: a.subject.id, name: a.subject.name },\n          feedbacks: a.feedbacks || [],\n        })),\n      }))\n      .filter((s: any) => s.assignments && s.assignments.length > 0);\n\n    // Build Excel workbook\n    const workbook = new ExcelJS.Workbook();\n    const ws = workbook.addWorksheet(\"Comparative Report\");\n\n    // Header construction\n    // Row 1: Staff header (Parameter | Staff1 merged across their subjects | Staff2 ...)\n    // Row 2: Subject header (empty | subj1 | subj2 | subj3 ...)\n\n    const headerStaffRow: any[] = [\"Parameter\"];\n    const headerSubjectRow: any[] = [\"\"];\n\n    // track column positions for merges and data mapping\n    const subjectColumns: { staffId: string; staffName: string; subjectId: string; subjectName: string }[] = [];\n\n    for (const s of matrixStaffs) {\n      const subjCount = s.assignments.length;\n      for (const a of s.assignments) {\n        headerStaffRow.push(s.staffName);\n        headerSubjectRow.push(a.subject.name);\n        subjectColumns.push({ staffId: s.staffId, staffName: s.staffName, subjectId: a.subject.id, subjectName: a.subject.name });\n      }\n    }\n\n    ws.addRow(headerStaffRow);\n    ws.addRow(headerSubjectRow);\n\n    // Merge staff header cells: starting from column 2\n    let colIndex = 2;\n    for (const s of matrixStaffs) {\n      const span = s.assignments.length;\n      if (span > 1) {\n        ws.mergeCells(1, colIndex, 1, colIndex + span - 1);\n      }\n      colIndex += span;\n    }\n\n    // Style header rows (bold + fill)\n  const headerFill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFDCE6F1' } } as any;\n    ws.getRow(1).font = { bold: true };\n    ws.getRow(1).eachCell((cell) => (cell.fill = headerFill));\n    ws.getRow(2).font = { bold: true };\n    ws.getRow(2).eachCell((cell) => (cell.fill = headerFill));\n\n    // Prepare flatAssignments order from subjectColumns\n    const flatAssignments = subjectColumns.map((col) => {\n      // find the assignment object\n      const staff = matrixStaffs.find((s) => s.staffId === col.staffId);\n      const assignment = staff.assignments.find((a: any) => a.subject.id === col.subjectId);\n      return { ...assignment, staffName: staff.staffName };\n    });\n\n    // Compute per-assignment per-parameter averages\n    for (const a of flatAssignments) {\n      const feedbacks = a.feedbacks || [];\n      const averages: Record<string, number | null> = {};\n      if (feedbacks.length === 0) {\n        PARAM_KEYS.forEach((k) => (averages[k] = null));\n      } else {\n        for (const k of PARAM_KEYS) {\n          let sum = 0;\n          for (const f of feedbacks) {\n            const v = Number((f as any)[k]);\n            sum += Number.isFinite(v) ? v : 0;\n          }\n          averages[k] = parseFloat((sum / feedbacks.length).toFixed(2));\n        }\n      }\n      a.averages = averages;\n      console.log(`Assignment ${a.assignmentId} (${a.subject.name}) averages:`, averages);\n    }\n\n    // Add 16 parameter rows starting at row 3\n    for (const key of PARAM_KEYS) {\n      const row: (string | number)[] = [PARAM_LABELS[key] || key];\n      for (const a of flatAssignments) {\n        const v = a.averages && typeof a.averages[key] === 'number' ? a.averages[key] : null;\n        row.push(v === null ? '' : v);\n      }\n      ws.addRow(row);\n    }\n\n    // Summary rows\n    const totals: number[] = [];\n    const marks25: number[] = [];\n    const avgParams: number[] = [];\n\n    for (const a of flatAssignments) {\n      let total = 0;\n      for (const k of PARAM_KEYS) {\n        const v = a.averages && typeof a.averages[k] === 'number' ? a.averages[k] : 0;\n        total += v;\n      }\n      const marksOut = (total / (PARAM_KEYS.length * 5)) * 25;\n      const avgParam = PARAM_KEYS.length ? total / PARAM_KEYS.length : 0;\n\n      totals.push(parseFloat(total.toFixed(2)));\n      marks25.push(parseFloat(marksOut.toFixed(2)));\n      avgParams.push(parseFloat(avgParam.toFixed(2)));\n\n      console.log(`Assignment ${a.assignmentId} totals: total=${total.toFixed(2)}, marks25=${marksOut.toFixed(2)}, avgParam=${avgParam.toFixed(2)}`);\n    }\n\n    const totalRow = [\"TOTAL MARKS (out of 80)\", ...totals];\n    const marks25Row = [\"MARKS OUT OF 25\", ...marks25];\n    const avgRow = [\"Average Parameter Score (out of 5)\", ...avgParams];\n\n    const rTotal = ws.addRow(totalRow);\n    const rMarks = ws.addRow(marks25Row);\n    const rAvg = ws.addRow(avgRow);\n\n    // Style summary rows\n    rTotal.getCell(1).font = { bold: true };\n    rMarks.getCell(1).font = { bold: true };\n    rAvg.getCell(1).font = { bold: true };\n    rTotal.eachCell((cell) => {\n      const existing = (cell.border as any) || {};\n      cell.border = { ...existing, top: { style: 'thin' } } as any;\n    });\n\n    // Format summary numeric cells\n    const colCount = 1 + flatAssignments.length;\n    for (let c = 2; c <= colCount; c++) {\n      const ct = rTotal.getCell(c);\n      if (typeof ct.value === 'number') ct.numFmt = '0.00';\n      const cm = rMarks.getCell(c);\n      if (typeof cm.value === 'number') cm.numFmt = '0.00';\n      const ca = rAvg.getCell(c);\n      if (typeof ca.value === 'number') ca.numFmt = '0.00';\n    }\n\n    // Column widths\n    ws.getColumn(1).width = 40;\n    for (let c = 2; c <= colCount; c++) ws.getColumn(c).width = 20;\n\n    // Freeze top 2 rows and first column\n    ws.views = [{ state: 'frozen', ySplit: 2, xSplit: 1 }];\n\n    // Add a second worksheet for qualitative suggestions/comments\n    const commentsSheet = workbook.addWorksheet('Suggestions');\n    commentsSheet.addRow(['Faculty Name', 'Subject', 'Suggestion']);\n    for (const s of matrixStaffs) {\n      for (const a of s.assignments) {\n        const feedbacks = a.feedbacks || [];\n        for (const f of feedbacks) {\n          const text = (f as any).any_suggestion;\n          if (text && typeof text === 'string' && text.trim().length > 0) {\n            commentsSheet.addRow([s.staffName, a.subject.name, text.trim()]);\n          }\n        }\n      }\n    }\n\n    const buffer = await workbook.xlsx.writeBuffer();\n    return new Response(buffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'Content-Disposition': 'attachment; filename=\"Feedback-Report.xlsx\"',\n      },\n    });\n  } catch (error) {\n    console.error('comparative-report error', error);\n    return NextResponse.json({ error: 'Failed to generate report' }, { status: 500 });\n  }\n}\n\nfunction computeAverages(feedbacks: any[]) {\n  const totals: any = {};\n  PARAM_KEYS.forEach((k) => (totals[k] = 0));\n  if (!feedbacks || feedbacks.length === 0) {\n    return PARAM_KEYS.reduce((acc: any, k) => ({ ...acc, [k]: null }), {});\n  }\n  for (const f of feedbacks) {\n    PARAM_KEYS.forEach((k) => {\n      totals[k] += Number((f as any)[k] ?? 0);\n    });\n  }\n  const avg: any = {};\n  PARAM_KEYS.forEach((k) => {\n    avg[k] = parseFloat((totals[k] / feedbacks.length).toFixed(2));\n  });\n  return avg;\n}\n","size_bytes":10376},"src/app/api/reports/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService } from \"@/lib/mongodb-services\";\n\nconst CURRENT_SEMESTER = \"Odd 2025-26\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n\n    const role = session.user?.role;\n\n    if (role === \"HOD\") {\n      const hodProfile = await staffService.findUnique({ where: { userId: session.user.id } });\n      if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n      // fetch staff in department, then filter assignments\n      const deptStaff = await staffService.findMany({ where: { departmentId: hodProfile.departmentId }, include: { user: true } });\n      const staffIds = deptStaff.map(s => s.id);\n      const allAssignments = await assignmentService.findMany({ where: { semester: CURRENT_SEMESTER }, include: { subject: true, feedbacks: true } });\n      const assignments = allAssignments.filter(a => staffIds.includes(a.staffId)).map(a => ({\n        ...a,\n        staff: deptStaff.find(s => s.id === a.staffId)\n      }));\n\n      const reports = assignmentsWithStaff.map((a: any) => {\n        const averages: any = {};\n        const params = [\n          \"coverage_of_syllabus\",\n          \"covering_relevant_topics_beyond_syllabus\",\n          \"effectiveness_technical_contents\",\n          \"effectiveness_communication_skills\",\n          \"effectiveness_teaching_aids\",\n          \"motivation_self_learning\",\n          \"support_practical_performance\",\n          \"support_project_seminar\",\n          \"feedback_on_student_progress\",\n          \"punctuality_and_discipline\",\n          \"domain_knowledge\",\n          \"interaction_with_students\",\n          \"ability_to_resolve_difficulties\",\n          \"encourage_cocurricular\",\n          \"encourage_extracurricular\",\n          \"guidance_during_internship\",\n        ];\n\n        for (const p of params) {\n          const vals = a.feedbacks.map((f: any) => f[p]).filter((v: any) => typeof v === 'number');\n          const avg = vals.length ? vals.reduce((s: number, x: number) => s + x, 0) / vals.length : 0;\n          averages[p] = Number(avg.toFixed(2));\n        }\n\n        return {\n          facultyName: a.staff?.user?.name || a.staff?.user?.email,\n          subjectName: a.subject?.name,\n          assignmentId: a.id,\n          averages,\n        };\n      });\n\n      return NextResponse.json(reports);\n    }\n\n    if (role === \"HOD\" || role === \"ADMIN\") {\n      // handled above\n    }\n\n    if (role) {\n      // assume staff\n      const staff = await staffService.findUnique({ where: { userId: session.user.id }, include: { user: true } });\n      if (!staff) return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n\n      const assignments = await assignmentService.findMany({ where: { semester: CURRENT_SEMESTER, staffId: staff.id }, include: { subject: true, feedbacks: true } });\n      const assignmentsWithStaff = assignments.map(a => ({ ...a, staff }));\n\n      const reports = assignmentsWithStaff.map((a: any) => {\n        const averages: any = {};\n        const params = [\n          \"coverage_of_syllabus\",\n          \"covering_relevant_topics_beyond_syllabus\",\n          \"effectiveness_technical_contents\",\n          \"effectiveness_communication_skills\",\n          \"effectiveness_teaching_aids\",\n          \"motivation_self_learning\",\n          \"support_practical_performance\",\n          \"support_project_seminar\",\n          \"feedback_on_student_progress\",\n          \"punctuality_and_discipline\",\n          \"domain_knowledge\",\n          \"interaction_with_students\",\n          \"ability_to_resolve_difficulties\",\n          \"encourage_cocurricular\",\n          \"encourage_extracurricular\",\n          \"guidance_during_internship\",\n        ];\n\n        for (const p of params) {\n          const vals = a.feedbacks.map((f: any) => f[p]).filter((v: any) => typeof v === 'number');\n          const avg = vals.length ? vals.reduce((s: number, x: number) => s + x, 0) / vals.length : 0;\n          averages[p] = Number(avg.toFixed(2));\n        }\n\n        return {\n          facultyName: a.staff?.user?.name || a.staff?.user?.email,\n          subjectName: a.subject?.name,\n          assignmentId: a.id,\n          averages,\n        };\n      });\n\n      return NextResponse.json(reports);\n    }\n\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to compute reports\" }, { status: 500 });\n  }\n}\n","size_bytes":4801},"src/app/(dashboard)/hod/assignment/page.tsx":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\";\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Select, { MultiValue } from \"react-select\";\nimport { Button } from \"@/components/ui-controls\";\nimport toast from \"react-hot-toast\";\n\ntype StaffRow = { id: string; user: { id: string; name?: string | null; email?: string | null }; department?: { id: string; name?: string | null; abbreviation?: string | null } };\ntype Subject = { id: string; name: string; subjectCode: string; targetYear: string };\ntype Option = { value: string; label: string };\n\nexport default function AssignmentPage(): React.ReactElement {\n  const [staff, setStaff] = useState<StaffRow[]>([]);\n  const [subjects, setSubjects] = useState<Subject[]>([]);\n  const [assignments, setAssignments] = useState<Record<string, string[]>>({});\n  const [currentSemester, setCurrentSemester] = useState<string>(\"Loading...\");\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    try {\n      // Fetch semester settings\n      const semesterRes = await fetch(\"/api/admin/semester-settings\");\n      if (semesterRes.ok) {\n        const semesterData = await semesterRes.json();\n        setCurrentSemester(semesterData.semesterString || \"Semester 2025-26\");\n      }\n\n      // Fetch subjects\n      const subjectsRes = await fetch(\"/api/subjects\");\n      if (!subjectsRes.ok) throw new Error(\"Failed to fetch subjects\");\n      const subjectsData = await subjectsRes.json();\n      setSubjects(subjectsData || []);\n\n      // Fetch all staff\n      const staffRes = await fetch(\"/api/staff\");\n      if (!staffRes.ok) throw new Error(\"Failed to fetch staff\");\n      const staffData = await staffRes.json();\n      setStaff(staffData || []);\n\n      // Fetch existing assignments\n      const assignmentsRes = await fetch(\"/api/hod/faculty-assignments\");\n      if (!assignmentsRes.ok) throw new Error(\"Failed to fetch assignments\");\n      const assignmentsData = await assignmentsRes.json();\n\n      // Convert assignments array to subject -> staffIds mapping\n      const assignmentMap: Record<string, string[]> = {};\n      (subjectsData || []).forEach((subject: Subject) => {\n        assignmentMap[subject.id] = [];\n      });\n\n      (assignmentsData || []).forEach((assignment: any) => {\n        if (!assignmentMap[assignment.subjectId]) {\n          assignmentMap[assignment.subjectId] = [];\n        }\n        assignmentMap[assignment.subjectId].push(assignment.staffId);\n      });\n\n      setAssignments(assignmentMap);\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Failed to load data\");\n    }\n  }\n\n  const staffOptions = useMemo((): Option[] => {\n    return staff.map((s) => {\n      const name = s.user?.name || s.user?.email || \"Unnamed\";\n      const deptAbbr = s.department?.abbreviation ? ` (${s.department.abbreviation})` : \"\";\n      return { value: s.id, label: `${name}${deptAbbr}` };\n    });\n  }, [staff]);\n\n  const valueForSubject = useCallback((subjectId: string): Option[] => {\n    const staffIds = assignments[subjectId] || [];\n    return staffOptions.filter((o) => staffIds.includes(o.value));\n  }, [assignments, staffOptions]);\n\n  const handleChange = useCallback((subjectId: string, opts: MultiValue<Option> | null) => {\n    const picked = opts ? Array.from(opts) as Option[] : [];\n    const ids = picked.map((o) => o.value);\n    setAssignments((prev) => ({ ...prev, [subjectId]: ids }));\n  }, []);\n\n  const handleSaveAll = useCallback(async () => {\n    setIsSaving(true);\n    try {\n      const payload = {\n        semester: currentSemester,\n        assignments: Object.entries(assignments).flatMap(([subjectId, staffIds]) =>\n          staffIds.map(staffId => ({ subjectId, staffId }))\n        )\n      };\n\n      const res = await fetch(`/api/hod/faculty-assignments`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error?.error || \"Failed to save assignments\");\n      }\n\n      toast.success(\"All assignments saved successfully!\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Save failed\");\n    } finally {\n      setIsSaving(false);\n    }\n  }, [assignments, currentSemester]);\n\n  const selectStyles = useMemo(() => ({\n    menuPortal: (base: any) => ({ ...base, zIndex: 9999 }),\n    control: (base: any) => ({\n      ...base,\n      background: 'var(--input-bg)',\n      borderColor: 'var(--input-border)',\n      '&:hover': {\n        borderColor: 'var(--input-focus-border)',\n      },\n    }),\n    menu: (base: any) => ({\n      ...base,\n      background: 'var(--card-bg)',\n      border: '1px solid var(--card-border)',\n    }),\n    option: (base: any, state: any) => ({\n      ...base,\n      background: state.isSelected ? 'var(--primary)' : state.isFocused ? 'var(--hover-overlay)' : 'transparent',\n      color: state.isSelected ? 'white' : 'var(--text-primary)',\n      '&:active': {\n        background: 'var(--primary)',\n      },\n    }),\n    multiValue: (base: any) => ({\n      ...base,\n      background: 'var(--primary-light)',\n    }),\n    multiValueLabel: (base: any) => ({\n      ...base,\n      color: 'var(--text-primary)',\n    }),\n    multiValueRemove: (base: any) => ({\n      ...base,\n      color: 'var(--text-secondary)',\n      '&:hover': {\n        background: 'var(--danger-light)',\n        color: 'var(--danger)',\n      },\n    }),\n  }), []);\n\n  return (\n    <main className=\"max-w-7xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n            Faculty Assignment for {currentSemester}\n          </h1>\n          <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n            Assign faculty members to subjects. Multiple faculty can be assigned to each subject.\n          </p>\n        </div>\n        <Button onClick={handleSaveAll} disabled={isSaving}>\n          {isSaving ? \"Saving...\" : \"Save All Assignments\"}\n        </Button>\n      </div>\n\n      <div className=\"table-wrapper\">\n        <table className=\"data-table\">\n          <thead>\n            <tr>\n              <th style={{ width: \"35%\" }}>Subject</th>\n              <th>Assigned Faculty</th>\n            </tr>\n          </thead>\n          <tbody>\n            {subjects.length === 0 ? (\n              <tr>\n                <td colSpan={2} className=\"text-center py-8\" style={{ color: \"var(--text-muted)\" }}>\n                  No subjects found. Please add subjects first.\n                </td>\n              </tr>\n            ) : (\n              subjects.map((subject) => (\n                <tr key={subject.id}>\n                  <td>\n                    <div>\n                      <div className=\"font-medium\" style={{ color: \"var(--text-primary)\" }}>\n                        {subject.name}\n                      </div>\n                      <div className=\"text-sm\" style={{ color: \"var(--text-muted)\" }}>\n                        {subject.subjectCode}\n                      </div>\n                    </div>\n                  </td>\n                  <td>\n                    <Select\n                      isMulti\n                      options={staffOptions}\n                      value={valueForSubject(subject.id)}\n                      onChange={(opts) => handleChange(subject.id, opts)}\n                      menuPortalTarget={typeof document !== \"undefined\" ? document.body : null}\n                      styles={selectStyles}\n                      placeholder=\"Select faculty members...\"\n                    />\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </main>\n  );\n}\n","size_bytes":7898},"src/app/api/students/[id]/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, userService } from \"@/lib/mongodb-services\";\n\nexport async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { id } = await params;\n    if (!id) return NextResponse.json({ error: \"Missing id\" }, { status: 400 });\n\n    // Ensure HOD belongs to a department and optionally validate ownership\n    const hodProfile = await staffService.findUnique({ where: { userId: session.user.id } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    // Optionally ensure the student belongs to same department â we'll delete only if student's department matches HOD's\n    const student = await userService.findUnique({ id });\n    if (!student) return NextResponse.json({ error: \"Student not found\" }, { status: 404 });\n    if (student.departmentId !== hodProfile.departmentId) {\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n    }\n\n    await userService.delete({ id });\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to delete student\" }, { status: 500 });\n  }\n}\n","size_bytes":1626},"src/app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport { NextAuthProvider } from \"@/providers/session-provider\";\nimport { Toaster } from \"react-hot-toast\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <NextAuthProvider>\n          {children}\n          <Toaster />\n        </NextAuthProvider>\n      </body>\n    </html>\n  );\n}\n","size_bytes":901},"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1450},"src/providers/session-provider.tsx":{"content":"\"use client\";\n\nimport { SessionProvider } from \"next-auth/react\";\nimport React from \"react\";\n\ntype Props = {\n  children?: React.ReactNode;\n};\n\nexport const NextAuthProvider = ({ children }: Props) => {\n  return (\n    <SessionProvider \n      basePath=\"/api/auth\"\n      refetchInterval={0}\n      refetchOnWindowFocus={false}\n    >\n      {children}\n    </SessionProvider>\n  );\n};\n","size_bytes":377},"src/app/api/subjects/[id]/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport type { Session } from \"next-auth\";\nimport { staffService, subjectService, assignmentService } from \"@/lib/mongodb-services\";\n\nexport async function PATCH(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n\n    const session = (await getServerSession(authOptions as any)) as Session | null;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const subject = await subjectService.findUnique({ id });\n    if (!subject) return NextResponse.json({ error: \"Subject not found\" }, { status: 404 });\n\n    // The HOD must exist and own a staff profile; that's sufficient to allow edits to\n    // subjects for their department. Previously we required an existing faculty\n    // assignment in the HOD's department which prevented editing subjects that had\n    // no assignments yet. We'll allow the HOD to edit subjects; further checks\n    // (e.g., ensuring subject.academicYear matches department policy) can be added\n    // later.\n\n    const body = await request.json();\n    const { name, subjectCode, academicYearId, semester } = body || {};\n    if (!name || !subjectCode || !academicYearId) return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\n\n    if (semester && (semester < 1 || semester > 6)) {\n      return NextResponse.json({ error: \"Semester must be between 1 and 6\" }, { status: 400 });\n    }\n\n  const updateData: any = { name, subjectCode, academicYearId };\n  if (semester) {\n    updateData.semester = Number(semester);\n  }\n\n  const updated = await subjectService.update({ id }, updateData);\n  return NextResponse.json(updated);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update subject\" }, { status: 500 });\n  }\n}\n\n// DELETE: remove a subject (only HODs managing the department may delete)\nexport async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n    const session = (await getServerSession(authOptions as any)) as Session | null;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const subject = await subjectService.findUnique({ id });\n    if (!subject) return NextResponse.json({ error: \"Subject not found\" }, { status: 404 });\n\n  // Allow HODs to delete subjects; no longer require an existing assignment in\n  // order to delete. We'll still require the requester to be a HOD (checked above).\n\n    // Delete related faculty assignments first (best-effort)\n    try {\n      await assignmentService.deleteMany({ subjectId: id });\n    } catch (e) {\n      console.warn(\"Failed to delete related assignments\", e);\n    }\n\n    await subjectService.delete({ id });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to delete subject\" }, { status: 500 });\n  }\n}\n","size_bytes":3740},"src/components/ui-controls.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: React.ReactNode;\n  variant?: \"primary\" | \"secondary\" | \"danger\" | \"outline\" | \"ghost\";\n};\n\nexport function Button({ children, variant = \"primary\", className = \"\", ...props }: ButtonProps) {\n  const baseClass = variant === \"primary\" ? \"btn-primary\" :\n                    variant === \"secondary\" ? \"btn-secondary\" :\n                    variant === \"danger\" ? \"btn-danger\" :\n                    variant === \"outline\" ? \"btn-outline\" :\n                    \"btn-ghost\";\n  \n  return (\n    <button\n      {...props}\n      className={`${baseClass} ${className}`}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function PrimaryButton({ children, className = \"\", ...props }: ButtonProps) {\n  return (\n    <button\n      {...props}\n      className={`btn-primary ${className}`}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function SecondaryButton({ children, className = \"\", ...props }: ButtonProps) {\n  return (\n    <button\n      {...props}\n      className={`btn-secondary ${className}`}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function DangerButton({ children, className = \"\", ...props }: ButtonProps) {\n  return (\n    <button\n      {...props}\n      className={`btn-danger ${className}`}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport function OutlineButton({ children, className = \"\", ...props }: ButtonProps) {\n  return (\n    <button\n      {...props}\n      className={`btn-outline ${className}`}\n    >\n      {children}\n    </button>\n  );\n}\n\ntype InputProps = React.InputHTMLAttributes<HTMLInputElement> & { \n  label?: string; \n  error?: string;\n  helper?: string;\n};\n\nexport function TextInput({\n  label,\n  error,\n  helper,\n  className = \"\",\n  ...props\n}: InputProps) {\n  return (\n    <div className=\"w-full\">\n      {label && <label className=\"form-label\">{label}</label>}\n      <input\n        {...props}\n        className={`input-field ${error ? \"border-red-500\" : \"\"} ${className}`}\n      />\n      {error && <p className=\"form-error\">{error}</p>}\n      {helper && !error && <p className=\"form-helper\">{helper}</p>}\n    </div>\n  );\n}\n\ntype SelectProps = React.SelectHTMLAttributes<HTMLSelectElement> & { \n  label?: string; \n  error?: string;\n  helper?: string;\n};\n\nexport function Select({\n  label,\n  error,\n  helper,\n  className = \"\",\n  children,\n  ...props\n}: SelectProps) {\n  return (\n    <div className=\"w-full\">\n      {label && <label className=\"form-label\">{label}</label>}\n      <select\n        {...props}\n        className={`input-field ${error ? \"border-red-500\" : \"\"} ${className}`}\n      >\n        {children}\n      </select>\n      {error && <p className=\"form-error\">{error}</p>}\n      {helper && !error && <p className=\"form-helper\">{helper}</p>}\n    </div>\n  );\n}\n\ntype TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & { \n  label?: string; \n  error?: string;\n  helper?: string;\n};\n\nexport function TextArea({\n  label,\n  error,\n  helper,\n  className = \"\",\n  ...props\n}: TextAreaProps) {\n  return (\n    <div className=\"w-full\">\n      {label && <label className=\"form-label\">{label}</label>}\n      <textarea\n        {...props}\n        className={`input-field ${error ? \"border-red-500\" : \"\"} ${className}`}\n      />\n      {error && <p className=\"form-error\">{error}</p>}\n      {helper && !error && <p className=\"form-helper\">{helper}</p>}\n    </div>\n  );\n}\n","size_bytes":3431},"src/app/api/students/upload/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { departmentService, userService } from \"@/lib/mongodb-services\";\nimport bcrypt from \"bcrypt\";\nimport Papa from \"papaparse\";\nimport { sanitizeString, sanitizeEnrollmentNumber } from \"@/lib/security-utils\";\n\n// POST: upload CSV and create student users\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || (session.user?.role !== \"HOD\" && session.user?.role !== \"ADMIN\")) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const contentType = request.headers.get(\"content-type\") || \"\";\n    if (!contentType.includes(\"multipart/form-data\")) {\n      return NextResponse.json({ error: \"Expected multipart/form-data\" }, { status: 400 });\n    }\n\n    const formData = await request.formData();\n    const file = formData.get(\"file\") as File | null;\n    const academicYearId = formData.get(\"academicYearId\") as string | null;\n\n    if (!file) return NextResponse.json({ error: \"No file uploaded\" }, { status: 400 });\n    if (!academicYearId) return NextResponse.json({ error: \"academicYearId is required\" }, { status: 400 });\n\n    const text = await file.text();\n\n    const parsed = Papa.parse(text, { header: true, skipEmptyLines: true }) as any;\n    const rows = parsed.data as Array<Record<string, string>>;\n\n    const created: string[] = [];\n    const skipped: { email: string; reason: string }[] = [];\n\n    for (const r of rows) {\n      let enrollment = (r.enrollmentNumber || r.enrollment || r.email || \"\").toString().trim();\n      let fullName = (r.fullName || r.name || \"\").toString().trim();\n      const deptAbbr = (r.department || r.dept || \"\").toString().trim();\n\n      if (!enrollment || !fullName || !deptAbbr) {\n        skipped.push({ email: enrollment || \"\", reason: \"Missing required columns\" });\n        continue;\n      }\n\n      try {\n        enrollment = sanitizeEnrollmentNumber(enrollment);\n        fullName = sanitizeString(fullName);\n        \n        if (!fullName || fullName.length < 2) {\n          skipped.push({ email: enrollment, reason: \"Full name must be at least 2 characters\" });\n          continue;\n        }\n      } catch (error: any) {\n        skipped.push({ email: enrollment, reason: error.message });\n        continue;\n      }\n\n  // find department\n  const dept = await departmentService.findUnique({ abbreviation: deptAbbr });\n      if (!dept) {\n        skipped.push({ email: enrollment, reason: `Department not found: ${deptAbbr}` });\n        continue;\n      }\n\n      // check existing user\n  const existing = await userService.findUnique({ email: enrollment });\n      if (existing) {\n        skipped.push({ email: enrollment, reason: \"User already exists\" });\n        continue;\n      }\n\n      const hashed = await bcrypt.hash(enrollment, 10);\n\n      try {\n        await userService.create({\n          email: enrollment,\n          name: fullName,\n          hashedPassword: hashed,\n          role: \"STUDENT\",\n          departmentId: dept.id,\n          academicYearId,\n        });\n        created.push(enrollment);\n      } catch (err: any) {\n        console.error(\"Failed to create user for\", enrollment, err);\n        skipped.push({ email: enrollment, reason: err?.message || \"create failed\" });\n      }\n    }\n\n    return NextResponse.json({ success: true, createdCount: created.length, created, skipped });\n  } catch (error: any) {\n    console.error(error);\n    return NextResponse.json({ error: error?.message || \"Failed to upload students\" }, { status: 500 });\n  }\n}\n","size_bytes":3755},"src/app/(dashboard)/hod/submission-status/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { CustomSelect } from \"@/components/custom-select\";\nimport { SkeletonTable } from '@/components/skeletons';\n\nexport default function SubmissionStatusPage() {\n  const [data, setData] = useState<any[]>([]);\n  const [semester, setSemester] = useState<string | null>(null);\n  const [academicYears, setAcademicYears] = useState<any[]>([]);\n  const [selectedYearId, setSelectedYearId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData(yearId?: string | null) {\n    setLoading(true);\n    try {\n      const url = '/api/hod/submission-status' + (yearId ? `?yearId=${encodeURIComponent(yearId)}` : '');\n      const res = await fetch(url);\n      if (!res.ok) throw new Error('Failed to load');\n      const json = await res.json();\n      setSemester(json.semester || null);\n      \n      const years = Array.isArray(json.academicYears) ? json.academicYears : [];\n      setAcademicYears(years);\n      \n      if (!yearId && years.length > 0 && years[0] && years[0].id) {\n        const defaultId = years[0].id;\n        setSelectedYearId(defaultId);\n        setLoading(false);\n        await fetchData(defaultId);\n        return;\n      }\n\n      setSelectedYearId(json.selectedYearId || null);\n      const students = (json.students || []).slice();\n      students.sort((a: any, b: any) => (b.completedTasks || 0) - (a.completedTasks || 0));\n      setData(students);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const yearOptions = [\n    { value: \"\", label: \"All Years\" },\n    ...academicYears.filter((y) => y && y.id).map((y) => ({ value: y.id, label: y.abbreviation || y.name }))\n  ];\n\n  return (\n    <main className=\"max-w-5xl mx-auto\">\n      <div className=\"flex items-start flex-col gap-4 justify-between mb-6\">\n        <h1 className=\"text-2xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n          Feedback Submission Status {semester ? `â ${semester}` : ''}\n        </h1>\n        <CustomSelect\n          label=\"Filter by Year\"\n          options={yearOptions}\n          value={selectedYearId || ''}\n          onChange={(v) => { const value = v || null; setSelectedYearId(value); fetchData(value); }}\n          placeholder=\"Select year\"\n          className=\"w-full sm:w-64\"\n        />\n      </div>\n\n      {loading ? (\n        <div className=\"py-2\">\n          <SkeletonTable rows={6} columns={4} />\n        </div>\n      ) : (\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Student Name</th>\n                <th>Enrollment No.</th>\n                <th>Year</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.length === 0 ? (\n                <tr>\n                  <td colSpan={4} className=\"text-center py-8\" style={{ color: \"var(--text-muted)\" }}>\n                    {academicYears.length === 0 \n                      ? \"No students or subjects found for your department\" \n                      : \"No students found for the selected year\"}\n                  </td>\n                </tr>\n              ) : (\n                data.map((s: any) => (\n                  <tr key={s.email}>\n                    <td>{s.name}</td>\n                    <td>{s.email}</td>\n                    <td>{s.year || 'â'}</td>\n                    <td>\n                      <span style={{ \n                        color: s.completedTasks === s.totalTasks ? \"var(--success)\" : \"var(--text-secondary)\"\n                      }}>\n                        {s.completedTasks} / {s.totalTasks} Submitted\n                      </span>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":3968},"src/app/api/faculty/report/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService, hodSuggestionService, subjectService, feedbackService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n  if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  // Accept both STAFF and FACULTY roles (some accounts use FACULTY string)\n  if (session.user?.role !== \"STAFF\" && session.user?.role !== \"HOD\" && session.user?.role !== \"FACULTY\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff) {\n      // Provide additional debug info in development to help tracing missing staff profiles\n      if (process.env.NODE_ENV !== 'production') {\n        const staffRows = await staffService.findMany({ where: { userId: session.user.id } });\n        return NextResponse.json({ error: \"Staff profile not found\", debug: { sessionUserId: session.user.id, staffRows } }, { status: 404 });\n      }\n      return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n    }\n    const assignments = await assignmentService.findMany({ where: { staffId: staff.id } });\n\n    // Batch fetch subjects and feedbacks for these assignments\n    const assignmentIds = assignments.map((a: any) => a.id);\n    const uniqueSubjectIds = Array.from(new Set(assignments.map((a: any) => a.subjectId).filter(Boolean)));\n    const subjects = await Promise.all(uniqueSubjectIds.map((id: any) => subjectService.findUnique({ id })));\n    const subjectMap = new Map(subjects.filter(Boolean).map((s: any) => [s.id, s]));\n    const feedbacks = assignmentIds.length > 0 ? await feedbackService.findMany({ where: { assignmentId: { $in: assignmentIds } } }) : [];\n    const feedbackMap = new Map<string, any[]>();\n    for (const f of feedbacks) {\n      if (!feedbackMap.has(f.assignmentId)) feedbackMap.set(f.assignmentId, []);\n      feedbackMap.get(f.assignmentId)!.push(f);\n    }\n\n    const params = [\n      \"coverage_of_syllabus\",\n      \"covering_relevant_topics_beyond_syllabus\",\n      \"effectiveness_technical_contents\",\n      \"effectiveness_communication_skills\",\n      \"effectiveness_teaching_aids\",\n      \"motivation_self_learning\",\n      \"support_practical_performance\",\n      \"support_project_seminar\",\n      \"feedback_on_student_progress\",\n      \"punctuality_and_discipline\",\n      \"domain_knowledge\",\n      \"interaction_with_students\",\n      \"ability_to_resolve_difficulties\",\n      \"encourage_cocurricular\",\n      \"encourage_extracurricular\",\n      \"guidance_during_internship\",\n    ];\n\n    // Determine facultyName and academicYear (best-effort: infer from subjects' academic years)\n    const facultyName = session.user?.name || session.user?.email || \"Unknown\";\n    const academicYear = assignments.length > 0 ? (assignments[0].subject?.academicYearId ?? null) : null;\n\n    const reports: any[] = [];\n    const suggestions: string[] = [];\n\n    for (const a of assignments) {\n      const fb = feedbackMap.get(a.id) || [];\n\n      if (!fb || fb.length === 0) continue;\n\n      const avg: any = {};\n      params.forEach((p) => (avg[p] = 0));\n      for (const f of fb) {\n        params.forEach((p) => (avg[p] += Number((f as any)[p] ?? 0)));\n        const text = (f as any).any_suggestion;\n        if (text && typeof text === 'string' && text.trim().length > 0) suggestions.push(text.trim());\n      }\n      params.forEach((p) => (avg[p] = parseFloat((avg[p] / fb.length).toFixed(2))));\n\n      // overall performance percentage\n      const total = params.reduce((s, k) => s + (Number(avg[k]) || 0), 0);\n      const overallPercentage = parseFloat(((total / (params.length * 5)) * 100).toFixed(2));\n\n      reports.push({ assignmentId: a.id, subject: subjectMap.get(a.subjectId), semester: a.semester, averages: avg, totalResponses: fb.length, overallPercentage });\n    }\n\n  // include staffId (inferred from session) so client can request the PDF\n  const staffProfile = await staffService.findFirst({ where: { userId: session.user.id } });\n\n  // return single HOD suggestion for the current semester (best-effort)\n  const semester = reports?.[0]?.semester || '';\n  let hodSuggestion = '';\n  if (staffProfile?.id && semester) {\n    const rows = await hodSuggestionService.findMany({ where: { staffId: staffProfile.id, semester } });\n    hodSuggestion = rows && rows.length > 0 ? rows[0].content || '' : '';\n  }\n\n  return NextResponse.json({ facultyName, academicYear, reports, suggestions, staffId: staffProfile?.id, hodSuggestion });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch faculty report\" }, { status: 500 });\n  }\n}\n","size_bytes":4907},"src/app/(dashboard)/profile/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport toast from \"react-hot-toast\";\nimport { User, Mail, Lock } from \"lucide-react\";\nimport { PageHeader } from \"@/components/page-header\";\nimport { TextInput } from \"@/components/ui-controls\";\n\nexport default function ProfilePage(): React.ReactElement {\n  const { data: session } = useSession();\n  const role = (session as any)?.user?.role;\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [currentPasswordError, setCurrentPasswordError] = useState<string | null>(null);\n  const [generalError, setGeneralError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function load() {\n      try {\n        const res = await fetch(\"/api/profile\");\n        if (!res.ok) throw new Error(\"Failed to fetch profile\");\n        const data = await res.json();\n        setName(data.name || \"\");\n        setEmail(data.email || \"\");\n      } catch (err) {\n        console.error(err);\n        toast.error(\"Failed to load profile\");\n      }\n    }\n    load();\n  }, []);\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const payload: any = { name };\n      if (role !== \"STUDENT\" && (currentPassword || newPassword)) {\n        payload.currentPassword = currentPassword;\n        payload.newPassword = newPassword;\n      }\n\n      setCurrentPasswordError(null);\n      setGeneralError(null);\n      const res = await fetch(\"/api/profile\", { \n        method: \"PATCH\", \n        headers: { \"Content-Type\": \"application/json\" }, \n        body: JSON.stringify(payload) \n      });\n      const json = await res.json().catch(() => null);\n      if (!res.ok) {\n        if (json?.error && json.error.toLowerCase().includes(\"incorrect current password\")) {\n          setCurrentPasswordError(\"Incorrect current password\");\n          return;\n        }\n        setGeneralError(json?.error || \"Update failed\");\n        return;\n      }\n      toast.success(\"Profile updated successfully\");\n      setCurrentPassword(\"\");\n      setNewPassword(\"\");\n    } catch (err) {\n      console.error(err);\n      setGeneralError((err as Error).message || \"Update failed\");\n      toast.error(\"Failed to update profile\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"max-w-3xl mx-auto\">\n      <PageHeader \n        title=\"My Profile\" \n        description=\"Manage your account settings and preferences\"\n      />\n\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2.5 rounded-xl\" style={{ background: \"var(--primary-light)\" }}>\n              <User size={20} style={{ color: \"var(--primary)\" }} />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" style={{ color: \"var(--text-primary)\" }}>Account Information</h3>\n              <p className=\"text-sm mt-0.5\" style={{ color: \"var(--text-muted)\" }}>Update your personal details</p>\n            </div>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"card-body\">\n          <div className=\"space-y-5\">\n            {generalError && (\n              <div className=\"px-4 py-3 rounded-lg text-sm\" style={{ background: \"var(--danger-light)\", color: \"var(--danger)\" }}>\n                {generalError}\n              </div>\n            )}\n\n            <div>\n              <label className=\"form-label\">\n                <div className=\"flex items-center gap-2\">\n                  <Mail size={16} />\n                  <span>Email Address</span>\n                </div>\n              </label>\n              <input \n                value={email} \n                disabled \n                className=\"input-field\"\n              />\n              <p className=\"form-helper\">Email cannot be changed</p>\n            </div>\n\n            <div>\n              <label className=\"form-label\">\n                <div className=\"flex items-center gap-2\">\n                  <User size={16} />\n                  <span>Full Name</span>\n                </div>\n              </label>\n              <input \n                value={name} \n                onChange={(e) => setName(e.target.value)} \n                className=\"input-field\"\n                placeholder=\"Enter your full name\"\n              />\n            </div>\n\n            {role !== \"STUDENT\" && (\n              <div className=\"pt-4 border-t\" style={{ borderColor: \"var(--card-border)\" }}>\n                <h4 className=\"text-sm font-semibold mb-4\" style={{ color: \"var(--text-primary)\" }}>\n                  Change Password\n                </h4>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"form-label\">\n                      <div className=\"flex items-center gap-2\">\n                        <Lock size={16} />\n                        <span>Current Password</span>\n                      </div>\n                    </label>\n                    <input\n                      type=\"password\"\n                      value={currentPassword}\n                      onChange={(e) => setCurrentPassword(e.target.value)}\n                      className={`input-field ${currentPasswordError ? \"border-red-500\" : \"\"}`}\n                      placeholder=\"Enter current password\"\n                    />\n                    {currentPasswordError && (\n                      <p className=\"form-error\">{currentPasswordError}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">\n                      <div className=\"flex items-center gap-2\">\n                        <Lock size={16} />\n                        <span>New Password</span>\n                      </div>\n                    </label>\n                    <input \n                      type=\"password\" \n                      value={newPassword} \n                      onChange={(e) => setNewPassword(e.target.value)} \n                      className=\"input-field\"\n                      placeholder=\"Enter new password\"\n                    />\n                    <p className=\"form-helper\">Leave blank to keep current password</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-3 mt-6 pt-6 border-t\" style={{ borderColor: \"var(--card-border)\" }}>\n            <button \n              type=\"button\" \n              className=\"btn-outline\"\n              onClick={() => {\n                setName((session as any)?.user?.name || \"\");\n                setCurrentPassword(\"\");\n                setNewPassword(\"\");\n                setCurrentPasswordError(null);\n                setGeneralError(null);\n              }}\n            >\n              Reset\n            </button>\n            <button \n              type=\"submit\" \n              className=\"btn-primary\" \n              disabled={loading}\n            >\n              {loading ? (\n                <span className=\"flex items-center gap-2\">\n                  <span className=\"loading-spinner\" />\n                  Saving...\n                </span>\n              ) : (\n                \"Save Changes\"\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7547},"src/components/ui/feedback-chart.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip } from \"recharts\";\n\nconst data = [\n  { name: \"CO\", value: 95 },\n  { name: \"ME\", value: 88 },\n  { name: \"EE\", value: 91 },\n  { name: \"CE\", value: 82 },\n];\n\nexport function FeedbackCompletionChart(): React.ReactElement {\n  return (\n    <div className=\"w-full h-72\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={data} margin={{ top: 16, right: 16, left: 8, bottom: 8 }}>\n          <XAxis dataKey=\"name\" stroke=\"#374151\" tick={{ fontSize: 12 }} />\n          <YAxis stroke=\"#374151\" tickFormatter={(v) => `${v}%`} />\n          <Tooltip formatter={(value: number) => `${value}%`} />\n          <Bar dataKey=\"value\" fill=\"#005A9C\" radius={[6, 6, 0, 0]} />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default FeedbackCompletionChart;\n","size_bytes":899},"src/types/next-auth.d.ts":{"content":"declare module \"next-auth\" {\n  interface Session {\n    user: {\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n      id?: string;\n      role?: \"ADMIN\" | \"HOD\" | \"STUDENT\"| \"FACULTY\";\n    };\n  }\n\n  interface User {\n    id?: string;\n    role?: \"ADMIN\" | \"HOD\" | \"STUDENT\" | \"FACULTY\"; \n    hashedPassword?: string | null;\n  }\n}\n","size_bytes":364},"src/components/portal-layout.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport PortalSidebar from \"@/components/portal-sidebar\";\n\ntype Props = {\n  children: React.ReactNode;\n  title?: string;\n};\n\nexport default function PortalLayout({ children, title = \"Page Title\" }: Props) {\n  return (\n    <div className=\"min-h-screen flex bg-[#F0F0F0]\">\n      <PortalSidebar />\n\n      <main className=\"flex-1 ml-[250px] p-4\">\n        <div className=\"max-w-[1100px] mx-auto\">\n          <header className=\"mb-6\">\n            <h1 className=\"text-2xl font-semibold\">{title}</h1>\n          </header>\n\n          <div className=\"bg-white rounded-md shadow-sm border border-gray-100 p-6 min-h-[240px]\">\n            {children}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":740},"src/app/api/hod/submission-status/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService, academicYearService, userService, feedbackService, subjectService } from \"@/lib/mongodb-services\";\nimport { getDatabase } from '@/lib/mongodb';\nimport { ObjectId } from 'mongodb';\n\nexport async function GET(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff || !staff.departmentId) return NextResponse.json({ error: \"HOD or department not found\" }, { status: 404 });\n    const departmentId = staff.departmentId;\n\n    // Get all subjects for this department (not staff) - match departmentId stored as string or ObjectId\n    const db = await getDatabase();\n    let deptObjId: any = null;\n    try { if (departmentId && /^[0-9a-fA-F]{24}$/.test(String(departmentId))) deptObjId = new ObjectId(String(departmentId)); } catch (e) { deptObjId = null; }\n    const subjectQuery: any = deptObjId ? { $or: [{ departmentId }, { departmentId: deptObjId }] } : { departmentId };\n    const deptSubjectDocs = await db.collection('subjects').find(subjectQuery).toArray();\n    const subjectIds = deptSubjectDocs.map((s: any) => s._id.toString());\n    \n    // Get all assignments for these subjects (regardless of which staff member is assigned)\n    const allAssignments = await assignmentService.findMany({});\n\n  // Fast filter by subjectIds (compare as strings to avoid ObjectId vs string mismatch)\n  let deptAssignments = allAssignments.filter((a: any) => a.subjectId && subjectIds.includes(String(a.subjectId)));\n\n    // Fallback: if none found, fetch all staff in department once and filter assignments by staffId\n    if ((!deptAssignments || deptAssignments.length === 0) && allAssignments.length > 0) {\n      const deptStaff = await staffService.findMany({ where: { departmentId } });\n      const deptStaffIds = new Set(deptStaff.map((s: any) => s.id));\n      deptAssignments = allAssignments.filter((a: any) => a.staffId && deptStaffIds.has(a.staffId));\n    }\n\n    // Attach subject data to each assignment in a batched way\n    const uniqueSubjectIds = Array.from(new Set(deptAssignments.map((a: any) => String(a.subjectId)).filter(Boolean)));\n    const subjectsMap = new Map<string, any>();\n    if (uniqueSubjectIds.length > 0) {\n      const subjects = await Promise.all(uniqueSubjectIds.map((id: any) => subjectService.findUnique({ id })));\n      subjects.forEach((s: any) => { if (s) subjectsMap.set(String(s.id), s); });\n    }\n    const assignmentsWithSubjects = deptAssignments.map((a: any) => ({ ...a, subject: subjectsMap.get(String(a.subjectId)) }));\n    \n    if (!assignmentsWithSubjects || assignmentsWithSubjects.length === 0) {\n      return NextResponse.json({ \n        semester: null, \n        academicYears: [], \n        selectedYearId: null, \n        students: [] \n      });\n    }\n\n    // Previously we picked a single semester which could give misleading totals.\n    // Use all assignments for the department (across semesters) and let the UI optionally filter by academic year.\n    const semesterToUse = null;\n    const semesterAssignments = assignmentsWithSubjects;\n    // Determine available academic years present in these assignments (batched)\n    // Normalize academicYearId to string to avoid ObjectId vs string mismatches\n    const yearIds = Array.from(new Set(semesterAssignments.map((a: any) => a.subject?.academicYearId && String(a.subject.academicYearId)).filter(Boolean)));\n  const academicYearsRaw = yearIds.length > 0 ? await Promise.all(yearIds.map((id: any) => academicYearService.findUnique({ id }))) : [];\n  const academicYears = academicYearsRaw.filter(y => y !== null);\n\n  // Read optional yearId query param to filter subject assignments to a specific academic year\n    const url = new URL(request.url);\n    let yearId = url.searchParams.get('yearId');\n\n    // If no yearId provided, default to the first academic year (if available) so the initial response is already filtered\n    if (!yearId && academicYears.length > 0 && academicYears[0] && academicYears[0].id) {\n      yearId = academicYears[0].id;\n    }\n\n  const filteredSemesterAssignments = yearId ? semesterAssignments.filter((a) => String(a.subject?.academicYearId) === String(yearId)) : semesterAssignments;\n    const assignmentIds = filteredSemesterAssignments.map((a) => a.id);\n\n    // Find students in department, filtered by academic year if specified (single query)\n    const studentFilter: any = { role: 'STUDENT', departmentId };\n    if (yearId) studentFilter.academicYearId = yearId;\n    const students = await userService.findMany({ where: studentFilter, select: { id: true, name: true, email: true, academicYearId: true } });\n\n    // Get all feedback relevant to these assignmentIds and these students in a single query\n    const feedbackFilter: any = {};\n    if (assignmentIds.length > 0) feedbackFilter.assignmentId = { $in: assignmentIds };\n    const allFeedback = await feedbackService.findMany({ where: feedbackFilter });\n\n    // Build a map studentId -> completedCount\n    const completedMap = new Map<string, number>();\n    for (const f of allFeedback) {\n      const key = f.studentId;\n      if (!key) continue;\n      if (!completedMap.has(key)) completedMap.set(key, 0);\n      if (assignmentIds.includes(f.assignmentId)) completedMap.set(key, completedMap.get(key)! + 1);\n    }\n\n    // Prefetch academic years for display\n    const yearCache = new Map<string, any>();\n    const results = [] as any[];\n    for (const s of students) {\n      const completed = completedMap.get(s.id) || 0;\n\n      // Get the academic year info for display (cache)\n      let yearInfo = '';\n      if (s.academicYearId) {\n        if (!yearCache.has(s.academicYearId)) {\n          const y = await academicYearService.findUnique({ id: s.academicYearId });\n          yearCache.set(s.academicYearId, y);\n        }\n        const year = yearCache.get(s.academicYearId);\n        yearInfo = year ? (year.abbreviation || year.name) : '';\n      }\n\n      results.push({\n        name: s.name || s.email || 'Unknown',\n        email: s.email || '',\n        year: yearInfo,\n        totalTasks: assignmentIds.length,\n        completedTasks: completed,\n      });\n    }\n\n    // Diagnostic metadata to help debug mismatched totals\n    const assignmentCountsByYear: Record<string, number> = {};\n    for (const a of semesterAssignments) {\n      const y = a.subject?.academicYearId ? String(a.subject.academicYearId) : 'unknown';\n      assignmentCountsByYear[y] = (assignmentCountsByYear[y] || 0) + 1;\n    }\n\n  return NextResponse.json({ semester: semesterToUse, academicYears, selectedYearId: yearId || null, students: results, diagnostics: { totalAssignments: semesterAssignments.length, assignmentCountsByYear } });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Failed to fetch submission status' }, { status: 500 });\n  }\n}\n","size_bytes":7332},"src/app/api/students/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, userService } from \"@/lib/mongodb-services\";\nimport bcrypt from \"bcrypt\";\nimport { sanitizeString, sanitizeEnrollmentNumber } from \"@/lib/security-utils\";\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || (session.user?.role !== \"HOD\" && session.user?.role !== \"ADMIN\")) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n\n    const body = await request.json();\n    const { fullName, enrollment, academicYearId } = body || {};\n    if (!fullName || !enrollment || !academicYearId) return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\n\n    let sanitizedEnrollment: string;\n    let sanitizedFullName: string;\n    \n    try {\n      sanitizedEnrollment = sanitizeEnrollmentNumber(enrollment);\n      sanitizedFullName = sanitizeString(fullName);\n      \n      if (!sanitizedFullName || sanitizedFullName.length < 2) {\n        return NextResponse.json({ error: \"Full name must be at least 2 characters\" }, { status: 400 });\n      }\n    } catch (error: any) {\n      return NextResponse.json({ error: error.message }, { status: 400 });\n    }\n\n    const staff = await staffService.findUnique({ where: { userId: session.user.id } });\n    if (!staff) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const deptId = staff.departmentId;\n\n    const existing = await userService.findUnique({ email: sanitizedEnrollment });\n    if (existing) return NextResponse.json({ error: \"User already exists\" }, { status: 409 });\n\n    const hashed = await bcrypt.hash(sanitizedEnrollment, 10);\n\n    const created = await userService.create({\n      email: sanitizedEnrollment,\n      name: sanitizedFullName,\n      hashedPassword: hashed,\n      role: 'STUDENT',\n      departmentId: deptId,\n      academicYearId,\n    });\n\n    return NextResponse.json({ success: true, id: created.id });\n  } catch (error: any) {\n    console.error(error);\n    return NextResponse.json({ error: error?.message || \"Failed to create student\" }, { status: 500 });\n  }\n}\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const students = await userService.findMany({ \n      where: { departmentId: hodProfile.departmentId, role: \"STUDENT\" }, \n      select: { id: true, name: true, email: true, academicYearId: true } \n    });\n\n    return NextResponse.json(students);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch students\" }, { status: 500 });\n  }\n}\n","size_bytes":3199},"src/app/(dashboard)/hod/reports/page.tsx":{"content":"\"use client\";\n\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { Button } from \"@/components/ui-controls\";\nimport { CustomSelect } from \"@/components/custom-select\";\nimport { Download, TrendingUp, Users, BookOpen, BarChart3 } from \"lucide-react\";\n\nconst parameterGroups = {\n  \"Course Content & Delivery\": [\n    [\"coverage_of_syllabus\", \"Coverage of Syllabus\"],\n    [\"covering_relevant_topics_beyond_syllabus\", \"Beyond Syllabus Topics\"],\n    [\"effectiveness_technical_contents\", \"Technical Content Effectiveness\"],\n    [\"effectiveness_communication_skills\", \"Communication Skills\"],\n    [\"effectiveness_teaching_aids\", \"Teaching Aids Usage\"],\n  ],\n  \"Student Development\": [\n    [\"motivation_self_learning\", \"Self-Learning Motivation\"],\n    [\"support_practical_performance\", \"Practical Skills Development\"],\n    [\"support_project_seminar\", \"Project & Seminar Support\"],\n    [\"feedback_on_student_progress\", \"Progress Feedback\"],\n  ],\n  \"Professional Conduct\": [\n    [\"punctuality_and_discipline\", \"Punctuality & Discipline\"],\n    [\"domain_knowledge\", \"Domain Knowledge\"],\n    [\"interaction_with_students\", \"Student Interaction\"],\n    [\"ability_to_resolve_difficulties\", \"Problem Resolution\"],\n  ],\n  \"Holistic Development\": [\n    [\"encourage_cocurricular\", \"Co-curricular Activities\"],\n    [\"encourage_extracurricular\", \"Extra-curricular Activities\"],\n    [\"guidance_during_internship\", \"Internship Guidance\"],\n  ],\n};\n\nexport default function HodReportsPage() {\n  const [data, setData] = useState<any[]>([]);\n  const [years, setYears] = useState<any[]>([]);\n  const [selectedYear, setSelectedYear] = useState<string>(\"\");\n  const [selectedStaff, setSelectedStaff] = useState<string>(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const fetchReports = useCallback(async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/hod/reports\");\n      if (!res.ok) throw new Error(\"Failed to load reports\");\n      const json = await res.json();\n      setData(json.reports || []);\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Failed to load reports\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchYears = useCallback(async () => {\n    try {\n      const res = await fetch('/api/hod/years');\n      if (!res.ok) throw new Error('Failed to load years');\n      const json = await res.json();\n      setYears(json || []);\n      if (json && json.length > 0) setSelectedYear(json[0].id);\n    } catch (err) {\n      console.error(err);\n      toast.error('Failed to load academic years');\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchReports();\n    fetchYears();\n  }, [fetchReports, fetchYears]);\n\n  const handleDownloadReport = useCallback(() => {\n    if (!selectedYear) {\n      toast.error('Select a year');\n      return;\n    }\n    window.location.href = `/api/hod/comparative-report?year=${selectedYear}`;\n  }, [selectedYear]);\n\n  const staffOptions = useMemo(() => {\n    const seen = new Map();\n    data.forEach((d) => {\n      if (!seen.has(d.staffId)) {\n        seen.set(d.staffId, { id: d.staffId, name: d.staffName });\n      }\n    });\n    return Array.from(seen.values());\n  }, [data]);\n  const selected = useMemo(() => data.find((d) => d.staffId === selectedStaff) || null, [data, selectedStaff]);\n  \n  const overallStats = useMemo(() => {\n    if (!data.length) return null;\n    \n    let totalResponses = 0;\n    let totalStudents = 0;\n    let totalSubjects = 0;\n    let allScores: number[] = [];\n\n    data.forEach(staff => {\n      staff.reports.forEach((r: any) => {\n        totalResponses += r.submissionCount ?? r.totalResponses ?? 0;\n        totalStudents += r.totalStudents ?? 0;\n        totalSubjects++;\n        \n        Object.keys(r.averages || {}).forEach(key => {\n          const score = r.averages[key];\n          if (score > 0) allScores.push(score);\n        });\n      });\n    });\n\n    const avgScore = allScores.length > 0 \n      ? allScores.reduce((a, b) => a + b, 0) / allScores.length \n      : 0;\n    \n    const responseRate = totalStudents > 0 \n      ? (totalResponses / totalStudents) * 100 \n      : 0;\n\n    return {\n      totalFaculty: data.length,\n      totalSubjects,\n      totalResponses,\n      totalStudents,\n      avgScore,\n      responseRate\n    };\n  }, [data]);\n\n  return (\n    <main className=\"max-w-7xl mx-auto\">\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">Feedback Analytics & Reports</h1>\n        <p className=\"page-description\">Comprehensive faculty performance insights</p>\n      </div>\n\n      {/* Stats Overview */}\n      {overallStats && !selectedStaff && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n          <StatCard\n            icon={Users}\n            label=\"Faculty Members\"\n            value={overallStats.totalFaculty}\n            color=\"var(--primary)\"\n          />\n          <StatCard\n            icon={BookOpen}\n            label=\"Total Subjects\"\n            value={overallStats.totalSubjects}\n            color=\"var(--success)\"\n          />\n          <StatCard\n            icon={TrendingUp}\n            label=\"Average Score\"\n            value={`${overallStats.avgScore.toFixed(1)}/5`}\n            color=\"#FFA500\"\n          />\n          <StatCard\n            icon={BarChart3}\n            label=\"Response Rate\"\n            value={`${overallStats.responseRate.toFixed(0)}%`}\n            color=\"#9333EA\"\n          />\n        </div>\n      )}\n\n      {/* Download Report Section */}\n      <div className=\"card mb-6\" style={{ background: \"linear-gradient(135deg, var(--primary-light) 0%, var(--card-bg) 100%)\" }}>\n        <div className=\"card-body\">\n          <div className=\"flex items-start justify-between flex-wrap gap-4\">\n            <div>\n              <h2 className=\"text-lg font-semibold mb-1\" style={{ color: \"var(--text-primary)\" }}>\n                Generate Comparative Report\n              </h2>\n              <p className=\"text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n                Download comprehensive Excel report for selected academic year\n              </p>\n            </div>\n            <div className=\"flex items-end gap-3 flex-wrap\">\n              <CustomSelect\n                label=\"Academic Year\"\n                options={years.map((y) => ({ value: y.id, label: y.name }))}\n                value={selectedYear}\n                onChange={setSelectedYear}\n                placeholder=\"Select year\"\n                className=\"w-64\"\n              />\n              <Button onClick={handleDownloadReport} className=\"gap-2\">\n                <Download size={16} />\n                Download Report\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filter Section */}\n      <div className=\"mb-6\">\n        <CustomSelect\n          label=\"Filter by Faculty Member\"\n          options={[\n            { value: \"\", label: \"All Faculty Members\" },\n            ...staffOptions.map((s) => ({ value: s.id, label: s.name }))\n          ]}\n          value={selectedStaff}\n          onChange={setSelectedStaff}\n          placeholder=\"Select faculty\"\n          className=\"w-full sm:w-96\"\n        />\n      </div>\n\n      {loading ? (\n        <div className=\"flex items-center justify-center min-h-[40vh]\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <div className=\"loading-spinner\" style={{ width: \"2.5rem\", height: \"2.5rem\" }} />\n            <p className=\"text-sm font-medium\" style={{ color: \"var(--text-secondary)\" }}>Loading reports...</p>\n          </div>\n        </div>\n      ) : selected ? (\n        <div>\n          <FacultyReportView staff={selected} />\n          <HODSuggestionCard staffId={selectedStaff} semester={selected?.reports?.[0]?.semester || ''} />\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 gap-6\">\n          {data.map((d) => (\n            <FacultyReportView key={d.staffId} staff={d} compact />\n          ))}\n        </div>\n      )}\n    </main>\n  );\n}\n\nfunction StatCard({ icon: Icon, label, value, color }: { icon: any; label: string; value: string | number; color: string }) {\n  return (\n    <div className=\"card\" style={{ borderLeft: `4px solid ${color}` }}>\n      <div className=\"card-body\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-xs font-medium mb-1\" style={{ color: \"var(--text-muted)\" }}>{label}</p>\n            <p className=\"text-2xl font-bold\" style={{ color: \"var(--text-primary)\" }}>{value}</p>\n          </div>\n          <div \n            className=\"p-3 rounded-lg flex items-center justify-center\" \n            style={{ backgroundColor: `${color}15` }}\n          >\n            <Icon size={24} style={{ color }} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction FacultyReportView({ staff, compact = false }: { staff: any; compact?: boolean }) {\n  const [expandedReports, setExpandedReports] = useState<Set<string>>(\n    new Set(compact ? [] : [staff.reports[0]?.assignmentId].filter(Boolean))\n  );\n\n  const toggleExpanded = (reportId: string) => {\n    setExpandedReports(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(reportId)) {\n        newSet.delete(reportId);\n      } else {\n        newSet.add(reportId);\n      }\n      return newSet;\n    });\n  };\n\n  const getOverallScore = (report: any) => {\n    const scores = Object.values(report.averages || {}) as number[];\n    if (scores.length === 0) return 0;\n    return scores.reduce((a, b) => a + b, 0) / scores.length;\n  };\n\n  const getScoreColor = (score: number) => {\n    const percentage = (score / 5) * 100;\n    if (percentage >= 80) return \"var(--success)\";\n    if (percentage >= 60) return \"var(--primary)\";\n    if (percentage >= 40) return \"#FFA500\";\n    return \"var(--danger)\";\n  };\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <div className=\"p-2 rounded-lg flex items-center justify-center\" style={{ backgroundColor: \"var(--primary-light)\" }}>\n          <Users size={20} style={{ color: \"var(--primary)\" }} />\n        </div>\n        <h2 className=\"text-xl font-bold\" style={{ color: \"var(--text-primary)\" }}>{staff.staffName}</h2>\n        <span className=\"badge badge-secondary\">{staff.reports.length} Subject{staff.reports.length !== 1 ? 's' : ''}</span>\n      </div>\n\n      <div className=\"overflow-x-auto pb-4\" style={{ scrollbarWidth: 'thin' }}>\n        <div className=\"flex gap-4\" style={{ minWidth: 'min-content' }}>\n          {staff.reports.map((report: any) => {\n            const overallScore = getOverallScore(report);\n            const isExpanded = expandedReports.has(report.assignmentId);\n\n            return (\n              <div \n                key={report.assignmentId} \n                className=\"card flex flex-col\"\n                style={{ \n                  minWidth: isExpanded ? '500px' : '320px',\n                  width: isExpanded ? '500px' : '320px',\n                  height: isExpanded ? 'auto' : '280px'\n                }}\n              >\n                <div className=\"card-body flex-1 flex flex-col\">\n                  {/* Subject Header */}\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex-1 min-w-0 mr-3\">\n                      <h3 \n                        className=\"font-bold text-base mb-1 truncate\" \n                        style={{ color: \"var(--text-primary)\" }}\n                        title={report.subject?.name}\n                      >\n                        {report.subject?.name}\n                      </h3>\n                      <p className=\"text-xs truncate\" style={{ color: \"var(--text-secondary)\" }}>\n                        {report.semester} â¢ {report.subject?.subjectCode}\n                      </p>\n                    </div>\n                    <div className=\"text-right shrink-0\">\n                      <div className=\"text-xs font-medium mb-1\" style={{ color: \"var(--text-muted)\" }}>\n                        Responses\n                      </div>\n                      <div className=\"text-sm font-bold\" style={{ color: \"var(--primary)\" }}>\n                        {report.submissionCount ?? report.totalResponses} / {report.totalStudents ?? 'N/A'}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Overall Score Badge */}\n                  <div className=\"mb-4 p-3 rounded-lg\" style={{ background: \"var(--hover-overlay)\" }}>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\" style={{ color: \"var(--text-secondary)\" }}>\n                        Overall Performance\n                      </span>\n                      <div className=\"flex flex-col items-end gap-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"text-2xl font-bold\" style={{ color: getScoreColor(overallScore) }}>\n                            {overallScore.toFixed(1)}\n                          </div>\n                          <span className=\"text-sm\" style={{ color: \"var(--text-muted)\" }}>/5.0</span>\n                        </div>\n                        <div className=\"text-xs font-medium\" style={{ color: getScoreColor(overallScore) }}>\n                          {((overallScore / 5) * 100).toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"mt-2 w-full h-2 rounded-full\" style={{ background: \"var(--card-border)\" }}>\n                      <div \n                        className=\"h-full rounded-full transition-all duration-300\" \n                        style={{ \n                          width: `${(overallScore / 5) * 100}%`, \n                          background: getScoreColor(overallScore) \n                        }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Detailed Metrics - flex-1 to push button down */}\n                  <div className={`flex-1 ${isExpanded ? 'mb-4' : ''}`}>\n                    {isExpanded && (\n                      <div className=\"space-y-4 overflow-y-auto\" style={{ maxHeight: '600px' }}>\n                        {Object.entries(parameterGroups).map(([groupName, params]) => (\n                          <div key={groupName}>\n                            <h4 className=\"text-xs font-semibold mb-2\" style={{ color: \"var(--text-secondary)\" }}>\n                              {groupName}\n                            </h4>\n                            <div className=\"space-y-2\">\n                              {params.map(([key, label]) => {\n                                const score = report.averages?.[key] ?? 0;\n                                const percentage = (score / 5) * 100;\n                                return (\n                                  <div key={key} className=\"flex items-center gap-3\">\n                                    <div className=\"flex-1 min-w-0\">\n                                      <div className=\"text-xs truncate\" style={{ color: \"var(--text-primary)\" }}>\n                                        {label}\n                                      </div>\n                                      <div className=\"w-full h-1.5 rounded-full mt-1\" style={{ background: \"var(--card-border)\" }}>\n                                        <div \n                                          className=\"h-full rounded-full transition-all duration-300\" \n                                          style={{ \n                                            width: `${percentage}%`, \n                                            background: getScoreColor(score) \n                                          }}\n                                        />\n                                      </div>\n                                    </div>\n                                    <div className=\"text-xs font-bold shrink-0\" style={{ color: getScoreColor(score), minWidth: '45px', textAlign: 'right' }}>\n                                      {score.toFixed(1)}\n                                    </div>\n                                  </div>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Toggle Button - always at bottom */}\n                  <button\n                    onClick={() => toggleExpanded(report.assignmentId)}\n                    className=\"w-full text-center text-sm font-medium py-2 rounded-lg transition-colors mt-auto\"\n                    style={{ \n                      color: \"var(--primary)\",\n                      background: \"var(--primary-light)\"\n                    }}\n                  >\n                    {isExpanded ? 'Show Less' : 'View Detailed Metrics'}\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction HODSuggestionCard({ staffId, semester: initialSemester }: { staffId: string; semester: string }) {\n  const [text, setText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [semester, setSemester] = useState(initialSemester || '');\n\n  useEffect(() => {\n    if (!staffId || !semester) return;\n    setLoading(true);\n    (async () => {\n      try {\n        const res = await fetch(`/api/hod/suggestions?staffId=${staffId}&semester=${encodeURIComponent(semester)}`);\n        if (!res.ok) return;\n        const json = await res.json();\n        setText(json.suggestion?.content || '');\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [staffId, semester]);\n\n  async function save() {\n    if (!staffId || !semester) {\n      toast.error('Please enter the semester (e.g., \"Odd 2025-26\") before saving.');\n      return;\n    }\n    setSaving(true);\n    try {\n      const res = await fetch('/api/hod/suggestions', { \n        method: 'POST', \n        headers: { 'Content-Type': 'application/json' }, \n        body: JSON.stringify({ staffId, semester, content: text }) \n      });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json?.error || 'Save failed');\n      toast.success('Saved HOD suggestions');\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || 'Save failed');\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  if (!staffId) return null;\n\n  return (\n    <div className=\"card mt-6\">\n      <div className=\"card-body\">\n        <h3 className=\"section-title mb-4\">HOD Suggestions & Comments</h3>\n        <div className=\"mb-4\">\n          <label className=\"form-label\">Semester</label>\n          <input \n            value={semester} \n            onChange={(e) => setSemester(e.target.value)} \n            placeholder=\"e.g., Odd 2025-26\"\n            className=\"input-field max-w-md\"\n          />\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"form-label\">Your Suggestions</label>\n          <textarea \n            value={text} \n            onChange={(e) => setText(e.target.value)} \n            className=\"input-field w-full h-32 resize-none\" \n            placeholder={loading ? 'Loading...' : 'Enter your suggestions and feedback for this faculty member...'} \n          />\n        </div>\n        <Button onClick={save} disabled={saving}>\n          {saving ? 'Saving...' : 'Save Suggestions'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19707},"src/app/api/hod/feedback-status/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, departmentService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n  const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n  if (!staff) return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n\n  const department = await departmentService.findUnique({ id: staff.departmentId });\n  if (!department) return NextResponse.json({ error: \"Department not found\" }, { status: 404 });\n\n  return NextResponse.json({ isFeedbackActive: department.isFeedbackActive });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch status\" }, { status: 500 });\n  }\n}\n\nexport async function PATCH(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const body = await request.json();\n    const { isActive } = body || {};\n    if (typeof isActive !== \"boolean\") return NextResponse.json({ error: \"isActive must be boolean\" }, { status: 400 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff) return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n\n  const updated = await departmentService.update({ id: staff.departmentId }, { isFeedbackActive: isActive });\n\n  return NextResponse.json({ success: true, isFeedbackActive: updated.isFeedbackActive });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update status\" }, { status: 500 });\n  }\n}\n","size_bytes":2224},"src/app/(dashboard)/hod/students/page.tsx":{"content":"\"use client\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ConfirmationModal from \"@/components/confirmation-modal\";\nimport toast from \"react-hot-toast\";\nimport { Button } from \"@/components/ui-controls\";\nimport { Plus, Upload, Filter } from \"lucide-react\";\nimport { CustomSelect } from \"@/components/custom-select\";\n\ntype Student = { id: string; name?: string | null; email?: string | null; academicYearId?: string | null };\n\nexport default function StudentsPage(): React.ReactElement {\n  const [students, setStudents] = useState<Student[]>([]);\n  const [years, setYears] = useState<Array<{ id: string; name: string; abbreviation?: string }>>([]);\n  const [file, setFile] = useState<File | null>(null);\n  const [academicYearId, setAcademicYearId] = useState<string>(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const [toDeleteId, setToDeleteId] = useState<string | null>(null);\n  const [fromYearId, setFromYearId] = useState<string>(\"\");\n  const [toYearId, setToYearId] = useState<string>(\"\");\n  const [isPromoting, setIsPromoting] = useState(false);\n  const [selectedYearId, setSelectedYearId] = useState<string>(\"\");\n  const [isAddStudentModalOpen, setIsAddStudentModalOpen] = useState(false);\n  const [newStudentName, setNewStudentName] = useState(\"\");\n  const [newStudentEnroll, setNewStudentEnroll] = useState(\"\");\n  const [newStudentYear, setNewStudentYear] = useState(\"\");\n  const [isAddingStudent, setIsAddingStudent] = useState(false);\n\n  useEffect(() => {\n    fetchStudents();\n    fetchYears();\n  }, []);\n\n  async function fetchStudents() {\n    try {\n      const res = await fetch(\"/api/students\");\n      if (!res.ok) throw new Error(\"Failed to fetch students\");\n      const data = await res.json();\n      setStudents(data || []);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async function fetchYears() {\n    try {\n      const res = await fetch(\"/api/years\");\n      if (!res.ok) throw new Error(\"Failed to fetch years\");\n      const data = await res.json();\n      setYears(data || []);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleUpload = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!file) return toast.error(\"Please select a CSV file\");\n    if (!academicYearId) return toast.error(\"Please select an Academic Year\");\n\n    setIsUploading(true);\n    try {\n      const fd = new FormData();\n      fd.append(\"file\", file);\n      fd.append(\"academicYearId\", academicYearId);\n\n      const res = await fetch(\"/api/students/upload\", { method: \"POST\", body: fd });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json?.error || \"Upload failed\");\n\n      toast.success(`Created ${json.createdCount} students; skipped ${json.skipped?.length ?? 0}`);\n      setFile(null);\n      const input = document.getElementById(\"csv-input\") as HTMLInputElement | null;\n      if (input) input.value = \"\";\n      fetchStudents();\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Upload failed\");\n    } finally {\n      setIsUploading(false);\n    }\n  }, [file, academicYearId]);\n\n  const confirmDelete = useCallback((id: string) => {\n    setToDeleteId(id);\n    setConfirmOpen(true);\n  }, []);\n\n  const handleDelete = useCallback(async (id: string | null) => {\n    if (!id) return setConfirmOpen(false);\n    try {\n      const res = await fetch(`/api/students/${id}`, { method: \"DELETE\" });\n      const json = await res.json().catch(() => null);\n      if (!res.ok) throw new Error(json?.error || \"Delete failed\");\n      setStudents((prev) => prev.filter((s) => s.id !== id));\n      toast.success(\"Student deleted\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Delete failed\");\n    } finally {\n      setConfirmOpen(false);\n      setToDeleteId(null);\n    }\n  }, []);\n\n  const handleAddStudent = useCallback(async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    if (!newStudentName || !newStudentEnroll || !newStudentYear) {\n      return toast.error('Please fill all fields');\n    }\n    setIsAddingStudent(true);\n    try {\n      const res = await fetch('/api/students', { \n        method: 'POST', \n        headers: { 'Content-Type': 'application/json' }, \n        body: JSON.stringify({ fullName: newStudentName, enrollment: newStudentEnroll, academicYearId: newStudentYear }) \n      });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json?.error || 'Failed to add student');\n      toast.success('Student added');\n      setIsAddStudentModalOpen(false);\n      setNewStudentName(''); \n      setNewStudentEnroll(''); \n      setNewStudentYear('');\n      fetchStudents();\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || 'Add failed');\n    } finally {\n      setIsAddingStudent(false);\n    }\n  }, [newStudentName, newStudentEnroll, newStudentYear]);\n\n  const handlePromote = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!fromYearId || !toYearId) return toast.error(\"Please select both from and to academic years\");\n    if (fromYearId === toYearId) return toast.error(\"From and To must be different\");\n    setIsPromoting(true);\n    try {\n      const res = await fetch(\"/api/students/promote\", { \n        method: \"POST\", \n        headers: { \"Content-Type\": \"application/json\" }, \n        body: JSON.stringify({ fromYearId, toYearId }) \n      });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json?.error || \"Promote failed\");\n      toast.success(`Successfully promoted ${json.promoted ?? 0} students.`);\n      fetchStudents();\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Promote failed\");\n    } finally {\n      setIsPromoting(false);\n    }\n  }, [fromYearId, toYearId]);\n\n  const openAddStudentModal = useCallback(() => {\n    setIsAddStudentModalOpen(true);\n  }, []);\n\n  const closeAddStudentModal = useCallback(() => {\n    setIsAddStudentModalOpen(false);\n  }, []);\n\n  const filteredStudents = selectedYearId \n    ? students.filter((st) => st.academicYearId === selectedYearId) \n    : students;\n\n  const yearOptions = [\n    { value: \"\", label: \"All years\" },\n    ...years.map((y) => ({ value: y.id, label: y.abbreviation ?? y.name })),\n  ];\n\n  const uploadYearOptions = [\n    { value: \"\", label: \"Select year\" },\n    ...years.map((y) => ({ value: y.id, label: y.abbreviation ?? y.name })),\n  ];\n\n  return (\n    <div>\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">Manage Students</h1>\n        <p className=\"page-description\">Add, upload, and manage student records</p>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2 mb-6\">\n        <div className=\"card content-spacing\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"section-title mb-0\">Upload Students</h2>\n            <Button onClick={openAddStudentModal} variant=\"outline\" className=\"gap-2\">\n              <Plus size={16} />\n              Add Single\n            </Button>\n          </div>\n          <p className=\"section-description mb-5\">\n            Upload a CSV file with columns: enrollmentNumber, fullName, department\n          </p>\n\n          <form onSubmit={handleUpload} className=\"space-y-4\">\n            <CustomSelect\n              label=\"Academic Year\"\n              options={uploadYearOptions}\n              value={academicYearId}\n              onChange={setAcademicYearId}\n              placeholder=\"Select year\"\n            />\n\n            <div>\n              <label className=\"form-label\">CSV File</label>\n              <div className=\"flex items-center gap-3\">\n                <label htmlFor=\"csv-input\" className=\"btn-outline cursor-pointer\">\n                  Choose file\n                </label>\n                <input\n                  id=\"csv-input\"\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={(e) => setFile(e.target.files?.[0] ?? null)}\n                  className=\"hidden\"\n                />\n                <span className=\"text-sm truncate\" style={{ color: \"var(--text-secondary)\" }}>\n                  {file ? file.name : \"No file selected\"}\n                </span>\n              </div>\n            </div>\n\n            <Button type=\"submit\" disabled={isUploading} className=\"gap-2 w-full sm:w-auto\">\n              <Upload size={16} />\n              {isUploading ? \"Uploading...\" : \"Upload Students\"}\n            </Button>\n          </form>\n        </div>\n\n        <div className=\"card content-spacing\">\n          <h2 className=\"section-title\">Promote Students</h2>\n          <p className=\"section-description mb-5\">Move all students from one year to the next</p>\n\n          <form onSubmit={handlePromote} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <CustomSelect\n                label=\"From Year\"\n                options={uploadYearOptions}\n                value={fromYearId}\n                onChange={setFromYearId}\n                placeholder=\"Select year\"\n              />\n              <CustomSelect\n                label=\"To Year\"\n                options={uploadYearOptions}\n                value={toYearId}\n                onChange={setToYearId}\n                placeholder=\"Select year\"\n              />\n            </div>\n\n            <Button type=\"submit\" disabled={isPromoting} className=\"w-full sm:w-auto\">\n              {isPromoting ? \"Promoting...\" : \"Promote All Students\"}\n            </Button>\n          </form>\n        </div>\n      </div>\n\n      <div className=\"card content-spacing\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-5\">\n          <h2 className=\"section-title mb-0\">Student List</h2>\n          <div className=\"flex items-center gap-2\">\n            <Filter size={16} style={{ color: \"var(--text-muted)\" }} />\n            <CustomSelect\n              options={yearOptions}\n              value={selectedYearId}\n              onChange={setSelectedYearId}\n              placeholder=\"Filter by year\"\n              className=\"w-48\"\n            />\n          </div>\n        </div>\n\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Email (Enrollment No.)</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredStudents.length === 0 ? (\n                <tr>\n                  <td colSpan={3} className=\"text-center py-8\" style={{ color: \"var(--text-muted)\" }}>\n                    No students found\n                  </td>\n                </tr>\n              ) : (\n                filteredStudents.map((s) => (\n                  <tr key={s.id}>\n                    <td>{s.name}</td>\n                    <td>{s.email}</td>\n                    <td>\n                      <button onClick={() => confirmDelete(s.id)} className=\"btn-danger-text\">\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <ConfirmationModal\n        open={confirmOpen}\n        title=\"Delete student\"\n        description=\"This will permanently delete the student and related accounts. Are you sure?\"\n        confirmLabel=\"Delete\"\n        cancelLabel=\"Cancel\"\n        onConfirm={() => handleDelete(toDeleteId)}\n        onCancel={() => { setConfirmOpen(false); setToDeleteId(null); }}\n      />\n\n      {isAddStudentModalOpen && (\n        <div className=\"modal-overlay\" onClick={closeAddStudentModal}>\n          <div\n            role=\"dialog\"\n            aria-modal=\"true\"\n            className=\"modal-content w-full max-w-md content-spacing\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <h3 className=\"text-lg font-semibold mb-5\" style={{ color: \"var(--text-primary)\" }}>\n              Add Single Student\n            </h3>\n            <form onSubmit={handleAddStudent} className=\"space-y-4\">\n              <div>\n                <label className=\"form-label\">Full Name</label>\n                <input\n                  className=\"input-field\"\n                  value={newStudentName}\n                  onChange={(e) => setNewStudentName(e.target.value)}\n                  placeholder=\"Enter student name\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"form-label\">Enrollment Number</label>\n                <input\n                  className=\"input-field\"\n                  value={newStudentEnroll}\n                  onChange={(e) => setNewStudentEnroll(e.target.value)}\n                  placeholder=\"Enter enrollment number\"\n                  required\n                />\n              </div>\n              <CustomSelect\n                label=\"Academic Year\"\n                options={uploadYearOptions}\n                value={newStudentYear}\n                onChange={setNewStudentYear}\n                placeholder=\"Select year\"\n              />\n              <div className=\"flex items-center gap-3 justify-end pt-4 border-t\" style={{ borderColor: \"var(--card-border)\" }}>\n                <Button type=\"button\" onClick={closeAddStudentModal} variant=\"outline\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isAddingStudent}>\n                  {isAddingStudent ? \"Adding...\" : \"Add Student\"}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":13762},"src/app/(dashboard)/faculty/report/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { SkeletonPulse, SkeletonReportCard } from \"@/components/skeletons\";\n\nconst PARAM_LABELS: Record<string, string> = {\n  coverage_of_syllabus: \"Coverage of syllabus\",\n  covering_relevant_topics_beyond_syllabus: \"Covering relevant topics beyond the syllabus\",\n  effectiveness_technical_contents: \"Effectiveness (technical contents)\",\n  effectiveness_communication_skills: \"Effectiveness (communication skills)\",\n  effectiveness_teaching_aids: \"Effectiveness (teaching aids)\",\n  motivation_self_learning: \"Motivation / self-learning\",\n  support_practical_performance: \"Support - practical performance\",\n  support_project_seminar: \"Support - project & seminar\",\n  feedback_on_student_progress: \"Feedback on student progress\",\n  punctuality_and_discipline: \"Punctuality & discipline\",\n  domain_knowledge: \"Domain knowledge\",\n  interaction_with_students: \"Interaction with students\",\n  ability_to_resolve_difficulties: \"Ability to resolve difficulties\",\n  encourage_cocurricular: \"Encourage cocurricular\",\n  encourage_extracurricular: \"Encourage extracurricular\",\n  guidance_during_internship: \"Guidance during internship\",\n};\n\nexport default function FacultyReportPage() {\n  const [data, setData] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const reportRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    setLoading(true);\n    try {\n      const res = await fetch('/api/faculty/report');\n      if (!res.ok) throw new Error('Failed to load report');\n      const json = await res.json();\n      setData(json);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // Download is handled server-side via the new pdf endpoint\n\n  if (loading) {\n    return (\n      <main className=\"max-w-7xl mx-auto\">\n        <div className=\"text-left mb-6\">\n          <SkeletonPulse className=\"h-9 w-96 mb-2\" />\n          <SkeletonPulse className=\"h-5 w-64\" />\n        </div>\n        <div className=\"flex justify-end mb-4\">\n          <SkeletonPulse className=\"h-10 w-40 rounded\" />\n        </div>\n        <SkeletonReportCard />\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto\">\n      <div className=\"text-left mb-6\">\n        <h1 className=\"text-3xl font-bold\">Student Feedback Analysis</h1>\n        <div className=\"text-sm text-gray-500 mt-2\">Subjects: {data?.reports?.map((r: any) => r.subject?.name).filter(Boolean).join(', ')}</div>\n      </div>\n\n      <div className=\"flex justify-end mb-4\">\n        {data?.staffId ? (\n          <a href={`/api/faculty/${data.staffId}/report.pdf`} className=\"px-4 py-2 bg-blue-600 text-white rounded\" download>\n            Download as PDF\n          </a>\n        ) : (\n          <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" disabled>Download unavailable</button>\n        )}\n      </div>\n\n      <div ref={reportRef} className=\"bg-white p-4 sm:p-6 rounded shadow\">\n        {/* HOD suggestion (if present) */}\n        {data?.hodSuggestion ? (\n          <div className=\"mb-6 border rounded p-3 bg-gray-50\">\n            <h3 className=\"font-medium mb-1\">HOD Suggestions</h3>\n            <div className=\"text-sm text-gray-800 whitespace-pre-wrap\">{data.hodSuggestion}</div>\n          </div>\n        ) : null}\n        {/* Responsive rendering: if single subject, show stacked card layout; if multiple, show scrollable table */}\n        {(!data?.reports || data.reports.length === 0) && (\n          <div className=\"text-sm text-gray-500\">No report data available.</div>\n        )}\n\n        {data?.reports && data.reports.length === 1 ? (\n          data.reports.map((r: any) => (\n            <section key={r.assignmentId} className=\"mb-6 border rounded bg-white\">\n              <div className=\"p-4 sm:p-6 border-b bg-gray-50\">\n                <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-baseline\">\n                  <h2 className=\"font-medium\">{r.subject?.name} â {r.semester}</h2>\n                  <div className=\"text-sm text-gray-500 mt-2 sm:mt-0\">Total responses: {r.totalResponses ?? 0}</div>\n                </div>\n              </div>\n              <div className=\"p-4 sm:p-6\">\n                <dl className=\"space-y-3\">\n                  {Object.keys(PARAM_LABELS).map((key) => (\n                    <div key={key} className=\"flex justify-between items-center border-b py-2\">\n                      <dt className=\"text-sm text-gray-700 w-3/5\">{PARAM_LABELS[key]}</dt>\n                      <dd className=\"text-sm font-medium text-gray-900\">{r.averages?.[key] ?? '0'} / 5</dd>\n                    </div>\n                  ))}\n\n                  <div className=\"flex justify-between items-center pt-2\">\n                    <dt className=\"text-sm font-medium\">Overall Performance</dt>\n                    <dd className=\"text-sm font-medium\">{Number(r.overallPercentage ?? 0).toFixed(2)}%</dd>\n                  </div>\n                </dl>\n              </div>\n            </section>\n          ))\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse text-sm\">\n              <thead>\n                <tr>\n                  <th className=\"border px-3 py-2 text-left\">Parameter</th>\n                  {data?.reports?.map((r: any) => (\n                    <th key={r.assignmentId} className=\"border px-3 py-2 text-left whitespace-normal break-words\">{r.subject?.name}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(PARAM_LABELS).map((key) => (\n                  <tr key={key}>\n                    <td className=\"border px-3 py-2 align-top\">{PARAM_LABELS[key]}</td>\n                    {data?.reports?.map((r: any) => (\n                      <td key={r.assignmentId + key} className=\"border px-3 py-2 align-top\">{r.averages?.[key] ?? '0'}</td>\n                    ))}\n                  </tr>\n                ))}\n\n                <tr>\n                  <td className=\"border px-3 py-2 font-medium\">Overall Performance</td>\n                  {data?.reports?.map((r: any) => (\n                    <td key={r.assignmentId + '-overall'} className=\"border px-3 py-2 font-medium\">{Number(r.overallPercentage ?? 0).toFixed(2)}%</td>\n                  ))}\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        <div className=\"mt-6\">\n          <h3 className=\"text-lg font-medium mb-2\">Suggestions for Improvement</h3>\n          {data?.suggestions?.length ? (\n            <ul className=\"list-disc pl-5 space-y-2\">\n              {data.suggestions.map((s: string, idx: number) => <li key={idx}>{s}</li>)}\n            </ul>\n          ) : (\n            <div className=\"text-sm text-gray-500\">No suggestions submitted.</div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n}\n","size_bytes":6952},"src/app/api/hods/[id]/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { userService, staffService, departmentService, assignmentService } from \"@/lib/mongodb-services\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\n\nexport async function PATCH(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n    const { name, email, departmentId } = body || {};\n\n    if (!name || !email || !departmentId) {\n      return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\n    }\n\n    // Update user\n    const updatedUser = await userService.update({ id }, { name, email });\n\n    // Update staff profile (find by userId)\n    await staffService.updateMany({ userId: id }, { departmentId });\n\n    const updated = await userService.findUnique({ id });\n    const staffProfile = await staffService.findFirst({ where: { userId: id } });\n    const department = staffProfile?.departmentId ? await departmentService.findUnique({ id: staffProfile.departmentId }) : null;\n    \n    return NextResponse.json({ \n      ...updated, \n      staffProfile: staffProfile ? {\n        ...staffProfile,\n        department: department ? { id: department.id, name: department.name, abbreviation: department.abbreviation } : null\n      } : null\n    });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update HOD\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"ADMIN\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const { id: userId } = await params;\n\n    // Execute deletion logic sequentially\n    const staff = await staffService.findFirst({ where: { userId } });\n    const staffId = staff?.id;\n\n    if (staffId) {\n      // find department where this staff is hod (check all departments)\n      const allDepts = await departmentService.findMany({});\n      const dept = allDepts.find(d => d.hodId === staffId);\n      if (dept) {\n        // unassign hod\n        await departmentService.update({ id: dept.id }, { hodId: null });\n      }\n      // delete any faculty assignments referencing this staff\n      await assignmentService.deleteMany({ staffId });\n      // delete the staff profile(s) referencing this user\n      await staffService.deleteMany({ userId });\n    }\n\n    // finally delete the user\n    await userService.delete({ id: userId });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to delete HOD\" }, { status: 500 });\n  }\n}\n","size_bytes":2903},"src/app/(dashboard)/admin/hods/page.tsx":{"content":"\"use client\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Edit2, Trash2, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui-controls\";\nimport { CustomSelect } from \"@/components/custom-select\";\nimport toast from \"react-hot-toast\";\n\ntype Department = { id: string; name: string; abbreviation: string };\ntype Hod = {\n  id: string;\n  name?: string | null;\n  email?: string | null;\n  staffProfile?: { employeeId: string; designation: string; department?: Department | null } | null;\n};\n\nexport default function ManageHodsPage(): React.ReactElement {\n  const [hods, setHods] = useState<Hod[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingHOD, setEditingHOD] = useState<Hod | null>(null);\n  const [deleteConfirmModal, setDeleteConfirmModal] = useState<{ open: boolean; hodId: string; hodName: string }>({ \n    open: false, \n    hodId: '', \n    hodName: '' \n  });\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [departmentId, setDepartmentId] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    fetchHods();\n    fetchDepartments();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  async function fetchHods() {\n    try {\n      const res = await fetch(\"/api/hods\");\n      if (!res.ok) throw new Error(\"Failed to fetch hods\");\n      const data = await res.json();\n      setHods(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  async function fetchDepartments() {\n    try {\n      const res = await fetch(\"/api/departments\");\n      if (!res.ok) throw new Error(\"Failed to fetch departments\");\n      const data = await res.json();\n      setDepartments(data);\n      if (data.length > 0) setDepartmentId(data[0].id);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const openDeleteConfirm = useCallback((hodId: string, hodName: string) => {\n    setDeleteConfirmModal({ open: true, hodId, hodName });\n  }, []);\n\n  const closeDeleteConfirm = useCallback(() => {\n    setDeleteConfirmModal({ open: false, hodId: '', hodName: '' });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    const { hodId } = deleteConfirmModal;\n    if (!hodId) return;\n    \n    setIsDeleting(true);\n    try {\n      const res = await fetch(`/api/hods/${hodId}`, { method: \"DELETE\" });\n      if (!res.ok) throw new Error(\"Delete failed\");\n      setHods((prev) => prev.filter((h) => h.id !== hodId));\n      toast.success(\"HOD account deleted successfully\");\n      closeDeleteConfirm();\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Delete failed\");\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [deleteConfirmModal, closeDeleteConfirm]);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name || !email || !departmentId) return;\n    setIsSubmitting(true);\n    try {\n      if (editingHOD) {\n        const res = await fetch(`/api/hods/${editingHOD.id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, email, departmentId }),\n        });\n        if (!res.ok) {\n          const err = await res.json();\n          throw new Error(err?.error || \"Failed to update HOD\");\n        }\n        const updated = await res.json();\n        setHods((prev) => prev.map((h) => (h.id === updated.id ? updated : h)));\n        toast.success(\"HOD account updated successfully\");\n        setEditingHOD(null);\n      } else {\n        if (!password) return;\n        const res = await fetch(\"/api/hods\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, email, password, departmentId }),\n        });\n        if (!res.ok) {\n          const err = await res.json();\n          throw new Error(err?.error || \"Failed to create HOD\");\n        }\n        const created = await res.json();\n        setHods((prev) => [created, ...prev]);\n        toast.success(\"HOD account created successfully\");\n      }\n\n      setIsModalOpen(false);\n      setName(\"\");\n      setEmail(\"\");\n      setPassword(\"\");\n      if (departments.length > 0) setDepartmentId(departments[0].id);\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [editingHOD, name, email, password, departmentId, departments]);\n\n  const openCreateModal = useCallback(() => {\n    setEditingHOD(null);\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    setIsModalOpen(true);\n  }, []);\n\n  const openEditModal = useCallback((h: Hod) => {\n    setEditingHOD(h);\n    setName(h.name ?? \"\");\n    setEmail(h.email ?? \"\");\n    setDepartmentId(h.staffProfile?.department?.id ?? (departments.length > 0 ? departments[0].id : \"\"));\n    setIsModalOpen(true);\n  }, [departments]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen\">\n      <main className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-start flex-col gap-3 justify-between mb-6\">\n          <h1 className=\"text-2xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n            Manage HOD Accounts\n          </h1>\n          <Button onClick={openCreateModal} className=\"gap-2\">\n            <Plus size={18} />\n            Create HOD Account\n          </Button>\n        </div>\n\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Assigned Department</th>\n                <th>Email</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {hods.map((h) => (\n                <tr key={h.id}>\n                  <td>{h.name}</td>\n                  <td>{h.staffProfile?.department?.name ?? \"Unassigned\"}</td>\n                  <td>{h.email}</td>\n                  <td>\n                    <div className=\"flex items-center gap-2\">\n                      <button\n                        className=\"p-2 rounded-lg transition-colors hover:bg-[var(--hover-overlay)]\"\n                        style={{ color: \"var(--text-secondary)\" }}\n                        aria-label=\"Edit\"\n                        onClick={() => openEditModal(h)}\n                      >\n                        <Edit2 size={16} />\n                      </button>\n                      <button \n                        onClick={() => openDeleteConfirm(h.id, h.name || h.email || 'this HOD')} \n                        type=\"button\" \n                        className=\"p-2 rounded-lg transition-colors\"\n                        style={{ color: \"var(--danger)\" }}\n                        onMouseEnter={(e) => e.currentTarget.style.background = \"var(--danger-light)\"}\n                        onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                        aria-label=\"Delete\"\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </main>\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\" onClick={closeModal}>\n          <div \n            role=\"dialog\" \n            aria-modal=\"true\" \n            className=\"modal-content w-full max-w-xl mx-4 p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n                  {editingHOD ? \"Edit HOD Account\" : \"Create HOD Account\"}\n                </h3>\n                <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n                  {editingHOD ? \"Update HOD details and department.\" : \"Fill the details to create a new HOD and assign them to a department.\"}\n                </p>\n              </div>\n              <button \n                onClick={closeModal} \n                className=\"p-2 rounded-lg transition-colors ml-4 hover:bg-[var(--hover-overlay)]\"\n                style={{ color: \"var(--text-secondary)\" }}\n              >\n                â\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n              <div>\n                <label className=\"form-label\">Name</label>\n                <input \n                  value={name} \n                  onChange={(e) => setName(e.target.value)} \n                  className=\"input-field\" \n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">Email</label>\n                <input \n                  value={email} \n                  onChange={(e) => setEmail(e.target.value)} \n                  type=\"email\" \n                  className=\"input-field\"\n                  required\n                />\n              </div>\n\n              {!editingHOD && (\n                <div>\n                  <label className=\"form-label\">Password</label>\n                  <input \n                    value={password} \n                    onChange={(e) => setPassword(e.target.value)} \n                    type=\"password\" \n                    className=\"input-field\"\n                    required\n                  />\n                </div>\n              )}\n\n              <CustomSelect\n                label=\"Department\"\n                options={departments.map((d) => ({\n                  value: d.id,\n                  label: `${d.name} (${d.abbreviation})`\n                }))}\n                value={departmentId}\n                onChange={setDepartmentId}\n              />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <button type=\"button\" onClick={closeModal} className=\"btn-outline\">\n                  Cancel\n                </button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? (editingHOD ? \"Saving...\" : \"Creating...\") : (editingHOD ? \"Save\" : \"Create HOD\")}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {deleteConfirmModal.open && (\n        <div className=\"modal-overlay\" onClick={closeDeleteConfirm}>\n          <div \n            role=\"dialog\" \n            aria-modal=\"true\" \n            className=\"modal-content w-full max-w-md mx-4 p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <h3 className=\"text-lg font-semibold mb-2\" style={{ color: \"var(--text-primary)\" }}>\n              Delete HOD Account?\n            </h3>\n            <p className=\"text-sm mb-6\" style={{ color: \"var(--text-secondary)\" }}>\n              Are you sure you want to delete <strong>{deleteConfirmModal.hodName}</strong>? This action cannot be undone.\n            </p>\n            <div className=\"flex justify-end gap-3\">\n              <button type=\"button\" onClick={closeDeleteConfirm} className=\"btn-outline\" disabled={isDeleting}>\n                Cancel\n              </button>\n              <Button \n                onClick={handleDelete} \n                disabled={isDeleting}\n                style={{ backgroundColor: \"var(--danger)\", borderColor: \"var(--danger)\" }}\n              >\n                {isDeleting ? \"Deleting...\" : \"Delete\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11802},"src/components/confirmation-modal.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { AlertTriangle } from \"lucide-react\";\n\ntype Props = {\n  open: boolean;\n  title?: string;\n  description?: string;\n  confirmLabel?: string;\n  cancelLabel?: string;\n  loading?: boolean;\n  variant?: \"danger\" | \"primary\";\n  onConfirm: () => void;\n  onCancel: () => void;\n};\n\nexport default function ConfirmationModal({ \n  open, \n  title = \"Are you sure?\", \n  description, \n  confirmLabel = \"Confirm\", \n  cancelLabel = \"Cancel\", \n  loading = false, \n  variant = \"danger\",\n  onConfirm, \n  onCancel \n}: Props) {\n  if (!open) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onCancel}>\n      <div \n        className=\"modal-content w-full max-w-md mx-4 p-6\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"flex items-start gap-4 mb-4\">\n          <div \n            className=\"p-3 rounded-full shrink-0\"\n            style={{\n              background: variant === \"danger\" ? \"var(--danger-light)\" : \"var(--primary-light)\",\n            }}\n          >\n            <AlertTriangle \n              size={24} \n              style={{\n                color: variant === \"danger\" ? \"var(--danger)\" : \"var(--primary)\",\n              }}\n            />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"text-lg font-semibold mb-1\" style={{ color: \"var(--text-primary)\" }}>\n              {title}\n            </h3>\n            {description && (\n              <p className=\"text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n                {description}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-3 mt-6\">\n          <button \n            onClick={onCancel} \n            className=\"btn-outline\"\n            disabled={loading}\n          >\n            {cancelLabel}\n          </button>\n          <button \n            onClick={onConfirm} \n            disabled={loading} \n            className={variant === \"danger\" ? \"btn-danger\" : \"btn-primary\"}\n          >\n            {loading ? (\n              <span className=\"flex items-center gap-2\">\n                <span className=\"loading-spinner\"></span>\n                <span>Processing...</span>\n              </span>\n            ) : (\n              confirmLabel\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2356},"src/app/api/student/tasks/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport type { Session } from \"next-auth\";\nimport { userService, departmentService, assignmentService, feedbackService, staffService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as Session | null;\n    if (!session || session.user?.role !== \"STUDENT\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const userId = session.user.id as string;\n\n    // Load student with academicYearId\n    const student = await userService.findUnique({ id: userId });\n    if (!student) return NextResponse.json({ error: \"Student not found\" }, { status: 404 });\n\n    const academicYearId = (student as unknown as { academicYearId?: string })?.academicYearId;\n    if (!academicYearId) {\n      return NextResponse.json({ error: \"Student academic year not set\" }, { status: 400 });\n    }\n\n    // CRITICAL CHECK: ensure department feedback window is active\n    const department = await departmentService.findUnique({ id: student.departmentId as any });\n    if (!department) return NextResponse.json({ error: \"Student department not found\" }, { status: 404 });\n    // department.isFeedbackActive may not yet be in generated types; cast to any\n    if (!((department as any).isFeedbackActive)) {\n      return NextResponse.json([]);\n    }\n\n    // Find all assignments where subject.academicYearId == student's academicYearId\n    const allAssignments = await assignmentService.findMany({ include: { subject: true } });\n    const assignments = allAssignments.filter(a => a.subject?.academicYearId === academicYearId);\n    \n    // Get staff details for each assignment\n    const allFeedback = await feedbackService.findMany({});\n    \n    const tasks = await Promise.all(\n      assignments.map(async (a: any) => {\n        // Get staff for this assignment using staffService\n        let facultyName = \"Faculty\";\n        try {\n          const staff = await staffService.findUnique({ where: { id: a.staffId }, include: { user: true } });\n          facultyName = staff?.user?.name ?? facultyName;\n        } catch (err) {\n          // fallback to default if staff fetch fails\n          console.error('Failed to fetch staff for assignment', a.id, err);\n        }\n\n        const existing = allFeedback.find(f => f.assignmentId === a.id && f.studentId === userId);\n        return {\n          assignmentId: a.id,\n          facultyName,\n          subjectName: a.subject?.name,\n          status: existing ? \"Completed\" : \"Pending\",\n        };\n      })\n    );\n\n    return NextResponse.json(tasks);\n  } catch (error) {\n    console.error(\"API /student/tasks - unexpected error:\", error);\n    return NextResponse.json({ error: \"Failed to fetch tasks\" }, { status: 500 });\n  }\n}\n","size_bytes":2979},"src/app/api/hod/release/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService, feedbackService } from \"@/lib/mongodb-services\";\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    // find assignments for department\n    const staffList = await staffService.findMany({ where: { departmentId: staff.departmentId } });\n    const staffIds = staffList.map((s) => s.id);\n\n    const allAssignments = await assignmentService.findMany({});\n    const assignments = allAssignments.filter(a => staffIds.includes(a.staffId));\n    const assignmentIds = assignments.map((a) => a.id);\n\n    if (assignmentIds.length === 0) return NextResponse.json({ success: true, released: 0 });\n\n    // Update all feedback for these assignments\n    const allFeedback = await feedbackService.findMany({});\n    const feedbackToUpdate = allFeedback.filter(f => assignmentIds.includes(f.assignmentId));\n    \n    let released = 0;\n    for (const fb of feedbackToUpdate) {\n      await feedbackService.updateMany({ assignmentId: fb.assignmentId, studentId: fb.studentId }, { isReleased: true });\n      released++;\n    }\n\n    return NextResponse.json({ success: true, released });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to release feedback\" }, { status: 500 });\n  }\n}\n","size_bytes":1864},"src/app/api/hod/reports/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, userService, assignmentService, subjectService, feedbackService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const departmentId = staff.departmentId;\n\n    // Get staff list anchored to department, but also include any staff who are assigned to subjects of this department\n    // 1) find subjects for this department\n    const deptSubjects = await subjectService.findMany({ where: { departmentId } });\n    const deptSubjectIds = new Set((deptSubjects || []).map((s: any) => s.id));\n\n    // 2) find assignments that point to these subjects and collect staffIds\n    const allAssignments = await assignmentService.findMany({});\n    const assignedStaffIds = new Set<string>();\n    for (const a of (allAssignments || [])) {\n      if (a.subjectId && deptSubjectIds.has(String(a.subjectId))) {\n        if (a.staffId) assignedStaffIds.add(a.staffId);\n      }\n    }\n\n    // 3) fetch department staff and also any assigned staff (avoid duplicates)\n    const deptStaff = await staffService.findMany({ where: { departmentId } });\n    const deptStaffIds = new Set((deptStaff || []).map((d: any) => d.id));\n\n    const extraStaffIds = Array.from(assignedStaffIds).filter((id) => !deptStaffIds.has(id));\n  const extraStaff = extraStaffIds.length > 0 ? await Promise.all(extraStaffIds.map((id) => staffService.findUnique({ where: { id }, include: { user: true, department: true } }))) : [];\n\n  // Merge and dedupe by staff id\n  const staffMap = new Map<string, any>();\n  for (const s of deptStaff) staffMap.set(s.id, s);\n  for (const s of extraStaff) if (s) staffMap.set(s.id, s);\n  const staffList = Array.from(staffMap.values());\n\n    // We'll cache student counts per academicYearId so subject cards show correct totals (avoid counting entire department for every subject)\n    const studentCountByYear: Record<string, number> = {};\n    async function getStudentCountForYear(yearId?: string | null) {\n      const key = yearId ? String(yearId) : 'all';\n      if (studentCountByYear[key] !== undefined) return studentCountByYear[key];\n      const filter: any = { role: 'STUDENT', departmentId };\n      if (yearId) filter.academicYearId = yearId;\n      const cnt = await userService.count(filter);\n      studentCountByYear[key] = cnt;\n      return cnt;\n    }\n\n    const reports = await Promise.all(staffList.map(async (s: any) => {\n      // Fetch user and assignments for this staff member\n      const user = await userService.findUnique({ id: s.userId });\n      const assignments = await assignmentService.findMany({ where: { staffId: s.id } });\n      \n      const staffReports = await Promise.all(assignments.map(async (a: any) => {\n        // Fetch subject and feedbacks for this assignment\n        const subject = await subjectService.findUnique({ id: a.subjectId });\n        const feedbacks = await feedbackService.findMany({ where: { assignmentId: a.id } });\n        \n        // If no feedbacks yet, still include the assignment with zeroed metrics\n        const hasFeedback = feedbacks && feedbacks.length > 0;\n\n        // Compute averages for 16 params\n        const paramKeys = [\n          'coverage_of_syllabus',\n          'covering_relevant_topics_beyond_syllabus',\n          'effectiveness_technical_contents',\n          'effectiveness_communication_skills',\n          'effectiveness_teaching_aids',\n          'motivation_self_learning',\n          'support_practical_performance',\n          'support_project_seminar',\n          'feedback_on_student_progress',\n          'punctuality_and_discipline',\n          'domain_knowledge',\n          'interaction_with_students',\n          'ability_to_resolve_difficulties',\n          'encourage_cocurricular',\n          'encourage_extracurricular',\n          'guidance_during_internship',\n        ];\n\n        const avg: any = {};\n        paramKeys.forEach((k) => {\n          avg[k] = 0;\n        });\n\n        if (hasFeedback) {\n          feedbacks.forEach((f: any) => {\n            paramKeys.forEach((k) => {\n              avg[k] += f[k] ?? 0;\n            });\n          });\n\n          paramKeys.forEach((k) => {\n            avg[k] = parseFloat((avg[k] / feedbacks.length).toFixed(2));\n          });\n        }\n\n        const totalStudentsForSubject = await getStudentCountForYear(subject?.academicYearId);\n\n        return {\n          assignmentId: a.id,\n          semester: a.semester,\n          subject: subject,\n          averages: avg,\n          submissionCount: feedbacks.length || 0,\n          totalResponses: feedbacks.length || 0,\n          totalStudents: totalStudentsForSubject,\n          isReleased: hasFeedback ? feedbacks.every((ff: any) => ff.isReleased) : false,\n        };\n      }));\n      \n      const validReports = staffReports.filter(Boolean); // Remove null entries\n\n      return {\n        staffId: s.id,\n        staffName: user?.name ?? user?.email ?? \"Unknown\",\n        reports: validReports,\n      };\n    }));\n\n    return NextResponse.json({ reports });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch reports\" }, { status: 500 });\n  }\n}\n","size_bytes":5711},"src/app/(dashboard)/hod/dashboard/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport toast from \"react-hot-toast\";\nimport { Users, BookOpen, GraduationCap } from \"lucide-react\";\nimport { SkeletonCard, SkeletonPulse, SkeletonMetricRow } from \"@/components/skeletons\";\n\nfunction HODDashboardSkeleton() {\n  return (\n    <>\n      <div className=\"page-header\">\n        <SkeletonPulse className=\"h-8 w-64 mb-2\" />\n        <SkeletonPulse className=\"h-4 w-96\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5 md:gap-6 mb-6\">\n        <SkeletonCard className=\"hover-lift\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <SkeletonPulse className=\"h-6 w-40\" />\n            <SkeletonPulse className=\"h-6 w-16 rounded-full\" />\n          </div>\n          <div className=\"space-y-4\">\n            <SkeletonPulse className=\"h-4 w-full\" />\n            <SkeletonPulse className=\"h-4 w-3/4\" />\n            <SkeletonPulse className=\"h-10 w-full rounded-lg\" />\n          </div>\n        </SkeletonCard>\n\n        <SkeletonCard className=\"hover-lift\">\n          <SkeletonPulse className=\"h-6 w-40 mb-5\" />\n          <div className=\"space-y-3\">\n            <SkeletonMetricRow />\n            <SkeletonMetricRow />\n            <SkeletonMetricRow />\n          </div>\n        </SkeletonCard>\n      </div>\n\n      <SkeletonCard className=\"mb-6 hover-lift\">\n        <div className=\"flex items-center justify-between mb-5\">\n          <SkeletonPulse className=\"h-6 w-48\" />\n          <SkeletonPulse className=\"h-6 w-24 rounded-full\" />\n        </div>\n        <div className=\"space-y-4\">\n          <SkeletonPulse className=\"h-4 w-full\" />\n          <SkeletonPulse className=\"h-4 w-3/4\" />\n          <SkeletonPulse className=\"h-10 w-48 rounded-lg\" />\n        </div>\n      </SkeletonCard>\n\n      <SkeletonCard className=\"hover-lift\">\n        <SkeletonPulse className=\"h-6 w-40 mb-2\" />\n        <SkeletonPulse className=\"h-4 w-64 mb-6\" />\n        <SkeletonPulse className=\"h-64 w-full rounded-xl\" />\n      </SkeletonCard>\n    </>\n  );\n}\n\nexport default function HODDashboardPage(): React.ReactElement {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n\n  const [metrics, setMetrics] = useState<any>(null);\n  const [isFeedbackActive, setIsFeedbackActive] = useState<boolean | null>(null);\n  const [loadingFeedbackToggle, setLoadingFeedbackToggle] = useState(false);\n  const [reportsReleased, setReportsReleased] = useState<boolean | null>(null);\n  const [loadingReportsToggle, setLoadingReportsToggle] = useState(false);\n\n  useEffect(() => {\n    if (status === \"loading\") return;\n    if (!session) return;\n    if ((session as any).user?.role !== \"HOD\") {\n      router.replace(\"/\");\n      return;\n    }\n\n    async function loadAll() {\n      try {\n        (async () => {\n          try {\n            const r = await fetch('/api/hod/metrics');\n            if (r.ok) {\n              const j = await r.json();\n              setMetrics(j);\n            }\n          } catch (e) {\n            // ignore metrics failure\n          }\n        })();\n\n        const resStatus = await fetch('/api/hod/feedback-status');\n        if (resStatus.ok) {\n          const json = await resStatus.json();\n          setIsFeedbackActive(Boolean(json.isFeedbackActive));\n        }\n\n        const resRelease = await fetch('/api/hod/release-status');\n        if (resRelease.ok) {\n          const json = await resRelease.json();\n          setReportsReleased(Boolean(json.isReleased));\n        }\n      } catch (err: any) {\n        console.error(err);\n        toast.error('Failed to load dashboard data');\n      }\n    }\n\n    loadAll();\n  }, [session, status, router]);\n\n  async function handleToggleFeedback() {\n    if (isFeedbackActive === null) return;\n    setLoadingFeedbackToggle(true);\n    try {\n      const res = await fetch('/api/hod/feedback-status', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isActive: !isFeedbackActive }),\n      });\n      if (!res.ok) throw new Error('Failed to update feedback status');\n      const json = await res.json();\n      setIsFeedbackActive(Boolean(json.isFeedbackActive));\n      toast.success(`Feedback window ${json.isFeedbackActive ? 'opened' : 'closed'}`);\n    } catch (err: any) {\n      console.error(err);\n      toast.error(err?.message || 'Failed to update feedback status');\n    } finally {\n      setLoadingFeedbackToggle(false);\n    }\n  }\n\n  async function handleToggleReleaseStatus() {\n    if (reportsReleased === null) return;\n    setLoadingReportsToggle(true);\n    try {\n      const res = await fetch('/api/hod/release-status', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ shouldBeReleased: !reportsReleased }),\n      });\n      if (!res.ok) {\n        const j = await res.json().catch(() => ({}));\n        throw new Error(j?.error || 'Failed to update release status');\n      }\n      const json = await res.json();\n      setReportsReleased(Boolean(json.isReleased));\n      toast.success(json.isReleased ? 'Reports released to faculty' : 'Reports retracted from faculty');\n    } catch (err: any) {\n      console.error(err);\n      toast.error(err?.message || 'Failed to update release status');\n    } finally {\n      setLoadingReportsToggle(false);\n    }\n  }\n\n  if (status === 'loading' || isFeedbackActive === null || reportsReleased === null) {\n    return <HODDashboardSkeleton />;\n  }\n  \n  if (!session) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <div className=\"card p-8 text-center\">\n          <p style={{ color: \"var(--danger)\" }} className=\"font-semibold text-lg\">Unauthorized Access</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">Department Overview</h1>\n        <p className=\"page-description\">Manage feedback collection and view department analytics</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-5 md:gap-6 mb-6\">\n        {/* Feedback Control Card */}\n        <div className=\"card card-body hover-lift\">\n          <div className=\"flex items-center justify-between mb-5\">\n            <h3 className=\"section-title mb-0\">Feedback Control</h3>\n            <span className={`badge ${isFeedbackActive ? \"badge-success\" : \"badge-danger\"}`}>\n              {isFeedbackActive ? 'OPEN' : 'CLOSED'}\n            </span>\n          </div>\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm font-semibold mb-2\" style={{ color: \"var(--text-primary)\" }}>\n                Feedback Period: {isFeedbackActive ? 'Currently Open' : 'Currently Closed'}\n              </p>\n              <p className=\"text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n                Toggle to allow or restrict students from submitting feedback.\n              </p>\n            </div>\n            <div>\n              {isFeedbackActive ? (\n                <button onClick={handleToggleFeedback} disabled={loadingFeedbackToggle} className=\"btn-danger w-full\">\n                  {loadingFeedbackToggle ? (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <span className=\"loading-spinner\" />\n                      Closing...\n                    </span>\n                  ) : 'Stop Feedback Period'}\n                </button>\n              ) : (\n                <button onClick={handleToggleFeedback} disabled={loadingFeedbackToggle} className=\"btn-primary w-full\">\n                  {loadingFeedbackToggle ? (\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <span className=\"loading-spinner\" />\n                      Opening...\n                    </span>\n                  ) : 'Start Feedback Period'}\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Department Metrics Card */}\n        <div className=\"card card-body hover-lift\">\n          <h3 className=\"section-title mb-5\">Department Metrics</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-4 rounded-xl transition-all hover-scale\" style={{ background: \"var(--primary-light)\" }}>\n              <div className=\"flex items-center gap-3\">\n                <Users size={20} style={{ color: \"var(--primary)\" }} />\n                <span className=\"text-sm font-medium\" style={{ color: \"var(--text-secondary)\" }}>Total Staff</span>\n              </div>\n              <span className=\"text-xl font-bold\" style={{ color: \"var(--primary)\" }}>{metrics?.staffCount || 0}</span>\n            </div>\n            <div className=\"flex items-center justify-between p-4 rounded-xl transition-all hover-scale\" style={{ background: \"var(--success-light)\" }}>\n              <div className=\"flex items-center gap-3\">\n                <BookOpen size={20} style={{ color: \"var(--success)\" }} />\n                <span className=\"text-sm font-medium\" style={{ color: \"var(--text-secondary)\" }}>Total Subjects</span>\n              </div>\n              <span className=\"text-xl font-bold\" style={{ color: \"var(--success)\" }}>{metrics?.subjectCount || 0}</span>\n            </div>\n            <div className=\"flex items-center justify-between p-4 rounded-xl transition-all hover-scale\" style={{ background: \"var(--hover-overlay)\" }}>\n              <div className=\"flex items-center gap-3\">\n                <GraduationCap size={20} style={{ color: \"var(--text-secondary)\" }} />\n                <span className=\"text-sm font-medium\" style={{ color: \"var(--text-secondary)\" }}>Total Students</span>\n              </div>\n              <span className=\"text-xl font-bold\" style={{ color: \"var(--text-primary)\" }}>{metrics?.studentCount || 0}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Faculty Reports Control Card */}\n      <div className=\"card card-body mb-6 hover-lift\">\n        <div className=\"flex items-center justify-between mb-5\">\n          <h3 className=\"section-title mb-0\">Faculty Report Control</h3>\n          <span className={`badge ${reportsReleased ? \"badge-success\" : \"badge-danger\"}`}>\n            {reportsReleased ? 'RELEASED' : 'NOT RELEASED'}\n          </span>\n        </div>\n        <div className=\"space-y-4\">\n          <div>\n            <p className=\"text-sm font-semibold mb-2\" style={{ color: \"var(--text-primary)\" }}>\n              Reports Status: {reportsReleased ? 'Visible to Faculty' : 'Hidden from Faculty'}\n            </p>\n            <p className=\"text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n              Release or retract final feedback reports for faculty members in your department.\n            </p>\n          </div>\n          <div className=\"flex gap-3 flex-wrap\">\n            {reportsReleased ? (\n              <button onClick={handleToggleReleaseStatus} disabled={loadingReportsToggle} className=\"btn-danger\">\n                {loadingReportsToggle ? (\n                  <span className=\"flex items-center justify-center gap-2\">\n                    <span className=\"loading-spinner\" />\n                    Retracting...\n                  </span>\n                ) : 'Retract Reports from Faculty'}\n              </button>\n            ) : (\n              <button onClick={handleToggleReleaseStatus} disabled={loadingReportsToggle} className=\"btn-success\">\n                {loadingReportsToggle ? (\n                  <span className=\"flex items-center justify-center gap-2\">\n                    <span className=\"loading-spinner\" />\n                    Releasing...\n                  </span>\n                ) : 'Release Reports to Faculty'}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Feedback Analytics Chart */}\n      <div className=\"card hover-lift\">\n        <div className=\"card-header\">\n          <h3 className=\"section-title mb-0\">Feedback Analytics</h3>\n          <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>Visual representation of feedback trends</p>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"h-64 rounded-xl flex items-center justify-center\" style={{ background: \"var(--background)\" }}>\n            <p className=\"text-sm font-medium\" style={{ color: \"var(--text-muted)\" }}>Chart visualization will appear here</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":12574},"src/app/api/departments/[id]/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { departmentService, staffService } from \"@/lib/mongodb-services\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\n\nexport async function PUT(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n    const { name, abbreviation } = body || {};\n\n    if (!name || !abbreviation) {\n      return NextResponse.json({ error: \"Missing name or abbreviation\" }, { status: 400 });\n    }\n\n    const updated = await departmentService.update({ id }, { name, abbreviation });\n    return NextResponse.json(updated);\n  } catch (error) {\n    return NextResponse.json({ error: \"Failed to update department\" }, { status: 500 });\n  }\n}\n\nexport async function PATCH(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n    const body = await request.json();\n    const { name, abbreviation } = body || {};\n\n    if (!name || !abbreviation) {\n      return NextResponse.json({ error: \"Missing name or abbreviation\" }, { status: 400 });\n    }\n\n    const updated = await departmentService.update({ id }, { name, abbreviation });\n    return NextResponse.json(updated);\n  } catch (error) {\n    return NextResponse.json({ error: \"Failed to update department\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"ADMIN\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const { id } = await params;\n    await staffService.deleteMany({ departmentId: id });\n    await departmentService.delete({ id });\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to delete department\" }, { status: 500 });\n  }\n}\n","size_bytes":2127},"src/app/(dashboard)/admin/years/page.tsx":{"content":"\"use client\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui-controls\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { SkeletonTable } from \"@/components/skeletons\";\nimport { CustomSelect } from \"@/components/custom-select\";\nimport toast from \"react-hot-toast\";\n\ntype Year = { id: string; name: string; abbreviation: string; departmentId?: string };\ntype Department = { id: string; name: string; abbreviation: string };\n\nexport default function ManageYearsPage(): React.ReactElement {\n  const [years, setYears] = useState<Year[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const [deleteConfirmModal, setDeleteConfirmModal] = useState<{ open: boolean; yearId: string; yearName: string }>({ \n    open: false, \n    yearId: '', \n    yearName: '' \n  });\n  const [name, setName] = useState(\"\");\n  const [abbrev, setAbbrev] = useState(\"\");\n  const [departmentId, setDepartmentId] = useState(\"\");\n  const [editingYear, setEditingYear] = useState<Year | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    fetchYears();\n    fetchDepartments();\n  }, []);\n\n  async function fetchYears() {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/years\");\n      const data = await res.json();\n      setYears(data || []);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function fetchDepartments() {\n    try {\n      const res = await fetch(\"/api/departments\");\n      const data = await res.json();\n      setDepartments(data || []);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleCreate = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const res = await fetch(\"/api/years\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name, abbreviation: abbrev, departmentId: departmentId || null }),\n      });\n      if (!res.ok) throw new Error(\"Failed to create\");\n      setName(\"\");\n      setAbbrev(\"\");\n      setDepartmentId(\"\");\n      setShowModal(false);\n      fetchYears();\n      toast.success(\"Academic year created successfully\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Create failed\");\n    }\n  }, [name, abbrev, departmentId]);\n\n  const handleUpdate = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingYear) return;\n    \n    try {\n      const res = await fetch(`/api/years/${editingYear.id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name, abbreviation: abbrev, departmentId: departmentId || null }),\n      });\n      if (!res.ok) throw new Error(\"Failed to update\");\n      setName(\"\");\n      setAbbrev(\"\");\n      setDepartmentId(\"\");\n      setEditingYear(null);\n      setShowModal(false);\n      fetchYears();\n      toast.success(\"Academic year updated successfully\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Update failed\");\n    }\n  }, [name, abbrev, departmentId, editingYear]);\n\n  const openDeleteConfirm = useCallback((yearId: string, yearName: string) => {\n    setDeleteConfirmModal({ open: true, yearId, yearName });\n  }, []);\n\n  const closeDeleteConfirm = useCallback(() => {\n    setDeleteConfirmModal({ open: false, yearId: '', yearName: '' });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    const { yearId } = deleteConfirmModal;\n    if (!yearId) return;\n    \n    setIsDeleting(true);\n    try {\n      const res = await fetch(`/api/years/${yearId}`, {\n        method: \"DELETE\",\n      });\n      if (!res.ok) throw new Error(\"Failed to delete\");\n      fetchYears();\n      toast.success(\"Academic year deleted successfully\");\n      closeDeleteConfirm();\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Delete failed\");\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [deleteConfirmModal, closeDeleteConfirm]);\n\n  const openCreateModal = useCallback(() => {\n    setName(\"\");\n    setAbbrev(\"\");\n    setDepartmentId(\"\");\n    setEditingYear(null);\n    setShowModal(true);\n  }, []);\n\n  const openEditModal = useCallback((year: Year) => {\n    setName(year.name);\n    setAbbrev(year.abbreviation);\n    setDepartmentId(year.departmentId || \"\");\n    setEditingYear(year);\n    setShowModal(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setShowModal(false);\n    setEditingYear(null);\n  }, []);\n\n  return (\n    <main className=\"max-w-4xl mx-auto\">\n      <div className=\"flex items-start flex-col gap-3 justify-between mb-6\">\n        <h1 className=\"text-2xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n          Manage Academic Years\n        </h1>\n        <Button onClick={openCreateModal} className=\"gap-2\">\n          <Plus size={18} />\n          New Year\n        </Button>\n      </div>\n\n      {loading ? (\n        <div className=\"table-wrapper\">\n          <SkeletonTable rows={5} columns={3} />\n        </div>\n      ) : (\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Abbreviation</th>\n                <th>Department</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {years.map((y) => {\n                const dept = departments.find(d => d.id === y.departmentId);\n                return (\n                  <tr key={y.id}>\n                    <td>{y.name}</td>\n                    <td>{y.abbreviation}</td>\n                    <td>{dept ? dept.name : 'All Departments'}</td>\n                    <td>\n                      <div className=\"flex gap-2\">\n                        <button\n                          onClick={() => openEditModal(y)}\n                          className=\"btn-icon\"\n                          title=\"Edit\"\n                        >\n                          <Pencil size={16} />\n                        </button>\n                        <button\n                          onClick={() => openDeleteConfirm(y.id, y.name)}\n                          className=\"btn-icon text-red-600 hover:text-red-700\"\n                          title=\"Delete\"\n                        >\n                          <Trash2 size={16} />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {showModal && (\n        <div className=\"modal-overlay\" onClick={closeModal}>\n          <div \n            role=\"dialog\" \n            aria-modal=\"true\" \n            className=\"modal-content w-full max-w-md p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <h2 className=\"text-xl font-semibold mb-4\" style={{ color: \"var(--text-primary)\" }}>\n              {editingYear ? \"Edit Academic Year\" : \"Create Academic Year\"}\n            </h2>\n            <form onSubmit={editingYear ? handleUpdate : handleCreate} className=\"space-y-4\">\n              <div>\n                <label className=\"form-label\">Name</label>\n                <input \n                  value={name} \n                  onChange={(e) => setName(e.target.value)} \n                  className=\"input-field\" \n                  placeholder=\"e.g., First Year Computer Engineering\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"form-label\">Abbreviation</label>\n                <input \n                  value={abbrev} \n                  onChange={(e) => setAbbrev(e.target.value)} \n                  className=\"input-field\"\n                  placeholder=\"e.g., FYCO\"\n                  required\n                />\n              </div>\n              <div>\n                <CustomSelect\n                  label=\"Department (Optional)\"\n                  options={[\n                    { value: \"\", label: \"All Departments\" },\n                    ...departments.map((dept) => ({\n                      value: dept.id,\n                      label: `${dept.name} (${dept.abbreviation})`\n                    }))\n                  ]}\n                  value={departmentId}\n                  onChange={setDepartmentId}\n                  placeholder=\"Select department\"\n                />\n                <p className=\"text-xs mt-1\" style={{ color: \"var(--text-muted)\" }}>\n                  Select a department to make this year specific to that department, or leave as \"All Departments\" for system-wide use\n                </p>\n              </div>\n              <div className=\"flex gap-3 justify-end pt-4\">\n                <button type=\"button\" onClick={closeModal} className=\"btn-outline\">\n                  Cancel\n                </button>\n                <Button type=\"submit\">{editingYear ? \"Update\" : \"Create\"}</Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {deleteConfirmModal.open && (\n        <div className=\"modal-overlay\" onClick={closeDeleteConfirm}>\n          <div \n            role=\"dialog\" \n            aria-modal=\"true\" \n            className=\"modal-content w-full max-w-md mx-4 p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <h3 className=\"text-lg font-semibold mb-2\" style={{ color: \"var(--text-primary)\" }}>\n              Delete Academic Year?\n            </h3>\n            <p className=\"text-sm mb-6\" style={{ color: \"var(--text-secondary)\" }}>\n              Are you sure you want to delete <strong>{deleteConfirmModal.yearName}</strong>? This action cannot be undone.\n            </p>\n            <div className=\"flex justify-end gap-3\">\n              <button type=\"button\" onClick={closeDeleteConfirm} className=\"btn-outline\" disabled={isDeleting}>\n                Cancel\n              </button>\n              <Button \n                onClick={handleDelete} \n                disabled={isDeleting}\n                style={{ backgroundColor: \"var(--danger)\", borderColor: \"var(--danger)\" }}\n              >\n                {isDeleting ? \"Deleting...\" : \"Delete\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":10487},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\n\nconst replitDevDomain = process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAINS;\n\nconst getNextAuthUrl = () => {\n  if (process.env.NEXTAUTH_URL && process.env.NEXTAUTH_URL.trim() !== \"\") {\n    return process.env.NEXTAUTH_URL;\n  }\n  if (replitDevDomain) {\n    return `https://${replitDevDomain}`;\n  }\n  return \"https://771ca17c-b5c4-45b1-9da6-e251ac4b9e9e-00-21v72j2xwgq2z.pike.replit.dev\";\n};\n\nconst getNextAuthSecret = () => {\n  if (process.env.NEXTAUTH_SECRET && process.env.NEXTAUTH_SECRET.trim() !== \"\") {\n    return process.env.NEXTAUTH_SECRET;\n  }\n  return \"4M6PmUDdOTgSuDLaE1+9fAxJFnD0Jbxgklph8RqzheA=\";\n};\n\nprocess.env.NEXTAUTH_URL = getNextAuthUrl();\nprocess.env.NEXTAUTH_SECRET = getNextAuthSecret();\n\nconst nextConfig: NextConfig = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  allowedDevOrigins: replitDevDomain ? [replitDevDomain] : [\"*.repl.co\", \"*.replit.dev\", \"*.replit.app\"],\n  experimental: {\n    serverActions: {\n      allowedOrigins: [\"*.repl.co\", \"*.replit.dev\", \"*.replit.app\"],\n    },\n  },\n};\n\nexport default nextConfig;\n","size_bytes":1144},"src/app/api/staff/[id]/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport type { Session } from \"next-auth\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, userService, hodSuggestionService, assignmentService } from \"@/lib/mongodb-services\";\n\nexport async function PATCH(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n\n    const session = (await getServerSession(authOptions as any)) as Session | null;\n    if (!session || ![\"ADMIN\", \"HOD\"].includes(session.user?.role)) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const staffProfile = await staffService.findUnique({ where: { id } });\n    if (!staffProfile) return NextResponse.json({ error: \"Staff not found\" }, { status: 404 });\n\n    if (session.user.role === \"HOD\") {\n      const hodUserId = session.user.id as string;\n      const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n      if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n      if (staffProfile.departmentId !== hodProfile.departmentId) {\n        return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n      }\n    }\n\n    const body = await request.json();\n    const { name, email, departmentId } = body;\n\n    if (name || email) {\n      const updateData: any = {};\n      if (name) updateData.name = name;\n      if (email) updateData.email = email;\n      \n      await userService.update({ id: staffProfile.userId }, updateData);\n    }\n\n    if (departmentId !== undefined) {\n      await staffService.update({ id }, { departmentId });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update staff\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(request: Request, { params }: { params: Promise<{ id: string }> }) {\n  try {\n    const { id } = await params;\n    const session = (await getServerSession(authOptions as any)) as Session | null;\n    if (!session || ![\"ADMIN\", \"HOD\"].includes(session.user?.role)) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const staff = await staffService.findUnique({ where: { id } });\n    if (!staff) return NextResponse.json({ error: \"Staff not found\" }, { status: 404 });\n\n    if (session.user.role === \"HOD\") {\n      const hodUserId = session.user.id as string;\n      const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n      if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n      if (staff.departmentId !== hodProfile.departmentId) {\n        return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n      }\n    }\n\n    try {\n      await hodSuggestionService.deleteMany({ staffId: staff.id });\n      await assignmentService.deleteMany({ staffId: staff.id });\n      await userService.delete({ id: staff.userId });\n    } catch (err) {\n      console.error('Failed while deleting related records or staff/user:', err);\n      const msg = (err && (err as any).message) ? (err as any).message : 'Failed to delete staff';\n      return NextResponse.json({ error: msg }, { status: 500 });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to delete staff\" }, { status: 500 });\n  }\n}\n","size_bytes":3586},"src/app/api/years/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { academicYearService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const years = await academicYearService.findMany({ orderBy: { name: \"asc\" } });\n    return NextResponse.json(years);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch academic years\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { name, abbreviation, departmentId } = body || {};\n    if (!name || !abbreviation) return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\n\n    const created = await academicYearService.create({ name, abbreviation, departmentId: departmentId || null });\n    return NextResponse.json(created, { status: 201 });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to create academic year\" }, { status: 500 });\n  }\n}\n","size_bytes":1368},"src/app/(dashboard)/hod/subjects/page.tsx":{"content":"\"use client\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Edit, Trash, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui-controls\";\nimport { CustomSelect } from \"@/components/custom-select\";\nimport { SkeletonTable } from \"@/components/skeletons\";\nimport toast from \"react-hot-toast\";\n\ntype Subject = { \n  id: string; \n  name: string; \n  subjectCode: string; \n  semester?: number;\n  academicYear?: { id: string; name: string; abbreviation?: string } \n};\n\nexport default function ManageSubjectsPage(): React.ReactElement {\n  const [subjects, setSubjects] = useState<Subject[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);\n  const [name, setName] = useState(\"\");\n  const [subjectCode, setSubjectCode] = useState(\"\");\n  const [semester, setSemester] = useState<number>(1);\n  const [academicYearId, setAcademicYearId] = useState(\"\");\n  const [years, setYears] = useState<Array<{ id: string; name: string; abbreviation?: string }>>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    fetchSubjects();\n    fetchYears();\n  }, []);\n\n  async function fetchSubjects() {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/subjects\");\n      if (!res.ok) throw new Error(\"Failed to fetch subjects\");\n      const data = await res.json();\n      setSubjects(data);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function fetchYears() {\n    try {\n      const res = await fetch(\"/api/years\");\n      if (!res.ok) throw new Error(\"Failed to fetch years\");\n      const data = await res.json();\n      setYears(data || []);\n    } catch (err) {\n      console.error(err);\n      setYears([]);\n    }\n  }\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name || !subjectCode || !academicYearId || !semester) return;\n\n    setIsSubmitting(true);\n    try {\n      if (editingSubject) {\n        const res = await fetch(`/api/subjects/${editingSubject.id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, subjectCode, academicYearId, semester }),\n        });\n        if (!res.ok) {\n          let errMsg = \"Failed to update subject\";\n          try {\n            const payload = await res.json();\n            errMsg = payload?.error || JSON.stringify(payload);\n          } catch (e) {\n            try {\n              errMsg = await res.text();\n            } catch (_) {}\n          }\n          throw new Error(errMsg);\n        }\n        const updated = await res.json();\n        setSubjects((prev) => prev.map((s) => (s.id === updated.id ? updated : s)));\n        setEditingSubject(null);\n        toast.success(\"Subject updated successfully\");\n      } else {\n        const res = await fetch(\"/api/subjects\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, subjectCode, academicYearId, semester }),\n        });\n        if (!res.ok) {\n          let errMsg = \"Failed to create subject\";\n          try {\n            const payload = await res.json();\n            errMsg = payload?.error || JSON.stringify(payload);\n          } catch (e) {\n            try {\n              errMsg = await res.text();\n            } catch (_) {}\n          }\n          throw new Error(errMsg);\n        }\n        const created = await res.json();\n        setSubjects((prev) => [created, ...prev]);\n        toast.success(\"Subject created successfully\");\n      }\n\n      setIsModalOpen(false);\n      setName(\"\");\n      setSubjectCode(\"\");\n      setSemester(1);\n      setAcademicYearId(\"\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [editingSubject, name, subjectCode, semester, academicYearId]);\n\n  const handleDelete = useCallback(async (id: string) => {\n    if (!confirm(\"Delete this subject?\")) return;\n    try {\n      const res = await fetch(`/api/subjects/${id}`, { method: \"DELETE\" });\n      if (!res.ok) throw new Error(\"Delete failed\");\n      setSubjects((prev) => prev.filter((s) => s.id !== id));\n      toast.success(\"Subject deleted successfully\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Delete failed\");\n    }\n  }, []);\n\n  const openCreateModal = useCallback(() => {\n    setEditingSubject(null);\n    setName(\"\");\n    setSubjectCode(\"\");\n    setSemester(1);\n    setAcademicYearId(\"\");\n    setIsModalOpen(true);\n  }, []);\n\n  const openEditModal = useCallback((s: Subject) => {\n    setEditingSubject(s);\n    setName(s.name);\n    setSubjectCode(s.subjectCode);\n    setSemester(s.semester || 1);\n    setAcademicYearId(s.academicYear?.id ?? \"\");\n    setIsModalOpen(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  return (\n    <main className=\"max-w-7xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-2xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n          Manage Department Subjects\n        </h1>\n        <Button onClick={openCreateModal} className=\"gap-2\">\n          <Plus size={18} />\n          Add New Subject\n        </Button>\n      </div>\n\n      {loading ? (\n        <div className=\"table-wrapper\">\n          <SkeletonTable rows={5} columns={4} />\n        </div>\n      ) : (\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Subject Name</th>\n                <th>Subject Code</th>\n                <th>Semester</th>\n                <th>Target Year</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {subjects.map((s) => (\n              <tr key={s.id}>\n                <td>{s.name}</td>\n                <td>{s.subjectCode}</td>\n                <td>\n                  {s.semester ? (\n                    <span className=\"inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium\" \n                      style={{ \n                        background: s.semester % 2 === 1 ? \"var(--primary-light)\" : \"var(--info-light)\",\n                        color: s.semester % 2 === 1 ? \"var(--primary)\" : \"var(--info)\"\n                      }}>\n                      Sem {s.semester} ({s.semester % 2 === 1 ? \"Odd\" : \"Even\"})\n                    </span>\n                  ) : \"-\"}\n                </td>\n                <td>{s.academicYear?.abbreviation ?? s.academicYear?.name ?? \"-\"}</td>\n                <td>\n                  <div className=\"flex items-center gap-2\">\n                    <button\n                      onClick={() => openEditModal(s)}\n                      className=\"p-2 rounded-lg transition-colors hover:bg-[var(--hover-overlay)]\"\n                      style={{ color: \"var(--text-secondary)\" }}\n                      aria-label=\"Edit\"\n                    >\n                      <Edit size={16} />\n                    </button>\n                    <button \n                      onClick={() => handleDelete(s.id)} \n                      type=\"button\" \n                      className=\"p-2 rounded-lg transition-colors\"\n                      style={{ color: \"var(--danger)\" }}\n                      onMouseEnter={(e) => e.currentTarget.style.background = \"var(--danger-light)\"}\n                      onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                      aria-label=\"Delete\"\n                    >\n                      <Trash size={16} />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\" onClick={closeModal}>\n          <div \n            role=\"dialog\" \n            aria-modal=\"true\" \n            className=\"modal-content w-full max-w-xl mx-4 p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n                  {editingSubject ? \"Edit Subject\" : \"Create Subject\"}\n                </h3>\n                <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n                  {editingSubject ? \"Update subject details.\" : \"Add a new subject for your department.\"}\n                </p>\n              </div>\n              <button \n                onClick={closeModal} \n                className=\"p-2 rounded-lg transition-colors ml-4 hover:bg-[var(--hover-overlay)]\"\n                style={{ color: \"var(--text-secondary)\" }}\n              >\n                â\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n              <div>\n                <label className=\"form-label\">Subject Name</label>\n                <input \n                  value={name} \n                  onChange={(e) => setName(e.target.value)} \n                  className=\"input-field\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">Subject Code</label>\n                <input \n                  value={subjectCode} \n                  onChange={(e) => setSubjectCode(e.target.value)} \n                  className=\"input-field\"\n                  required\n                />\n              </div>\n\n              <CustomSelect\n                label=\"Semester\"\n                options={[\n                  { value: 1, label: \"1st Semester (Odd)\" },\n                  { value: 2, label: \"2nd Semester (Even)\" },\n                  { value: 3, label: \"3rd Semester (Odd)\" },\n                  { value: 4, label: \"4th Semester (Even)\" },\n                  { value: 5, label: \"5th Semester (Odd)\" },\n                  { value: 6, label: \"6th Semester (Even)\" },\n                ]}\n                value={semester}\n                onChange={(value) => setSemester(Number(value))}\n              />\n\n              <CustomSelect\n                label=\"Academic Year\"\n                options={[\n                  { value: \"\", label: \"Select year\" },\n                  ...years.map((y) => ({ value: y.id, label: y.abbreviation ?? y.name }))\n                ]}\n                value={academicYearId}\n                onChange={setAcademicYearId}\n              />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <button type=\"button\" onClick={closeModal} className=\"btn-outline\">\n                  Cancel\n                </button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? \"Saving...\" : (editingSubject ? \"Save\" : \"Create Subject\")}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":11191},"src/app/(dashboard)/hod/staff/page.tsx":{"content":"\"use client\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { UserPlus, Pencil, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui-controls\";\nimport toast from \"react-hot-toast\";\n\ntype Department = {\n  id: string;\n  name: string;\n  abbreviation?: string;\n};\n\ntype StaffRow = {\n  id: string;\n  user: { id: string; name?: string | null; email?: string | null };\n  departmentId: string;\n  department?: Department | null;\n};\n\nexport default function ManageStaffPage(): React.ReactElement {\n  const { data: session } = useSession();\n  const currentUserId = (session as any)?.user?.id;\n  const [staffList, setStaffList] = useState<StaffRow[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingStaff, setEditingStaff] = useState<StaffRow | null>(null);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [departmentId, setDepartmentId] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchStaff();\n    fetchDepartments();\n  }, []);\n\n  async function fetchStaff() {\n    try {\n      const res = await fetch(\"/api/staff\");\n      if (!res.ok) throw new Error(\"Failed to fetch staff\");\n      const data = await res.json();\n      setStaffList(data || []);\n    } catch (err) {\n      console.error(err);\n      setStaffList([]);\n    }\n  }\n\n  async function fetchDepartments() {\n    try {\n      const res = await fetch(\"/api/departments\");\n      if (!res.ok) throw new Error(\"Failed to fetch departments\");\n      const data = await res.json();\n      setDepartments(data);\n      if (data.length > 0) setDepartmentId(data[0].id);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      if (editingStaff) {\n        const res = await fetch(`/api/staff/${editingStaff.id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, email, departmentId }),\n        });\n        if (!res.ok) {\n          const err = await res.json();\n          throw new Error(err?.error || \"Failed to update staff\");\n        }\n        await fetchStaff();\n        toast.success(\"Staff member updated successfully\");\n        setEditingStaff(null);\n      } else{\n        if (!name || !email || !password || !departmentId) return;\n        const res = await fetch(\"/api/staff\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, email, password, departmentId }),\n        });\n        if (!res.ok) {\n          const err = await res.json();\n          throw new Error(err?.error || \"Failed to create staff\");\n        }\n        await fetchStaff();\n        toast.success(\"Staff member created successfully\");\n      }\n\n      setIsModalOpen(false);\n      setName(\"\");\n      setEmail(\"\");\n      setPassword(\"\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [editingStaff, name, email, password, departmentId]);\n\n  const openCreateModal = useCallback(() => {\n    setEditingStaff(null);\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    if (departments.length > 0) setDepartmentId(departments[0].id);\n    setIsModalOpen(true);\n  }, [departments]);\n\n  const openEditModal = useCallback((s: StaffRow) => {\n    setEditingStaff(s);\n    setName(s.user?.name ?? \"\");\n    setEmail(s.user?.email ?? \"\");\n    setPassword(\"\");\n    setDepartmentId(s.department?.id || (departments.length > 0 ? departments[0].id : \"\"));\n    setIsModalOpen(true);\n  }, [departments]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  const handleDelete = useCallback(async (s: StaffRow) => {\n    const ok = confirm(`Delete staff member ${s.user?.name ?? s.user?.email ?? s.id}? This will also remove the user.`);\n    if (!ok) return;\n    try {\n      setDeletingId(s.id);\n      const res = await fetch(`/api/staff/${s.id}`, { method: \"DELETE\" });\n      if (!res.ok) {\n        const err = await res.json();\n        throw new Error(err?.error || \"Failed to delete staff\");\n      }\n      setStaffList((prev) => prev.filter((p) => p.id !== s.id));\n      toast.success(\"Staff member deleted successfully\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message);\n    } finally {\n      setDeletingId(null);\n    }\n  }, []);\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold mb-2\" style={{ color: \"var(--text-primary)\" }}>\n          Manage Department Staff\n        </h1>\n        <p className=\"text-sm mb-4\" style={{ color: \"var(--text-muted)\" }}>\n          Add, edit, or remove staff members from your department\n        </p>\n        <Button onClick={openCreateModal} className=\"gap-2\">\n          <UserPlus size={16} />\n          <span>Add New Staff Member</span>\n        </Button>\n      </div>\n\n      <div className=\"table-wrapper\">\n        <table className=\"data-table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {staffList.length === 0 ? (\n              <tr>\n                <td colSpan={3} className=\"text-center py-8\" style={{ color: \"var(--text-muted)\" }}>\n                  No staff members found. Add one to get started.\n                </td>\n              </tr>\n            ) : (\n              staffList.map((s) => (\n                <tr key={s.id}>\n                  <td>{s.user?.name ?? \"-\"}</td>\n                  <td>{s.user?.email ?? \"-\"}</td>\n                  <td>\n                    <div className=\"flex gap-2\">\n                      <button\n                        onClick={() => openEditModal(s)}\n                        className=\"btn-icon\"\n                        title=\"Edit\"\n                        disabled={s.user?.id === currentUserId}\n                        style={s.user?.id === currentUserId ? { opacity: 0.5, cursor: \"not-allowed\" } : {}}\n                      >\n                        <Pencil size={16} />\n                      </button>\n                      <button\n                        onClick={() => handleDelete(s)}\n                        className=\"btn-icon text-red-600 hover:text-red-700\"\n                        title=\"Delete\"\n                        disabled={s.user?.id === currentUserId || deletingId === s.id}\n                        style={s.user?.id === currentUserId ? { opacity: 0.5, cursor: \"not-allowed\" } : {}}\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\" onClick={closeModal}>\n          <div \n            role=\"dialog\" \n            aria-modal=\"true\" \n            className=\"modal-content w-full max-w-md mx-4 p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n                  {editingStaff ? \"Edit Staff Member\" : \"Add Staff Member\"}\n                </h3>\n                <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n                  {editingStaff ? \"Edit details for this staff member.\" : \"Create a new staff member for your department.\"}\n                </p>\n              </div>\n              <button \n                onClick={closeModal} \n                className=\"p-2 rounded-lg transition-colors ml-4 hover:bg-[var(--hover-overlay)]\"\n                style={{ color: \"var(--text-secondary)\" }}\n              >\n                â\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n              <div>\n                <label className=\"form-label\">Name</label>\n                <input \n                  value={name} \n                  onChange={(e) => setName(e.target.value)} \n                  className=\"input-field\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">Email</label>\n                <input \n                  value={email} \n                  onChange={(e) => setEmail(e.target.value)} \n                  type=\"email\" \n                  className=\"input-field\"\n                  required\n                />\n              </div>\n\n              {!editingStaff && (\n                <div>\n                  <label className=\"form-label\">Password</label>\n                  <input \n                    value={password} \n                    onChange={(e) => setPassword(e.target.value)} \n                    type=\"password\" \n                    className=\"input-field\"\n                    required\n                  />\n                </div>\n              )}\n\n              <div>\n                <label className=\"form-label\">Department *</label>\n                <select \n                  value={departmentId} \n                  onChange={(e) => setDepartmentId(e.target.value)} \n                  className=\"input-field\"\n                  required\n                >\n                  {departments.map((dept) => (\n                    <option key={dept.id} value={dept.id}>\n                      {dept.name} {dept.abbreviation ? `(${dept.abbreviation})` : \"\"}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <button type=\"button\" onClick={closeModal} className=\"btn-outline\">\n                  Cancel\n                </button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? \"Saving...\" : (editingStaff ? \"Save\" : \"Create\")}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10521},"src/lib/prisma.ts":{"content":"import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n","size_bytes":284},"src/app/(dashboard)/sidebar.tsx":{"content":"\"use client\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport { LayoutDashboard, Building2, Users, User, Book, Clipboard, LogOut, ClipboardList, GraduationCap, School } from \"lucide-react\";\n\nconst adminLinks: Array<{ href: string; label: string; icon: React.ReactNode }> = [\n  { href: \"/admin\", label: \"Dashboard\", icon: <LayoutDashboard size={16} /> },\n  { href: \"/admin/departments\", label: \"Departments\", icon: <Building2 size={16} /> },\n  { href: \"/admin/years\", label: \"Academic Years\", icon: <GraduationCap size={16} /> },\n  { href: \"/admin/staff\", label: \"Staff Management\", icon: <Users size={16} /> },\n  { href: \"/admin/hods\", label: \"HOD Management\", icon: <Users size={16} /> },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={16} /> },\n];\n\nconst hodLinks: Array<{ href: string; label: string; icon: React.ReactNode }> = [\n  { href: \"/hod/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard size={16} /> },\n  { href: \"/hod/staff\", label: \"Staff Management\", icon: <User size={16} /> },\n  { href: \"/hod/subjects\", label: \"Subject Management\", icon: <Book size={16} /> },\n    { href: \"/hod/assignment\", label: \"Faculty Assignment\", icon: <ClipboardList size={16} /> },\n    { href: \"/hod/students\", label: \"Student Management\", icon: <School size={16} /> },\n    { href: \"/hod/reports\", label: \"Feedback Reports\", icon: <Clipboard size={16} /> },\n    { href: \"/hod/submission-status\", label: \"Submission Status\", icon: <ClipboardList size={16} /> },\n    { href: \"/profile\", label: \"My Profile\", icon: <User size={16} /> },\n];\n\nconst studentLinks: Array<{ href: string; label: string; icon: React.ReactNode }> = [\n  { href: \"/student/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard size={16} /> },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={16} /> },\n];\n\nconst staffLinks: Array<{ href: string; label: string; icon: React.ReactNode }> = [\n  { href: \"/faculty/report\", label: \"Dashboard\", icon: <LayoutDashboard size={16} /> },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={16} /> },\n];\n\nexport default function Sidebar({ isOpen, onClose }: { isOpen?: boolean; onClose?: () => void }): React.ReactElement {\n  const pathname = usePathname() || \"/\";\n  const { data: session } = useSession();\n  const role = (session as any)?.user?.role;\n  const userName = (session as any)?.user?.name;\n\n  const links = role === \"HOD\" ? hodLinks : role === \"STUDENT\" ? studentLinks : role === \"STAFF\" ? staffLinks : adminLinks;\n\n  // choose the best (longest) matching href so nested routes highlight the specific link\n  const bestMatch = links.reduce<string | null>((best, l) => {\n    if (!l.href) return best;\n    if (pathname === l.href || pathname.startsWith(l.href)) {\n      if (!best) return l.href;\n      return l.href.length > best.length ? l.href : best;\n    }\n    return best;\n  }, null);\n\n  return (\n    <>\n      {/* Desktop sidebar */}\n      <aside className=\"hidden md:block w-64 bg-white h-screen border-r border-gray-200 fixed left-0 top-0\">\n        <div className=\"p-6\">\n          <div className=\"text-xl font-bold text-gray-900\">{userName || (role === \"HOD\" ? \"SPIOT HOD\" : role === \"STUDENT\" ? \"SPIOT Student\" : \"SPIOT Admin\")}</div>\n        </div>\n\n        <nav className=\"mt-4 px-2 space-y-1\">\n          {links.map((item) => {\n            // active when this item's href is the best matching href (longest match)\n            const isActive = !!bestMatch && item.href === bestMatch;\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`flex items-center gap-3 px-4 py-2 rounded-md text-sm mx-2 ${isActive ? \"bg-blue-100 text-blue-700\" : \"text-gray-700 hover:bg-gray-50\"}`}\n              >\n                <span className={`w-5 h-5 flex items-center ${isActive ? \"text-blue-700\" : \"text-gray-500\"}`}>\n                  {item.icon}\n                </span>\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </nav>\n\n        <div className=\"absolute bottom-6 left-0 w-full px-6\">\n          <button\n            onClick={async () => {\n              await signOut({ redirect: false });\n              window.location.href = \"/login\";\n            }}\n            className=\"w-full flex items-center gap-3 px-4 py-2 rounded-md text-sm text-gray-700 hover:bg-gray-50\"\n            aria-label=\"Logout\"\n          >\n            <span className=\"w-5 h-5 flex items-center text-gray-500\">\n              <LogOut size={16} />\n            </span>\n            <span>Logout</span>\n          </button>\n        </div>\n      </aside>\n\n      {/* Mobile overlay sidebar */}\n      <div className={`fixed inset-0 z-50 md:hidden ${isOpen ? \"\" : \"pointer-events-none\"}`} aria-hidden={!isOpen}>\n        <div className={`fixed inset-0 bg-black/40 transition-opacity ${isOpen ? \"opacity-100\" : \"opacity-0\"}`} onClick={onClose} />\n\n        <aside className={`fixed left-0 top-0 h-full w-64 bg-white border-r border-gray-200 transform transition-transform ${isOpen ? \"translate-x-0\" : \"-translate-x-full\"}`}>\n          <div className=\"p-6\">\n            <div className=\"text-xl font-bold text-gray-900\">{userName || (role === \"HOD\" ? \"SPIOT HOD\" : role === \"STUDENT\" ? \"SPIOT Student\" : \"SPIOT Admin\")}</div>\n          </div>\n\n          <nav className=\"mt-4 px-2 space-y-1\">\n            {links.map((item) => {\n              const active = !!bestMatch && item.href === bestMatch;\n              return (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  onClick={onClose}\n                  className={`flex items-center gap-3 px-4 py-2 rounded-md text-sm mx-2 ${\n                    active ? \"bg-blue-100 text-blue-700\" : \"text-gray-700 hover:bg-gray-50\"\n                  }`}\n                >\n                  <span className={`w-5 h-5 flex items-center ${active ? \"text-blue-700\" : \"text-gray-500\"}`}>\n                    {item.icon}\n                  </span>\n                  <span>{item.label}</span>\n                </Link>\n              );\n            })}\n          </nav>\n\n          <div className=\"absolute bottom-6 left-0 w-full px-6\">\n            <button\n              onClick={async () => {\n                await signOut({ redirect: false });\n                window.location.href = \"/login\";\n              }}\n              className=\"w-full flex items-center gap-3 px-4 py-2 rounded-md text-sm text-gray-700 hover:bg-gray-50\"\n              aria-label=\"Logout\"\n            >\n              <span className=\"w-5 h-5 flex items-center text-gray-500\">\n                <LogOut size={16} />\n              </span>\n              <span>Logout</span>\n            </button>\n          </div>\n        </aside>\n      </div>\n    </>\n  );\n}\n","size_bytes":6924},"src/components/dashboard-layout.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport {\n  LayoutDashboard,\n  Building2,\n  Users,\n  User,\n  Book,\n  Clipboard,\n} from \"lucide-react\";\n\ntype SidebarLinkProps = {\n  icon: React.ReactNode;\n  text: string;\n  href: string;\n  active?: boolean;\n};\n\nfunction SidebarLink({ icon, text, href, active }: SidebarLinkProps) {\n  return (\n    <Link\n      href={href}\n      className={`flex items-center gap-3 px-4 py-2 rounded-md text-sm transition-colors ${\n        active ? \"bg-blue-100 text-blue-700\" : \"text-gray-700 hover:bg-gray-50\"\n      }`}\n    >\n      <span className=\"w-5 h-5 flex items-center justify-center text-gray-600\">{icon}</span>\n      <span>{text}</span>\n    </Link>\n  );\n}\n\nfunction Sidebar() {\n  const pathname = usePathname() || \"/\";\n\n  const items: Array<{ href: string; text: string; icon: React.ReactNode }> = [\n    { href: \"/admin\", text: \"Dashboard\", icon: <LayoutDashboard size={16} /> },\n    { href: \"/admin/departments\", text: \"Departments\", icon: <Building2 size={16} /> },\n    { href: \"/admin/hod-management\", text: \"HOD Management\", icon: <Users size={16} /> },\n  { href: \"/admin/staff\", text: \"Staff Management\", icon: <User size={16} /> },\n    { href: \"/admin/subjects\", text: \"Subject Management\", icon: <Book size={16} /> },\n  { href: \"/admin/faculty-assignment\", text: \"Faculty Assignment\", icon: <Clipboard size={16} /> },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white h-screen border-r border-gray-200 fixed left-0 top-0\">\n      <div className=\"p-6\">\n        <div className=\"text-xl font-bold text-gray-900\">SPIOT Admin</div>\n      </div>\n\n      <nav className=\"mt-4 px-2 space-y-1\">\n        {items.map((it) => {\n          const active = pathname === it.href || pathname.startsWith(it.href + \"/\");\n          return (\n            <SidebarLink key={it.href} href={it.href} text={it.text} icon={it.icon} active={active} />\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}\n\ntype DashboardLayoutProps = {\n  children: React.ReactNode;\n};\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className=\"min-h-screen flex bg-white\">\n      <Sidebar />\n\n      <div className=\"flex-1 ml-64 bg-gray-100 p-4\">\n        <main className=\"max-w-7xl mx-auto\">{children}</main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2364},"src/app/globals.css":{"content":"@import \"tailwindcss\";\n\n/* ============================================\n   THEME VARIABLES\n   ============================================ */\n:root {\n  /* Light Theme - WhatsApp-inspired clean palette */\n  --background: #f0f2f5;\n  --foreground: #111b21;\n  --card-bg: #ffffff;\n  --card-border: #e9edef;\n  --sidebar-bg: #ffffff;\n  --sidebar-border: #e9edef;\n  --primary: #00a884;\n  --primary-hover: #008f6e;\n  --primary-light: #e7f6f3;\n  --secondary: #667781;\n  --secondary-hover: #54656f;\n  --danger: #ea4335;\n  --danger-hover: #d33426;\n  --danger-light: #fef2f2;\n  --success: #00a884;\n  --success-hover: #008f6e;\n  --success-light: #e7f6f3;\n  --text-primary: #111b21;\n  --text-secondary: #667781;\n  --text-muted: #8696a0;\n  --input-bg: #ffffff;\n  --input-border: #d1d7db;\n  --input-focus-border: #00a884;\n  --shadow-sm: 0 1px 2px rgba(11, 20, 26, 0.04);\n  --shadow-md: 0 2px 8px rgba(11, 20, 26, 0.08);\n  --shadow-lg: 0 4px 16px rgba(11, 20, 26, 0.12);\n  --hover-overlay: rgba(11, 20, 26, 0.03);\n  --active-overlay: rgba(11, 20, 26, 0.05);\n}\n\n.dark {\n  /* Dark Theme - WhatsApp dark mode inspired */\n  --background: #0b141a;\n  --foreground: #e9edef;\n  --card-bg: #1f2c33;\n  --card-border: #2a3942;\n  --sidebar-bg: #1f2c33;\n  --sidebar-border: #2a3942;\n  --primary: #00a884;\n  --primary-hover: #06cf9c;\n  --primary-light: #0b3e34;\n  --secondary: #8696a0;\n  --secondary-hover: #aebac1;\n  --danger: #f15c5c;\n  --danger-hover: #f47373;\n  --danger-light: #3a1f1f;\n  --success: #00a884;\n  --success-hover: #06cf9c;\n  --success-light: #0b3e34;\n  --text-primary: #e9edef;\n  --text-secondary: #aebac1;\n  --text-muted: #667781;\n  --input-bg: #2a3942;\n  --input-border: #3b4a54;\n  --input-focus-border: #00a884;\n  --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.2);\n  --shadow-md: 0 2px 8px rgba(0, 0, 0, 0.25);\n  --shadow-lg: 0 4px 16px rgba(0, 0, 0, 0.3);\n  --hover-overlay: rgba(255, 255, 255, 0.05);\n  --active-overlay: rgba(255, 255, 255, 0.08);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\nbody {\n  @apply antialiased;\n  background: var(--background);\n  color: var(--foreground);\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Helvetica Neue\", Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.5;\n  transition: background-color 0.2s ease, color 0.2s ease;\n}\n\n/* ============================================\n   UTILITY CLASSES - BUTTONS\n   ============================================ */\n.btn-primary {\n  @apply inline-flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg font-medium text-sm;\n  @apply transition-all duration-200 ease-out;\n  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;\n  background: var(--primary);\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-primary:hover:not(:disabled) {\n  background: var(--primary-hover);\n  box-shadow: var(--shadow-md);\n}\n\n.btn-primary:active:not(:disabled) {\n  box-shadow: var(--shadow-sm);\n}\n\n.btn-primary:focus {\n  ring-color: var(--primary);\n}\n\n.btn-secondary {\n  @apply inline-flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg font-medium text-sm;\n  @apply transition-all duration-200 ease-out;\n  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;\n  background: var(--secondary);\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-secondary:hover:not(:disabled) {\n  background: var(--secondary-hover);\n  box-shadow: var(--shadow-md);\n}\n\n.btn-secondary:active:not(:disabled) {\n  box-shadow: var(--shadow-sm);\n}\n\n.btn-danger {\n  @apply inline-flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg font-medium text-sm;\n  @apply transition-all duration-200 ease-out;\n  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;\n  background: var(--danger);\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-danger:hover:not(:disabled) {\n  background: var(--danger-hover);\n  box-shadow: var(--shadow-md);\n}\n\n.btn-danger:active:not(:disabled) {\n  box-shadow: var(--shadow-sm);\n}\n\n.btn-success {\n  @apply inline-flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg font-medium text-sm;\n  @apply transition-all duration-200 ease-out;\n  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;\n  background: var(--success);\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-success:hover:not(:disabled) {\n  background: var(--success-hover);\n  box-shadow: var(--shadow-md);\n}\n\n.btn-success:active:not(:disabled) {\n  box-shadow: var(--shadow-sm);\n}\n\n.btn-outline {\n  @apply inline-flex items-center justify-center gap-2 px-4 py-2.5 rounded-lg font-medium text-sm;\n  @apply transition-all duration-200 ease-out;\n  @apply focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;\n  background: transparent;\n  border: 1.5px solid var(--input-border);\n  color: var(--text-primary);\n  cursor: pointer;\n}\n\n.btn-outline:hover:not(:disabled) {\n  background: var(--hover-overlay);\n  border-color: var(--primary);\n  color: var(--primary);\n}\n\n.btn-outline:active:not(:disabled) {\n  background: var(--active-overlay);\n}\n\n.btn-ghost {\n  @apply inline-flex items-center justify-center gap-2 px-3 py-2 rounded-lg font-medium text-sm;\n  @apply transition-all duration-200 ease-out;\n  @apply focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed;\n  background: transparent;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n}\n\n.btn-ghost:hover:not(:disabled) {\n  background: var(--hover-overlay);\n  color: var(--text-primary);\n}\n\n.btn-ghost:active:not(:disabled) {\n  background: var(--active-overlay);\n}\n\n.btn-danger-text {\n  @apply text-sm font-medium transition-colors cursor-pointer;\n  color: var(--danger);\n}\n\n.btn-danger-text:hover {\n  color: var(--danger-hover);\n  text-decoration: underline;\n}\n\n.btn-icon {\n  @apply inline-flex items-center justify-center p-2 rounded-lg;\n  @apply transition-all duration-200;\n  @apply focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed;\n  background: transparent;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n}\n\n.btn-icon:hover:not(:disabled) {\n  background: var(--hover-overlay);\n  color: var(--primary);\n}\n\n.btn-icon:active:not(:disabled) {\n  background: var(--active-overlay);\n}\n\n/* ============================================\n   UTILITY CLASSES - CARDS\n   ============================================ */\n.card {\n  @apply rounded-xl;\n  background: var(--card-bg);\n  border: 1px solid var(--card-border);\n  box-shadow: var(--shadow-sm);\n  transition: box-shadow 0.2s ease, border-color 0.2s ease;\n}\n\n.card:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.card-interactive {\n  @apply rounded-xl cursor-pointer;\n  background: var(--card-bg);\n  border: 1px solid var(--card-border);\n  box-shadow: var(--shadow-sm);\n  transition: box-shadow 0.2s ease, border-color 0.2s ease;\n}\n\n.card-interactive:hover {\n  box-shadow: var(--shadow-lg);\n  border-color: var(--primary);\n}\n\n.card-interactive:active {\n  box-shadow: var(--shadow-md);\n}\n\n.card-header {\n  @apply px-6 py-4;\n  border-bottom: 1px solid var(--card-border);\n}\n\n.card-body {\n  @apply px-6 py-5;\n}\n\n.card-footer {\n  @apply px-6 py-4;\n  border-top: 1px solid var(--card-border);\n}\n\n.login-card {\n  /* No card styling on mobile (full screen) */\n}\n\n@media (min-width: 640px) {\n  .login-card {\n    @apply rounded-xl;\n    background: var(--card-bg);\n    border: 1px solid var(--card-border);\n    box-shadow: var(--shadow-lg);\n  }\n}\n\n/* ============================================\n   UTILITY CLASSES - FORMS\n   ============================================ */\n.input-field {\n  @apply w-full px-4 py-2.5 rounded-lg text-sm;\n  @apply transition-all duration-200;\n  @apply focus:outline-none;\n  @apply disabled:opacity-60 disabled:cursor-not-allowed;\n  border: 1.5px solid var(--input-border);\n  background: var(--input-bg);\n  color: var(--text-primary);\n}\n\n.input-field::placeholder {\n  color: var(--text-muted);\n}\n\n.input-field:focus {\n  border-color: var(--input-focus-border);\n  box-shadow: 0 0 0 3px var(--primary-light);\n}\n\n.input-field:hover:not(:disabled):not(:focus) {\n  border-color: var(--secondary);\n}\n\n.form-label {\n  @apply block text-sm font-medium mb-2;\n  color: var(--text-secondary);\n}\n\n.form-error {\n  @apply text-xs mt-1.5;\n  color: var(--danger);\n}\n\n.form-helper {\n  @apply text-xs mt-1.5;\n  color: var(--text-muted);\n}\n\n/* ============================================\n   UTILITY CLASSES - NAVIGATION\n   ============================================ */\n.nav-link {\n  @apply flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-medium;\n  @apply transition-all duration-200;\n  @apply no-underline;\n  color: var(--text-secondary);\n}\n\n.nav-link:hover {\n  background: var(--hover-overlay);\n  color: var(--primary);\n}\n\n.nav-link:active {\n  background: var(--active-overlay);\n}\n\n.nav-link-active {\n  @apply flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-semibold;\n  @apply transition-all duration-200;\n  @apply no-underline;\n  background: var(--primary-light);\n  color: var(--primary);\n}\n\n/* ============================================\n   UTILITY CLASSES - LAYOUT\n   ============================================ */\n.page-container {\n  @apply max-w-7xl mx-auto px-4;\n}\n\n.page-header {\n  @apply mb-6;\n}\n\n.page-title {\n  @apply text-2xl md:text-3xl font-bold;\n  color: var(--text-primary);\n}\n\n.page-description {\n  @apply text-sm mt-1;\n  color: var(--text-secondary);\n}\n\n.section-title {\n  @apply text-lg font-semibold mb-4;\n  color: var(--text-primary);\n}\n\n.section-description {\n  @apply text-sm;\n  color: var(--text-muted);\n}\n\n/* ============================================\n   UTILITY CLASSES - BADGES & STATUS\n   ============================================ */\n.badge {\n  @apply inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium;\n}\n\n.badge-primary {\n  background: var(--primary-light);\n  color: var(--primary);\n}\n\n.badge-success {\n  background: var(--success-light);\n  color: var(--success);\n}\n\n.badge-danger {\n  background: var(--danger-light);\n  color: var(--danger);\n}\n\n.badge-secondary {\n  background: var(--hover-overlay);\n  color: var(--text-secondary);\n}\n\n/* ============================================\n   UTILITY CLASSES - MISC\n   ============================================ */\n.divider {\n  @apply border-t;\n  border-color: var(--card-border);\n}\n\n.loading-spinner {\n  @apply inline-block w-5 h-5 border-2 rounded-full;\n  @apply animate-spin;\n  border-color: currentColor;\n  border-top-color: transparent;\n}\n\n/* ============================================\n   UTILITY CLASSES - TABLES\n   ============================================ */\n.table-wrapper {\n  @apply overflow-x-auto rounded-xl;\n  border: 1px solid var(--card-border);\n  background: var(--card-bg);\n}\n\n.data-table {\n  @apply w-full;\n  border-collapse: separate;\n  border-spacing: 0;\n}\n\n.data-table thead th {\n  @apply px-4 py-3.5 text-left text-xs font-semibold whitespace-nowrap;\n  color: var(--text-secondary);\n  background: var(--background);\n  border-bottom: 1px solid var(--card-border);\n}\n\n.data-table tbody td {\n  @apply px-4 py-3.5 text-sm;\n  color: var(--text-primary);\n  border-bottom: 1px solid var(--card-border);\n}\n\n.data-table tbody tr:last-child td {\n  border-bottom: none;\n}\n\n.data-table tbody tr {\n  @apply transition-colors duration-150;\n}\n\n.data-table tbody tr:hover {\n  background: var(--hover-overlay);\n}\n\n.data-table tbody tr:active {\n  background: var(--active-overlay);\n}\n\n/* ============================================\n   UTILITY CLASSES - MODALS & OVERLAYS\n   ============================================ */\n.modal-overlay {\n  @apply fixed inset-0 flex items-center justify-center z-50;\n  background: rgba(0, 0, 0, 0.6);\n  backdrop-filter: blur(2px);\n  animation: fadeIn 0.2s ease;\n}\n\n.modal-content {\n  @apply rounded-2xl max-w-[90vw] max-h-[90vh] overflow-y-auto;\n  background: var(--card-bg);\n  box-shadow: var(--shadow-lg);\n  animation: slideUp 0.2s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* ============================================\n   UTILITY CLASSES - GRID LAYOUTS\n   ============================================ */\n.stats-grid {\n  @apply grid gap-4;\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\n}\n\n@media (min-width: 640px) {\n  .stats-grid {\n    @apply grid-cols-2 gap-5;\n  }\n}\n\n@media (min-width: 1024px) {\n  .stats-grid {\n    @apply grid-cols-4 gap-6;\n  }\n}\n\n.content-grid {\n  @apply grid gap-6;\n}\n\n@media (min-width: 768px) {\n  .content-grid-2 {\n    @apply grid-cols-2;\n  }\n}\n\n/* ============================================\n   UTILITY CLASSES - ANIMATIONS\n   ============================================ */\n.fade-in {\n  animation: fadeIn 0.3s ease;\n}\n\n.slide-in-right {\n  animation: slideInRight 0.3s ease;\n}\n\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease;\n}\n\n.pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n/* ============================================\n   UTILITY CLASSES - SPACING\n   ============================================ */\n.section-spacing {\n  @apply mb-6;\n}\n\n@media (min-width: 768px) {\n  .section-spacing {\n    @apply mb-8;\n  }\n}\n\n.content-spacing {\n  @apply p-5;\n}\n\n@media (min-width: 768px) {\n  .content-spacing {\n    @apply p-6;\n  }\n}\n\n/* ============================================\n   UTILITY CLASSES - EMPTY STATES\n   ============================================ */\n.empty-state {\n  @apply flex flex-col items-center justify-center py-12 px-6 text-center;\n  color: var(--text-muted);\n}\n\n.empty-state-icon {\n  @apply w-16 h-16 mb-4 opacity-50;\n}\n\n.empty-state-title {\n  @apply text-lg font-semibold mb-2;\n  color: var(--text-secondary);\n}\n\n.empty-state-description {\n  @apply text-sm max-w-md;\n}\n\n/* ============================================\n   SCROLLBAR CUSTOMIZATION\n   ============================================ */\nhtml::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\nhtml::-webkit-scrollbar-track {\n  background: var(--background);\n}\n\nhtml::-webkit-scrollbar-thumb {\n  background: var(--text-muted);\n  border-radius: 4px;\n}\n\nhtml::-webkit-scrollbar-thumb:hover {\n  background: var(--text-secondary);\n}\n\n/* Firefox */\nhtml {\n  scrollbar-width: thin;\n  scrollbar-color: var(--text-muted) var(--background);\n}\n\n/* Custom scrollbar for card content */\n.card::-webkit-scrollbar,\n.modal-content::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.card::-webkit-scrollbar-thumb,\n.modal-content::-webkit-scrollbar-thumb {\n  background: var(--text-muted);\n  border-radius: 3px;\n}\n\n/* ============================================\n   RESPONSIVE UTILITIES\n   ============================================ */\n.mobile-only {\n  @apply block md:hidden;\n}\n\n.desktop-only {\n  @apply hidden md:block;\n}\n\n/* ============================================\n   WHATSAPP-INSPIRED CHAT/MESSAGE STYLES\n   ============================================ */\n.message-bubble {\n  @apply px-4 py-2.5 rounded-lg max-w-md;\n  background: var(--card-bg);\n  box-shadow: var(--shadow-sm);\n}\n\n.message-bubble-sent {\n  @apply px-4 py-2.5 rounded-lg max-w-md;\n  background: var(--primary-light);\n  color: var(--text-primary);\n}\n\n/* ============================================\n   HOVER EFFECTS\n   ============================================ */\n.hover-lift {\n  @apply transition-shadow duration-200;\n}\n\n.hover-lift:hover {\n  box-shadow: var(--shadow-md);\n}\n\n.hover-scale {\n  @apply transition-opacity duration-200;\n}\n\n.hover-scale:hover {\n  opacity: 0.9;\n}\n","size_bytes":16170},"prisma/update-admin-password.js":{"content":"const { PrismaClient } = require(\"@prisma/client\");\nconst bcrypt = require(\"bcrypt\");\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  const newPass = process.argv[2];\n  if (!newPass) {\n    console.error(\"Usage: node prisma/update-admin-password.js <new-password>\");\n    process.exit(1);\n  }\n  const hashed = await bcrypt.hash(newPass, 10);\n  await prisma.user.updateMany({\n    where: { email: \"kharat@gmail.com\" },\n    data: { hashedPassword: hashed },\n  });\n  console.log(\"Admin password updated for admin@spiot.example\");\n  await prisma.$disconnect();\n}\n\nmain().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});","size_bytes":636},"src/app/student/page.tsx":{"content":"export default function StudentIndex() {\n  return <div className=\"p-6\">Student area (placeholder)</div>;\n}\n","size_bytes":107},"src/app/api/profile/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { userService } from \"@/lib/mongodb-services\";\nimport bcrypt from \"bcrypt\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n\n    const user = await userService.findUnique({ id: session.user.id });\n    if (!user) return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n\n    return NextResponse.json({ id: user.id, name: user.name, email: user.email, role: user.role });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch profile\" }, { status: 500 });\n  }\n}\n\nexport async function PATCH(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n\n    if (session.user?.role === \"STUDENT\") {\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const { name, currentPassword, newPassword } = body || {};\n\n    const data: any = {};\n    if (name) data.name = name;\n\n    if (currentPassword || newPassword) {\n      if (!currentPassword || !newPassword) {\n        return NextResponse.json({ error: \"Both currentPassword and newPassword are required to change password\" }, { status: 400 });\n      }\n\n      const user = await userService.findUnique({ id: session.user.id });\n      const existingHash = user?.hashedPassword;\n      if (!existingHash) return NextResponse.json({ error: \"No password set for this user\" }, { status: 400 });\n\n      const ok = await bcrypt.compare(currentPassword, existingHash);\n      if (!ok) return NextResponse.json({ error: \"Incorrect current password\" }, { status: 403 });\n\n      data.hashedPassword = await bcrypt.hash(newPassword, 10);\n    }\n\n    if (Object.keys(data).length === 0) return NextResponse.json({ error: \"No changes provided\" }, { status: 400 });\n\n    const updated = await userService.update({ id: session.user.id }, data);\n\n    return NextResponse.json({ id: updated.id, name: updated.name, email: updated.email, role: updated.role });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update profile\" }, { status: 500 });\n  }\n}\n","size_bytes":2557},"src/app/ui-reference/page.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Edit2, Trash2, Key, Building } from \"lucide-react\";\n\nexport default function UIReference() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [years, setYears] = useState<Array<{ id: string; name: string; abbreviation?: string }>>([]);\n\n  useEffect(() => {\n    let mounted = true;\n    async function fetchYears() {\n      try {\n        const res = await fetch('/api/years');\n        if (!res.ok) throw new Error('Failed to fetch years');\n        const data = await res.json();\n        if (mounted && Array.isArray(data)) setYears(data);\n      } catch (e) {\n        // fallback: keep years empty and UI will show hardcoded options\n        if (mounted) setYears([]);\n      }\n    }\n    fetchYears();\n    return () => { mounted = false; };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 text-gray-900 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <header className=\"mb-8\">\n          <h1 className=\"text-3xl font-semibold\" style={{ fontFamily: 'Inter, system-ui, -apple-system, \"Segoe UI\", Roboto' }}>\n            SPIOT â UI Component Reference\n          </h1>\n          <p className=\"mt-1 text-sm text-gray-600\">Light theme Â· Inter Â· Brand color: <span className=\"font-medium\" style={{ color: '#005A9C' }}>#005A9C</span></p>\n        </header>\n\n        {/* Buttons */}\n        <section className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n          <h2 className=\"text-xl font-medium mb-4\">Buttons</h2>\n\n          <div className=\"flex items-center gap-4 flex-wrap\">\n            {/* Primary */}\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-600\">Primary Button</div>\n              <button\n                className=\"px-4 py-2 rounded-md text-white font-medium bg-[#005A9C] hover:bg-[#004774] transition\"\n              >\n                Primary Action\n              </button>\n            </div>\n\n            {/* Secondary */}\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-600\">Secondary Button</div>\n              <button\n                className=\"px-4 py-2 rounded-md font-medium bg-white border border-[#005A9C] text-[#005A9C] hover:bg-[#e6f2fb] transition\"\n              >\n                Secondary Action\n              </button>\n            </div>\n\n            {/* Icon buttons */}\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-600\">Icon Buttons</div>\n              <div className=\"flex items-center gap-2\">\n                <button\n                  aria-label=\"Edit\"\n                  className=\"w-9 h-9 rounded-full bg-white border border-gray-200 hover:bg-gray-100 flex items-center justify-center text-gray-700\"\n                  title=\"Edit\"\n                >\n                  <Edit2 size={16} />\n                </button>\n\n                <button\n                  aria-label=\"Delete\"\n                  className=\"w-9 h-9 rounded-full bg-white border border-gray-200 hover:bg-gray-100 flex items-center justify-center text-red-600\"\n                  title=\"Delete\"\n                >\n                  <Trash2 size={16} />\n                </button>\n\n                <button\n                  aria-label=\"Reset Password\"\n                  className=\"w-9 h-9 rounded-full bg-white border border-gray-200 hover:bg-gray-100 flex items-center justify-center text-[#005A9C]\"\n                  title=\"Reset Password\"\n                >\n                  <Key size={16} />\n                </button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Form Elements */}\n        <section className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n          <h2 className=\"text-xl font-medium mb-4\">Form Elements</h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Full Name</label>\n              <input\n                className=\"w-full px-3 py-2 rounded-md border border-gray-300 bg-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-[#005A9C] focus:border-[#005A9C]\"\n                placeholder=\"e.g. Alice Johnson\"\n                aria-label=\"Full Name\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Target Year</label>\n              <select className=\"w-full px-3 py-2 rounded-md border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-[#005A9C] focus:border-[#005A9C]\">\n                {years.length > 0 ? years.map((y) => (\n                  <option key={y.id} value={y.id}>{y.abbreviation ?? y.name}</option>\n                )) : (\n                  <>\n                    <option>FYCO</option>\n                    <option>SYCO</option>\n                    <option>TYCO</option>\n                  </>\n                )}\n              </select>\n            </div>\n          </div>\n        </section>\n\n        {/* Data Display */}\n        <section className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n          <h2 className=\"text-xl font-medium mb-4\">Data Display</h2>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Table (spans two columns on large screens) */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"overflow-x-auto border border-gray-100 rounded-md\">\n                <table className=\"w-full text-sm\">\n                  <thead className=\"bg-gray-100 text-left text-gray-700\">\n                    <tr>\n                      <th className=\"px-4 py-3\">Name</th>\n                      <th className=\"px-4 py-3\">Department</th>\n                      <th className=\"px-4 py-3\">Email</th>\n                      <th className=\"px-4 py-3\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-100\">\n                    <tr>\n                      <td className=\"px-4 py-3\">Dr. Rohit Sharma</td>\n                      <td className=\"px-4 py-3\">Computer Science</td>\n                      <td className=\"px-4 py-3\">rohit@spiot.edu</td>\n                      <td className=\"px-4 py-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <button className=\"text-[#005A9C] hover:underline\">View</button>\n                          <button className=\"text-red-600\">Remove</button>\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"px-4 py-3\">Ms. Priya Patel</td>\n                      <td className=\"px-4 py-3\">Mathematics</td>\n                      <td className=\"px-4 py-3\">priya@spiot.edu</td>\n                      <td className=\"px-4 py-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <button className=\"text-[#005A9C] hover:underline\">View</button>\n                          <button className=\"text-red-600\">Remove</button>\n                        </div>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"px-4 py-3\">Arjun Mehta</td>\n                      <td className=\"px-4 py-3\">Electrical</td>\n                      <td className=\"px-4 py-3\">arjun@spiot.edu</td>\n                      <td className=\"px-4 py-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <button className=\"text-[#005A9C] hover:underline\">View</button>\n                          <button className=\"text-red-600\">Remove</button>\n                        </div>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Right column: Data Card and Tags */}\n            <div className=\"space-y-4\">\n              <div className=\"bg-white rounded-md shadow p-4 flex items-center justify-between\">\n                <div>\n                  <div className=\"text-sm text-gray-500\">Total Departments</div>\n                  <div className=\"text-2xl font-semibold\">6</div>\n                </div>\n                <div className=\"text-[#005A9C]\">\n                  <Building size={28} />\n                </div>\n              </div>\n\n              <div className=\"flex flex-col gap-2\">\n                <div className=\"inline-flex items-center px-3 py-1 rounded-full bg-[#005A9C] text-white text-sm\">{years && years[0] ? (years[0].abbreviation ?? years[0].name) : 'SYCO'}</div>\n                <div className=\"inline-flex items-center px-3 py-1 rounded-full bg-green-500 text-white text-sm\">Completed</div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Overlays / Modal demo */}\n        <section className=\"bg-white rounded-lg shadow-sm p-6 mb-12\">\n          <h2 className=\"text-xl font-medium mb-4\">Overlays</h2>\n          <div className=\"flex items-center gap-3\">\n            <button\n              onClick={() => setIsModalOpen(true)}\n              className=\"px-4 py-2 rounded-md text-white bg-[#005A9C] hover:bg-[#004774] transition\"\n            >\n              Open &quot;Add New Subject&quot; Modal\n            </button>\n            <div className=\"text-sm text-gray-600\">Modal appears over a semi-transparent dark overlay</div>\n          </div>\n        </section>\n\n        {/* Modal */}\n        {isModalOpen && (\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n            <div className=\"absolute inset-0 bg-black/50\" onClick={() => setIsModalOpen(false)} />\n\n            <div className=\"relative bg-white rounded-lg shadow-xl w-full max-w-lg mx-4 p-6\">\n              <h3 className=\"text-lg font-semibold\">Add New Subject</h3>\n              <p className=\"text-sm text-gray-500 mt-1\">Create a new subject record for the selected department.</p>\n\n              <div className=\"mt-4 grid grid-cols-1 gap-3\">\n                <label className=\"text-sm font-medium text-gray-700\">Subject Name</label>\n                <input className=\"w-full px-3 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#005A9C] focus:border-[#005A9C]\" />\n\n                <label className=\"text-sm font-medium text-gray-700\">Subject Code</label>\n                <input className=\"w-full px-3 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#005A9C] focus:border-[#005A9C]\" />\n\n                <label className=\"text-sm font-medium text-gray-700\">Target Year</label>\n                <select className=\"w-full px-3 py-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-[#005A9C] focus:border-[#005A9C]\">\n                  {years.length > 0 ? years.map((y) => (\n                    <option key={y.id} value={y.id}>{y.abbreviation ?? y.name}</option>\n                  )) : (\n                    <>\n                      <option>FYCO</option>\n                      <option>SYCO</option>\n                      <option>TYCO</option>\n                    </>\n                  )}\n                </select>\n              </div>\n\n              <div className=\"mt-6 flex justify-end gap-3\">\n                <button\n                  onClick={() => setIsModalOpen(false)}\n                  className=\"px-4 py-2 rounded-md font-medium bg-white border border-gray-300 text-gray-700 hover:bg-gray-50\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={() => setIsModalOpen(false)}\n                  className=\"px-4 py-2 rounded-md font-medium bg-[#005A9C] text-white hover:bg-[#004774]\"\n                >\n                  Add Subject\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11876},"src/components/dashboard-shell.tsx":{"content":"\"use client\";\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport ModernSidebar from \"@/components/modern-sidebar\";\n\n// Create a context to share sidebar collapse state\nconst SidebarContext = createContext<{ collapsed: boolean; setCollapsed: (value: boolean) => void }>({\n  collapsed: false,\n  setCollapsed: () => {},\n});\n\nexport const useSidebarContext = () => useContext(SidebarContext);\n\nexport default function DashboardShell({ children }: { children: React.ReactNode }) {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <SidebarContext.Provider value={{ collapsed, setCollapsed }}>\n      <div className=\"min-h-screen flex\">\n        <ModernSidebar collapsed={collapsed} setCollapsed={setCollapsed} />\n\n        <div \n          className={`flex-1 pb-16 md:pb-0 transition-all duration-300 fade-in ${\n            collapsed ? \"md:ml-20\" : \"md:ml-64\"\n          }`} \n          style={{ background: \"var(--background)\" }}\n        >\n          <main className=\"page-container py-6 md:py-8\">{children}</main>\n        </div>\n      </div>\n    </SidebarContext.Provider>\n  );\n}\n","size_bytes":1114},"src/app/api/faculty/[staffId]/report.pdf/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService, hodSuggestionService, feedbackService } from \"@/lib/mongodb-services\";\nimport { PDFDocument, StandardFonts, rgb } from 'pdf-lib';\n\nconst PARAM_KEYS = [\n  \"coverage_of_syllabus\",\n  \"covering_relevant_topics_beyond_syllabus\",\n  \"effectiveness_technical_contents\",\n  \"effectiveness_communication_skills\",\n  \"effectiveness_teaching_aids\",\n  \"motivation_self_learning\",\n  \"support_practical_performance\",\n  \"support_project_seminar\",\n  \"feedback_on_student_progress\",\n  \"punctuality_and_discipline\",\n  \"domain_knowledge\",\n  \"interaction_with_students\",\n  \"ability_to_resolve_difficulties\",\n  \"encourage_cocurricular\",\n  \"encourage_extracurricular\",\n  \"guidance_during_internship\",\n];\n\nconst paramLabels: Record<string,string> = {\n  coverage_of_syllabus: \"Coverage of syllabus\",\n  covering_relevant_topics_beyond_syllabus: \"Covering relevant topics beyond the syllabus\",\n  effectiveness_technical_contents: \"Effectiveness (technical contents)\",\n  effectiveness_communication_skills: \"Effectiveness (communication skills)\",\n  effectiveness_teaching_aids: \"Effectiveness (teaching aids)\",\n  motivation_self_learning: \"Motivation / self-learning\",\n  support_practical_performance: \"Support - practical performance\",\n  support_project_seminar: \"Support - project & seminar\",\n  feedback_on_student_progress: \"Feedback on student progress\",\n  punctuality_and_discipline: \"Punctuality & discipline\",\n  domain_knowledge: \"Domain knowledge\",\n  interaction_with_students: \"Interaction with students\",\n  ability_to_resolve_difficulties: \"Ability to resolve difficulties\",\n  encourage_cocurricular: \"Encourage cocurricular\",\n  encourage_extracurricular: \"Encourage extracurricular\",\n  guidance_during_internship: \"Guidance during internship\",\n};\n\nexport async function GET(req: Request, ctx: { params?: any }) {\n  try {\n    // Next.js requires awaiting params for dynamic API routes\n    const routeParams = await ctx?.params;\n    const staffId = routeParams?.staffId || new URL(req.url).pathname.split('/').slice(-2)[0];\n    if (!staffId) return NextResponse.json({ error: 'staffId required' }, { status: 400 });\n\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n\n    // allow HODs or the staff member themselves\n    const staff = await staffService.findUnique({ where: { id: staffId }, include: { user: true } });\n    if (!staff) return NextResponse.json({ error: 'Staff not found' }, { status: 404 });\n\n  // allow HODs or the staff member themselves; accept both 'STAFF' and 'FACULTY' roles\n  const allowed = session.user?.role === 'HOD' || ((session.user?.role === 'STAFF' || session.user?.role === 'FACULTY') && session.user?.id === staff.userId);\n    if (!allowed) return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n\n    // fetch assignments with subjects\n    const assignments = await assignmentService.findMany({ where: { staffId }, include: { subject: true } });\n\n  // determine semester (best-effort: use first assignment.semester) and fetch the single HOD suggestion for it\n  const semester = assignments?.[0]?.semester || '';\n  const hodSuggestion = await hodSuggestionService.findUnique({ staffId_semester: { staffId, semester } });\n\n    // prepare data\n    const reports: any[] = [];\n    const suggestions: string[] = [];\n\n    for (const a of assignments) {\n      // Fetch feedbacks separately for each assignment\n      const feedbacks = await feedbackService.findMany({ \n        where: {\n          staffId: a.staffId, \n          subjectId: a.subjectId, \n          semester: a.semester\n        }\n      });\n      if (!feedbacks || feedbacks.length === 0) continue;\n      const avg: Record<string, number> = {};\n      PARAM_KEYS.forEach((p: string) => (avg[p] = 0));\n      for (const f of feedbacks) {\n        PARAM_KEYS.forEach((p: string) => (avg[p] += Number((f as any)[p] ?? 0)));\n        const text = (f as any).any_suggestion;\n        if (text && typeof text === 'string' && text.trim().length > 0) suggestions.push(text.trim());\n      }\n      PARAM_KEYS.forEach((p: string) => (avg[p] = parseFloat((avg[p] / feedbacks.length).toFixed(2))));\n      const total = PARAM_KEYS.reduce((s: number, k: string) => s + (Number(avg[k]) || 0), 0);\n      const overallPercentage = parseFloat(((total / (PARAM_KEYS.length * 5)) * 100).toFixed(2));\n      reports.push({ assignmentId: a.id, subject: a.subject, semester: a.semester, averages: avg, totalResponses: feedbacks.length, overallPercentage });\n    }\n\n    // generate PDF using pdf-lib\n    const pdfDoc = await PDFDocument.create();\n  let page = pdfDoc.addPage([595.28, 841.89]); // A4 in points (72dpi) approximately\n    const times = await pdfDoc.embedFont(StandardFonts.Helvetica);\n    const fontSizeTitle = 16;\n    const fontSizeNormal = 10;\n\n  // header area (centered title + faculty name + academic year)\n  let y = page.getHeight() - 60;\n  const pageCenter = page.getWidth() / 2;\n  page.drawText('Student Feedback Analysis', { x: pageCenter - 110, y, size: 18, font: times, color: rgb(0,0,0) });\n  y -= 20;\n  // only show centered title; staff name and academic year will appear once below in left column\n  y -= 10;\n\n  // Two-column info area: left = staff / academic year, right = subjects\n  const pageWidth = page.getWidth();\n  const leftX = 40;\n  const rightX = pageWidth / 2 + 10;\n  // print staff name + academic year in the left column (per option B)\n  page.drawText(`Name of staff: ${staff.user?.name || 'Faculty'}`, { x: leftX, y, size: 10, font: times });\n  page.drawText(`Academic Year / Semester: ${semester}`, { x: leftX, y: y - 14, size: 10, font: times });\n  const subjects = reports.map(r => r.subject?.name).filter(Boolean).join(', ');\n  \n  // Wrap subjects if too long\n  const subjectsWrapped = wrapPdfText(`Subjects: ${subjects}`, pageWidth - rightX - 40, times, 10);\n  for (let i = 0; i < subjectsWrapped.length; i++) {\n    page.drawText(subjectsWrapped[i], { x: rightX, y: y - (i * 14), size: 10, font: times });\n  }\n  y -= 38;\n\n  // Add introductory paragraph\n  const introParagraph = \"This is informed to you,as per student Feedback Analysis & student performance report you are requested to correct your deficiencies and give the submit the action for those points to the Department based on the feedback.\";\n  const introWrapped = wrapPdfText(introParagraph, pageWidth - 80, times, 10);\n  for (const line of introWrapped) {\n    page.drawText(line, { x: leftX, y, size: 10, font: times });\n    y -= 14;\n    if (y < 60) {\n      page = pdfDoc.addPage([595.28, 841.89]);\n      y = page.getHeight() - 40;\n    }\n  }\n  y -= 10;\n\n    // draw table as a full bordered grid\n    const tableX = 40;\n    const tableRight = pageWidth - 40;\n    const tableYStart = y;\n  const col1Width = 80; // Sr.No. + Parameter label column combined will occupy first part; we'll draw Sr.No. and Parameter inside\n  const paramLabelWidth = 220; // width for the parameter label\n  const firstColTotal = col1Width + paramLabelWidth;\n  const remainingWidth = tableRight - tableX - firstColTotal;\n  const colCount = Math.max(1, reports.length);\n  const colWidth = remainingWidth / colCount;\n    const rowHeight = 20;\n\n    // Prepare wrapped subject headers so they don't overlap; measure using embedded font\n    const headerFontSize = 10;\n    const maxHeaderWidth = colWidth - 12; // padding inside column\n    function wrapPdfText(text: string, maxW: number, font: any, size: number) {\n      if (!text) return [''];\n      const words = text.split(' ');\n      const lines: string[] = [];\n      let cur = '';\n      for (const w of words) {\n        const trial = (cur ? cur + ' ' + w : w);\n        const wWidth = font.widthOfTextAtSize(trial, size);\n        if (wWidth > maxW) {\n          if (cur) lines.push(cur);\n          cur = w;\n        } else {\n          cur = trial;\n        }\n      }\n      if (cur) lines.push(cur);\n      return lines;\n    }\n\n    const wrappedHeaders: string[][] = [];\n    let maxHeaderLines = 1;\n    const lineSpacing = 2;\n    const headerPaddingTop = 6;\n    const headerPaddingBottom = 4;\n    let requiredHeaderHeight = 0;\n    for (let idx = 0; idx < colCount; idx++) {\n      const subj = (reports[idx] && reports[idx].subject && reports[idx].subject.name) || '';\n      const lines = wrapPdfText(String(subj), maxHeaderWidth, times, headerFontSize);\n      wrappedHeaders.push(lines);\n      if (lines.length > maxHeaderLines) maxHeaderLines = lines.length;\n      const totalTextHeight = lines.length * (headerFontSize + lineSpacing);\n      const colRequired = totalTextHeight + headerPaddingTop + headerPaddingBottom;\n      if (colRequired > requiredHeaderHeight) requiredHeaderHeight = colRequired;\n    }\n\n    const headerRowHeight = Math.max(rowHeight, requiredHeaderHeight);\n    const overallRowHeight = rowHeight;\n    const totalRows = 1 + PARAM_KEYS.length + 1; // header + params + overall\n    const tableHeight = headerRowHeight + PARAM_KEYS.length * rowHeight + overallRowHeight;\n\n    // Draw horizontal grid lines: iterate over rows heights\n    let gridY = tableYStart;\n    // top line\n    page.drawLine({ start: { x: tableX, y: gridY }, end: { x: tableRight, y: gridY }, thickness: 0.7, color: rgb(0,0,0) });\n    // header bottom\n    gridY -= headerRowHeight;\n    page.drawLine({ start: { x: tableX, y: gridY }, end: { x: tableRight, y: gridY }, thickness: 0.7, color: rgb(0,0,0) });\n    // param rows\n    for (let i = 0; i < PARAM_KEYS.length; i++) {\n      gridY -= rowHeight;\n      page.drawLine({ start: { x: tableX, y: gridY }, end: { x: tableRight, y: gridY }, thickness: 0.7, color: rgb(0,0,0) });\n    }\n    // overall bottom\n    gridY -= overallRowHeight;\n    page.drawLine({ start: { x: tableX, y: gridY }, end: { x: tableRight, y: gridY }, thickness: 0.7, color: rgb(0,0,0) });\n\n    // Draw vertical grid lines\n    // leftmost at tableX\n    page.drawLine({ start: { x: tableX, y: tableYStart }, end: { x: tableX, y: tableYStart - tableHeight }, thickness: 0.7, color: rgb(0,0,0) });\n    const firstColRight = tableX + firstColTotal;\n    page.drawLine({ start: { x: firstColRight, y: tableYStart }, end: { x: firstColRight, y: tableYStart - tableHeight }, thickness: 0.7, color: rgb(0,0,0) });\n    for (let c = 0; c < colCount; c++) {\n      const x = firstColRight + (c + 1) * colWidth;\n      page.drawLine({ start: { x, y: tableYStart }, end: { x, y: tableYStart - tableHeight }, thickness: 0.7, color: rgb(0,0,0) });\n    }\n\n    // Header texts: Sr. No., Parameter, and wrapped subject headers centered within each column\n    // Header top Y is the table top (tableYStart). Anchor text below top border with padding.\n    const headerTopY = tableYStart;\n    const headerStartBaselineY = headerTopY - headerPaddingTop - headerFontSize; // first line baseline\n    // draw Sr. No. and Parameter labels using headerStartBaselineY\n    page.drawText('Sr. No.', { x: tableX + 6, y: headerStartBaselineY, size: headerFontSize, font: times });\n    page.drawText('Parameter', { x: tableX + col1Width + 6, y: headerStartBaselineY, size: headerFontSize, font: times });\n    for (let idx = 0; idx < colCount; idx++) {\n      const x = firstColRight + idx * colWidth;\n      const lines = wrappedHeaders[idx] || [''];\n      // draw each line from top to bottom, spaced by headerFontSize+lineSpacing\n      for (let li = 0; li < lines.length; li++) {\n        const text = lines[li] || '';\n        const textY = headerStartBaselineY - li * (headerFontSize + lineSpacing);\n        page.drawText(text, { x: x + 6, y: textY, size: headerFontSize, font: times });\n      }\n    }\n\n    // Fill parameter rows\n    // Fill parameter rows (compute their top positions considering headerRowHeight)\n    for (let i = 0; i < PARAM_KEYS.length; i++) {\n      const p = PARAM_KEYS[i];\n      const rowTop = tableYStart - headerRowHeight - (i * rowHeight) - 0;\n      // parameter label\n      page.drawText(String(i + 1), { x: tableX + 6, y: rowTop - 12, size: 9, font: times });\n      page.drawText(paramLabels[p] || p, { x: tableX + col1Width + 6, y: rowTop - 12, size: 9, font: times });\n      // values\n      reports.forEach((r: any, idx: number) => {\n        const x = firstColRight + idx * colWidth;\n        const text = String(r.averages?.[p] ?? '0');\n        page.drawText(text, { x: x + 6, y: rowTop - 12, size: 9, font: times });\n      });\n    }\n\n    // Overall Performance row (last row index = PARAM_KEYS.length)\n  const overallRowTop = tableYStart - headerRowHeight - (PARAM_KEYS.length * rowHeight);\n  // Overall performance row (no fill, only text and grid lines already drawn)\n  page.drawText('Overall Performance', { x: tableX + col1Width + 6, y: overallRowTop - 12, size: 10, font: times });\n    reports.forEach((r: any, idx: number) => {\n      const x = firstColRight + idx * colWidth;\n      page.drawText(`${Number(r.overallPercentage ?? 0).toFixed(2)}%`, { x: x + 6, y: overallRowTop - 12, size: 10, font: times });\n    });\n\n    y = tableYStart - tableHeight - 18;\n\n    // Add \"You need to improve\" section with bullet points from student suggestions\n    if (suggestions.length > 0) {\n      y -= 8;\n      page.drawText('You need to improve your following points  that,', { x: tableX, y, size: 11, font: times });\n      y -= 16;\n      \n      // Limit to first 5 unique suggestions to avoid overcrowding\n      const uniqueSuggestions = [...new Set(suggestions)].slice(0, 5);\n      for (const suggestion of uniqueSuggestions) {\n        // Draw bullet point\n        page.drawText('â¢', { x: tableX + 6, y, size: 10, font: times });\n        \n        // Wrap suggestion text\n        const suggestionWrapped = wrapPdfText(suggestion, pageWidth - 100, times, 10);\n        for (let i = 0; i < suggestionWrapped.length; i++) {\n          page.drawText(suggestionWrapped[i], { x: tableX + 20, y, size: 10, font: times });\n          y -= 14;\n          if (y < 60) {\n            page = pdfDoc.addPage([595.28, 841.89]);\n            y = page.getHeight() - 40;\n          }\n        }\n      }\n      y -= 6;\n    }\n\n    y -= 8;\n    // Space before HOD suggestion\n    page.drawText('HOD Suggestions:', { x: tableX, y, size: 11, font: times });\n    y -= 14;\n    const hs = hodSuggestion;\n    if (hs && hs.content) {\n      // show semester label then the single suggestion content\n      page.drawText(`Semester: ${hs.semester}`, { x: tableX + 4, y, size: 9, font: times, color: rgb(0.2,0.2,0.2) });\n      y -= 12;\n      const wrapped = wrapPdfText(hs.content || '', pageWidth - 100, times, 10);\n      for (const line of wrapped) {\n        page.drawText(line, { x: tableX + 6, y, size: 10, font: times });\n        y -= 14;\n        if (y < 60) {\n          page = pdfDoc.addPage([595.28, 841.89]);\n          y = page.getHeight() - 40;\n        }\n      }\n    } else {\n      page.drawText('No suggestions from HOD yet.', { x: tableX + 6, y, size: 9, font: times });\n    }\n\n  // serialize\n  const pdfBytes = await pdfDoc.save();\n  // pdfBytes is a Uint8Array; use its underlying ArrayBuffer for Response\n  const arrayBuffer = pdfBytes.buffer as ArrayBuffer;\n  return new Response(arrayBuffer, { status: 200, headers: { 'Content-Type': 'application/pdf', 'Content-Disposition': `attachment; filename=\"faculty-report-${staff.user?.name || staffId}.pdf\"` } });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Failed to generate PDF' }, { status: 500 });\n  }\n}\n\n","size_bytes":15559},"src/app/api/staff/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, userService, departmentService } from \"@/lib/mongodb-services\";\nimport bcrypt from \"bcrypt\";\n\nexport async function GET(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || ![\"ADMIN\", \"HOD\"].includes(session.user?.role)) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const staff = await staffService.findMany({});\n\n    const staffWithUsers = await Promise.all(\n      staff.map(async (s: any) => {\n        const user = await userService.findUnique({ id: s.userId });\n        const department = s.departmentId ? await departmentService.findUnique({ id: s.departmentId }) : null;\n        return { \n          id: s.id,\n          user: user ? { id: user.id, name: user.name, email: user.email } : null,\n          department: department ? { id: department.id, name: department.name, abbreviation: department.abbreviation } : null,\n        };\n      })\n    );\n\n    const filteredStaff = staffWithUsers.filter((s) => s.user);\n\n    return NextResponse.json(filteredStaff);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch staff\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { name, email, password, departmentId } = body;\n\n    if (!name || !email || !password || !departmentId) {\n      return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\n    }\n\n    const existingUser = await userService.findUnique({ email });\n    if (existingUser) {\n      return NextResponse.json({ error: \"Email already exists\" }, { status: 400 });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const user = await userService.create({\n      name,\n      email,\n      hashedPassword,\n      role: \"STAFF\",\n    });\n\n    const staff = await staffService.create({\n      userId: user.id,\n      departmentId,\n    });\n\n    return NextResponse.json({ success: true, staffId: staff.id });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to create staff\" }, { status: 500 });\n  }\n}\n","size_bytes":2629},"src/app/(dashboard)/faculty/dashboard/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSession } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\n\nconst params: [string, string][] = [\n  [\"coverage_of_syllabus\", \"Coverage of syllabus\"],\n  [\"covering_relevant_topics_beyond_syllabus\", \"Covering relevant topics beyond the syllabus\"],\n  [\"effectiveness_technical_contents\", \"Effectiveness in terms of technical contents/ course contents\"],\n  [\"effectiveness_communication_skills\", \"Effectiveness in terms of communication skills\"],\n  [\"effectiveness_teaching_aids\", \"Effectiveness in terms of teaching aids\"],\n  [\"motivation_self_learning\", \"Motivation and inspiration for students to learn in self-learning mode\"],\n  [\"support_practical_performance\", \"Support for development of student skills: practical performance\"],\n  [\"support_project_seminar\", \"Support for development of student skills: project and seminar preparation\"],\n  [\"feedback_on_student_progress\", \"Feedback provided on student progress\"],\n  [\"punctuality_and_discipline\", \"Punctuality and discipline\"],\n  [\"domain_knowledge\", \"Domain knowledge\"],\n  [\"interaction_with_students\", \"Interaction with students\"],\n  [\"ability_to_resolve_difficulties\", \"Ability to resolve difficulties\"],\n  [\"encourage_cocurricular\", \"Encourage to participate in cocurricular activities\"],\n  [\"encourage_extracurricular\", \"Encourage to participate in extracurricular activities\"],\n  [\"guidance_during_internship\", \"Guidance during internship\"],\n];\n\nexport default function FacultyDashboardPage(): React.ReactElement {\n  const { data: session, status } = useSession();\n  const router = useRouter();\n  const [reports, setReports] = useState<any[] | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [staffId, setStaffId] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (status === \"loading\") return;\n    if (!session) return;\n    const role = (session as any).user?.role;\n    if (role !== \"STAFF\" && role !== \"FACULTY\") {\n      // unauthorized for this view\n      router.replace(\"/\");\n      return;\n    }\n\n    async function fetchReports() {\n      setLoading(true);\n      try {\n        const res = await fetch(\"/api/faculty/report\");\n        if (!res.ok) throw new Error(\"Failed to fetch\");\n        const data = await res.json();\n        setReports(data.reports || []);\n        setStaffId(data.staffId || null);\n      } catch (err: any) {\n        console.error(err);\n        setError(err?.message || \"Failed to load reports\");\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchReports();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [session, status]);\n\n  if (status === \"loading\" || loading) return <div className=\"max-w-7xl mx-auto\">Loading...</div>;\n  if (!session) return <div className=\"max-w-7xl mx-auto\">Unauthorized</div>;\n\n  return (\n    <main className=\"max-w-7xl mx-auto\">\n      <h1 className=\"text-2xl font-semibold mb-4\">My Feedback Report</h1>\n      {error && <div className=\"bg-red-50 text-red-700 rounded\">{error}</div>}\n      <div className=\"mb-4\">\n        {staffId ? (\n          <a href={`/api/faculty/${staffId}/report.pdf`} className=\"px-3 py-2 bg-blue-600 text-white rounded\">Download as PDF</a>\n        ) : null}\n      </div>\n      {reports && reports.length === 0 && <div className=\"bg-white rounded p-6\">Your feedback reports for this semester have not been released by the HOD yet.</div>}\n      {reports && reports.map((r) => (\n        <div key={r.assignmentId} className=\"bg-white rounded p-4 mb-4 shadow\">\n          <div className=\"font-medium\">{r.subject?.name} â {r.semester}</div>\n          <div className=\"mt-2 grid grid-cols-1 sm:grid-cols-2 gap-3\">\n            {params.map(([key, label]) => (\n              <div key={key} className=\"flex items-center justify-between border-b pb-2\">\n                <div className=\"text-sm text-gray-700\">{label}</div>\n                <div className=\"text-sm font-medium\">{r.averages?.[key] ?? 0} / 5</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"text-sm text-gray-500 mt-2\">Total responses: {r.totalResponses}</div>\n        </div>\n      ))}\n    </main>\n  );\n}\n","size_bytes":4253},"src/app/page.tsx":{"content":"/*\n  Root page (Server Component)\n  - Redirects users based on their session/role\n*/\n\nimport { getServerSession } from \"next-auth/next\";\nimport type { Session } from \"next-auth\";\nimport { redirect } from \"next/navigation\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\n\nexport default async function Page() {\n  const session = (await getServerSession(authOptions as any)) as Session | null;\n\n  // Not logged in -> send to login\n  if (!session) {\n    redirect(\"/login\");\n  }\n\n  // If logged in, route by role\n  const role = (session?.user as any)?.role as string;\n  if (role === \"ADMIN\") {\n    redirect(\"/admin\");\n  }\n\n  if (role === \"HOD\") {\n    redirect(\"/hod/dashboard\");\n  }\n\n  if (role === \"FACULTY\") {\n    redirect(\"/faculty/dashboard\");\n  }\n\n  if (role === \"STAFF\") {\n    redirect(\"/faculty/dashboard\");\n  }\n\n  if (role === \"STUDENT\") {\n    redirect(\"/student/dashboard\");\n  }\n\n  // Fallback\n  redirect(\"/login\");\n}","size_bytes":941},"src/app/(dashboard)/student/feedback/[assignmentId]/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport toast from \"react-hot-toast\";\n\ntype AssignmentInfo = { facultyName: string; subjectName: string };\n\nconst feedbackParameters: { key: string; label: string }[] = [\n  { key: \"coverage_of_syllabus\", label: \"Coverage of syllabus\" },\n  { key: \"covering_relevant_topics_beyond_syllabus\", label: \"Covering relevant topics beyond the syllabus\" },\n  { key: \"effectiveness_technical_contents\", label: \"Effectiveness in terms of technical contents/ course contents\" },\n  { key: \"effectiveness_communication_skills\", label: \"Effectiveness in terms of communication skills\" },\n  { key: \"effectiveness_teaching_aids\", label: \"Effectiveness in terms of teaching aids\" },\n  { key: \"motivation_self_learning\", label: \"Motivation and inspiration for students to learn in self-learning mode\" },\n  { key: \"support_practical_performance\", label: \"Support for development of student skills: practical performance\" },\n  { key: \"support_project_seminar\", label: \"Support for development of student skills: project and seminar preparation\" },\n  { key: \"feedback_on_student_progress\", label: \"Feedback provided on student progress\" },\n  { key: \"punctuality_and_discipline\", label: \"Punctuality and discipline\" },\n  { key: \"domain_knowledge\", label: \"Domain knowledge\" },\n  { key: \"interaction_with_students\", label: \"Interaction with students\" },\n  { key: \"ability_to_resolve_difficulties\", label: \"Ability to resolve difficulties\" },\n  { key: \"encourage_cocurricular\", label: \"Encourage to participate in cocurricular activities\" },\n  { key: \"encourage_extracurricular\", label: \"Encourage to participate in extracurricular activities\" },\n  { key: \"guidance_during_internship\", label: \"Guidance during internship\" },\n];\n\nconst PARAMETERS = feedbackParameters.map((p) => p.key);\n\nfunction Stars({ value, onChange }: { value: number; onChange: (v: number) => void }) {\n  return (\n    <div className=\"flex gap-2\" role=\"radiogroup\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <button\n          key={i}\n          type=\"button\"\n          onClick={() => onChange(i + 1)}\n          className={`text-3xl transition-all duration-200 ${i < value ? \"text-yellow-500 scale-110\" : \"text-gray-300 hover:text-yellow-300 hover:scale-105\"}`}\n          style={{ \n            filter: i < value ? \"drop-shadow(0 2px 4px rgba(234, 179, 8, 0.3))\" : \"none\"\n          }}\n          aria-label={`${i + 1} star`}\n        >\n          â\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default function FeedbackForm(): React.ReactElement {\n  const params = useParams() as { assignmentId?: string };\n  const router = useRouter();\n  const assignmentId = params.assignmentId as string | undefined;\n\n  const [info, setInfo] = useState<AssignmentInfo | null>(null);\n  const [ratings, setRatings] = useState<Record<string, number>>(() => Object.fromEntries(PARAMETERS.map((p) => [p, 0])));\n  const [anySuggestion, setAnySuggestion] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (assignmentId) {\n      fetchInfo();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [assignmentId]);\n\n  async function fetchInfo() {\n    try {\n      const res = await fetch(`/api/student/tasks`);\n      if (!res.ok) throw new Error(\"Failed to fetch assignment info\");\n      const data = (await res.json()) as { assignmentId: string; facultyName: string; subjectName: string }[];\n      const found = data.find((a) => a.assignmentId === assignmentId);\n      if (!found) {\n        toast.error(\"Assignment not found\");\n        return;\n      }\n      setInfo({ facultyName: found.facultyName, subjectName: found.subjectName });\n    } catch (err) {\n      console.error(err);\n      toast.error(\"Failed to load assignment info\");\n    }\n  }\n\n  function setRating(param: string, value: number) {\n    setRatings((r) => ({ ...r, [param]: value }));\n  }\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    setError(null);\n\n    // Validation: ensure all 16 mandatory parameters have values > 0\n    const missing = PARAMETERS.filter((k) => !ratings[k] || ratings[k] <= 0);\n    if (missing.length > 0) {\n      setError(\"Please rate all 16 parameters before submitting.\");\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const res = await fetch(\"/api/feedback\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ assignmentId, ratings, any_suggestion: anySuggestion }),\n      });\n      const json = await res.json().catch(() => null);\n      console.log(\"Feedback submit response\", res.status, json);\n      if (!res.ok) throw new Error(json?.error || \"Failed to submit\");\n      toast.success(\"Feedback submitted\");\n      router.push(\"/student/dashboard\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Submit failed\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <main className=\"max-w-3xl mx-auto\">\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">Feedback Form</h1>\n        <p className=\"page-description\">Rate your faculty on the following parameters</p>\n      </div>\n\n      {error && (\n        <div className=\"mb-6 px-4 py-3 rounded-lg text-sm font-medium\" style={{ background: \"var(--danger-light)\", color: \"var(--danger)\" }}>\n          {error}\n        </div>\n      )}\n\n      {info && (\n        <div className=\"card card-body mb-6\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs font-medium px-2 py-1 rounded\" style={{ background: \"var(--primary-light)\", color: \"var(--primary)\" }}>Faculty</span>\n              <span className=\"font-semibold\" style={{ color: \"var(--text-primary)\" }}>{info.facultyName}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-xs font-medium px-2 py-1 rounded\" style={{ background: \"var(--secondary)\", color: \"white\" }}>Subject</span>\n              <span className=\"text-sm\" style={{ color: \"var(--text-secondary)\" }}>{info.subjectName}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {feedbackParameters.map((p) => (\n          <div key={p.key} className=\"card card-body space-y-3\">\n            <div className=\"text-sm font-medium\" style={{ color: \"var(--text-primary)\" }}>{p.label}</div>\n            <Stars value={ratings[p.key]} onChange={(v) => setRating(p.key, v)} />\n          </div>\n        ))}\n\n        <div className=\"card card-body\">\n          <label className=\"form-label\">Any Suggestions (Optional)</label>\n          <textarea\n            value={anySuggestion}\n            onChange={(e) => setAnySuggestion(e.target.value)}\n            className=\"input-field min-h-[100px] resize-none\"\n            placeholder=\"Optional: add any comments or suggestions for the faculty...\"\n          />\n        </div>\n\n        <div className=\"pt-4 flex gap-3\">\n          <button \n            type=\"submit\" \n            disabled={isSubmitting} \n            className=\"btn-primary w-full sm:w-auto\"\n          >\n            {isSubmitting ? \"Submitting...\" : \"Submit Feedback\"}\n          </button>\n          <button \n            type=\"button\" \n            onClick={() => router.push(\"/student/dashboard\")}\n            className=\"btn-outline w-full sm:w-auto\"\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </main>\n  );\n}\n","size_bytes":7769},"src/components/feedback-chart.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip } from \"recharts\";\n\nconst data = [\n  { name: \"Computer Engg\", value: 95 },\n  { name: \"Mechanical Engg\", value: 88 },\n  { name: \"Electrical Engg\", value: 91 },\n  { name: \"Civil Engg\", value: 82 },\n];\n\nexport default function FeedbackCompletionChart(): React.ReactElement {\n  return (\n    <div className=\"w-full h-72\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={data} margin={{ top: 16, right: 16, left: 8, bottom: 8 }}>\n          <XAxis dataKey=\"name\" stroke=\"#374151\" tick={{ fontSize: 12 }} />\n          <YAxis stroke=\"#374151\" tickFormatter={(v) => `${v}%`} />\n          <Tooltip formatter={(value: number) => `${value}%`} />\n          <Bar dataKey=\"value\" fill=\"#005A9C\" radius={[6, 6, 0, 0]} />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n","size_bytes":911},"src/app/api/hod/suggestions/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { hodSuggestionService } from \"@/lib/mongodb-services\";\n\nexport async function GET(req: Request) {\n  try {\n    const url = new URL(req.url);\n    const staffId = url.searchParams.get('staffId');\n    const semester = url.searchParams.get('semester');\n    if (!staffId || !semester) return NextResponse.json({ error: 'staffId and semester required' }, { status: 400 });\n\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    if (session.user?.role !== 'HOD') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n\n    const suggestion = await hodSuggestionService.findUnique({ staffId_semester: { staffId, semester } });\n    return NextResponse.json({ suggestion });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Failed to fetch suggestion' }, { status: 500 });\n  }\n}\n\nexport async function POST(req: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    if (session.user?.role !== 'HOD') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n\n    const body = await req.json();\n    const { staffId, semester, content } = body;\n    if (!staffId || !semester) return NextResponse.json({ error: 'staffId and semester required' }, { status: 400 });\n\n    const existing = await hodSuggestionService.findUnique({ staffId_semester: { staffId, semester } });\n    \n    let suggestion;\n    if (existing) {\n      await hodSuggestionService.deleteMany({ staffId, semester });\n    }\n    suggestion = await hodSuggestionService.create({ staffId, semester, content });\n\n    return NextResponse.json({ suggestion });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Failed to save suggestion' }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    // allow HOD or ADMIN to clear suggestions\n    if (session.user?.role !== 'HOD' && session.user?.role !== 'ADMIN') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n\n    const deleted = await hodSuggestionService.deleteMany({});\n    return NextResponse.json({ deleted: deleted.count || 0 });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Failed to clear suggestions' }, { status: 500 });\n  }\n}\n","size_bytes":2781},"scripts/remove-hod-users.js":{"content":"const { PrismaClient } = require('@prisma/client');\nconst prisma = new PrismaClient();\n\n// Edit this list to include userId/staffId pairs to remove\nconst targets = [\n  { userId: 'cmgnqui460000i9mbleppgwtk', staffId: 'cmgnqui480001i9mbmam7y24p' },\n  { userId: 'cmgnr9mzy0076i9zapf4dzvpu', staffId: 'cmgnr9mzy0077i9za8zlcdwwy' },\n];\n\nasync function removeTarget(t) {\n  console.log('Processing', t.userId, t.staffId);\n\n  // Run each removal in a transaction for safety\n  await prisma.$transaction(async (tx) => {\n    // 1. Delete feedbacks for assignments belonging to this staff, then delete assignments\n    const assignments = await tx.facultyAssignment.findMany({ where: { staffId: t.staffId }, select: { id: true } });\n    const assignmentIds = assignments.map((a) => a.id);\n    if (assignmentIds.length > 0) {\n      const delFeedbacks = await tx.feedback.deleteMany({ where: { assignmentId: { in: assignmentIds } } });\n      console.log('Deleted feedback rows tied to assignments:', delFeedbacks.count);\n\n      const delAssignments = await tx.facultyAssignment.deleteMany({ where: { id: { in: assignmentIds } } });\n      console.log('Deleted assignments:', delAssignments.count);\n    } else {\n      console.log('No assignments found for staff');\n    }\n\n    // 2. If this staff is hod of any department, nullify the hodId\n    const updatedDepts = await tx.department.updateMany({ where: { hodId: t.staffId }, data: { hodId: null } });\n    console.log('Cleared hodId from departments:', updatedDepts.count);\n\n    // 3. Delete staff row (if exists)\n    const delStaff = await tx.staff.deleteMany({ where: { id: t.staffId } });\n    console.log('Deleted staff rows:', delStaff.count);\n\n    // 4. Delete the user (this will cascade to accounts/sessions via Prisma onDelete cascade)\n    const delUser = await tx.user.deleteMany({ where: { id: t.userId } });\n    console.log('Deleted user rows:', delUser.count);\n  });\n}\n\nasync function main() {\n  for (const t of targets) {\n    try {\n      await removeTarget(t);\n      console.log('Removed:', t.userId);\n    } catch (err) {\n      console.error('Failed to remove', t, err);\n    }\n  }\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(() => prisma.$disconnect());\n","size_bytes":2244},"src/app/(dashboard)/admin/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { Building2, Users, MessageSquare, Calendar } from \"lucide-react\";\nimport { PageHeader } from \"@/components/page-header\";\nimport { StatCard } from \"@/components/stat-card\";\nimport { ContentCard, ContentCardHeader, ContentCardBody } from \"@/components/content-card\";\nimport { SkeletonDashboardStats, SkeletonCard, SkeletonPulse } from \"@/components/skeletons\";\n\nexport default function AdminHomePage(): React.ReactElement {\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState({\n    departmentCount: 0,\n    staffCount: 0,\n    feedbackCount: 0\n  });\n\n  useEffect(() => {\n    async function fetchStats() {\n      try {\n        const [deptRes, staffRes, feedbackRes] = await Promise.all([\n          fetch('/api/departments'),\n          fetch('/api/staff'),\n          fetch('/api/feedback')\n        ]);\n\n        const [depts, staff, feedback] = await Promise.all([\n          deptRes.json(),\n          staffRes.json(),\n          feedbackRes.json()\n        ]);\n\n        setStats({\n          departmentCount: Array.isArray(depts) ? depts.length : 0,\n          staffCount: Array.isArray(staff) ? staff.length : 0,\n          feedbackCount: Array.isArray(feedback) ? feedback.length : 0\n        });\n      } catch (error) {\n        console.error(\"Failed to fetch stats:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchStats();\n  }, []);\n\n  return (\n    <div>\n      <PageHeader \n        title=\"Institute Overview\" \n        description=\"Monitor key metrics and performance across the institution\"\n      />\n\n      {loading ? (\n        <>\n          <SkeletonDashboardStats />\n          <SkeletonCard className=\"section-spacing\">\n            <SkeletonPulse className=\"h-6 w-48 mb-2\" />\n            <SkeletonPulse className=\"h-4 w-64 mb-6\" />\n            <SkeletonPulse className=\"h-64 w-full rounded-lg\" />\n          </SkeletonCard>\n        </>\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-5 md:gap-6 section-spacing\">\n            <StatCard\n              title=\"Total Departments\"\n              value={stats.departmentCount}\n              icon={<Building2 size={24} />}\n              iconBgColor=\"#EFF6FF\"\n              iconColor=\"#1E40AF\"\n            />\n            <StatCard\n              title=\"Total Staff\"\n              value={stats.staffCount}\n              icon={<Users size={24} />}\n              iconBgColor=\"#F0FDF4\"\n              iconColor=\"#15803D\"\n            />\n            <StatCard\n              title=\"Feedback Submitted\"\n              value={stats.feedbackCount}\n              icon={<MessageSquare size={24} />}\n              iconBgColor=\"#FEF3C7\"\n              iconColor=\"#B45309\"\n            />\n            <StatCard\n              title=\"Active Semester\"\n              value=\"Fall 2025\"\n              icon={<Calendar size={24} />}\n              iconBgColor=\"#F3E8FF\"\n              iconColor=\"#7C3AED\"\n            />\n          </div>\n\n          <ContentCard>\n            <ContentCardHeader title=\"Feedback Trend\" description=\"Overview of feedback submissions over time\" />\n            <ContentCardBody>\n              <div className=\"h-64 flex items-center justify-center\" style={{ color: \"var(--text-muted)\" }}>\n                [Chart placeholder]\n              </div>\n            </ContentCardBody>\n          </ContentCard>\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":3466},"src/components/dashboard-sidebar.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { LayoutDashboard, Building2, Users, User, Book, Clipboard } from \"lucide-react\";\n\nconst navItems: Array<{ href: string; label: string; icon: React.ReactNode }> = [\n  { href: \"/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard size={16} /> },\n  { href: \"/admin/departments\", label: \"Departments\", icon: <Building2 size={16} /> },\n  { href: \"/admin/hod-management\", label: \"HOD Management\", icon: <Users size={16} /> },\n  { href: \"/admin/staff\", label: \"Staff Management\", icon: <User size={16} /> },\n  { href: \"/admin/subjects\", label: \"Subject Management\", icon: <Book size={16} /> },\n  { href: \"/admin/faculty-assignment\", label: \"Faculty Assignment\", icon: <Clipboard size={16} /> },\n];\n\nexport default function DashboardSidebar(): React.ReactElement {\n  const pathname = usePathname() || \"/\";\n\n  return (\n    <aside className=\"w-64 bg-white h-screen border-r border-gray-200 fixed left-0 top-0\">\n      <div className=\"p-6\">\n        <div className=\"text-xl font-bold text-gray-900\">SPIOT Admin</div>\n      </div>\n\n      <nav className=\"mt-4 px-2 space-y-1\">\n        {navItems.map((item) => {\n          const active = pathname === item.href || pathname.startsWith(item.href + \"/\");\n          return (\n            <Link\n              key={item.href}\n              href={item.href}\n              className={`flex items-center gap-3 px-4 py-2 rounded-md text-sm mx-2 ${\n                active ? \"bg-blue-100 text-blue-700\" : \"text-gray-700 hover:bg-gray-50\"\n              }`}\n            >\n              <span className={`w-5 h-5 flex items-center ${active ? \"text-blue-700\" : \"text-gray-500\"}`}>\n                {item.icon}\n              </span>\n              <span>{item.label}</span>\n            </Link>\n          );\n        })}\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":1895},"src/app/api/departments/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { departmentService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const departments = await departmentService.findMany({ orderBy: { name: \"asc\" } });\n    return NextResponse.json(departments);\n  } catch (error) {\n    return NextResponse.json({ error: \"Failed to fetch departments\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { name, abbreviation } = body || {};\n\n    if (!name || !abbreviation) {\n      return NextResponse.json({ error: \"Missing name or abbreviation\" }, { status: 400 });\n    }\n\n    const created = await departmentService.create({ name, abbreviation });\n    return NextResponse.json(created, { status: 201 });\n  } catch (error) {\n    return NextResponse.json({ error: \"Failed to create department\" }, { status: 500 });\n  }\n}\n","size_bytes":912},"src/app/api/students/promote/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, userService } from \"@/lib/mongodb-services\";\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { fromYearId, toYearId } = body || {};\n    if (!fromYearId || !toYearId) return NextResponse.json({ error: \"fromYearId and toYearId are required\" }, { status: 400 });\n\n    const hodProfile = await staffService.findUnique({ where: { userId: session.user.id } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const result = await userService.updateMany({ academicYearId: fromYearId, departmentId: hodProfile.departmentId, role: \"STUDENT\" }, { academicYearId: toYearId });\n\n    return NextResponse.json({ success: true, promoted: result.count });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to promote students\" }, { status: 500 });\n  }\n}\n","size_bytes":1342},"src/app/(dashboard)/admin/departments/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport ConfirmationModal from \"@/components/confirmation-modal\";\nimport { Edit2, Trash2, Building2, Plus } from \"lucide-react\";\nimport { PageHeader } from \"@/components/page-header\";\nimport { EmptyState } from \"@/components/empty-state\";\nimport { SkeletonTable, SkeletonPulse } from \"@/components/skeletons\";\nimport toast from \"react-hot-toast\";\n\ntype Department = {\n  id: string;\n  name: string;\n  abbreviation: string;\n};\n\nexport default function ManageDepartmentsPage(): React.ReactElement {\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [departmentName, setDepartmentName] = useState(\"\");\n  const [departmentAbbreviation, setDepartmentAbbreviation] = useState(\"\");\n  const [editingDepartment, setEditingDepartment] = useState<Department | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [departmentToDelete, setDepartmentToDelete] = useState<Department | null>(null);\n\n  useEffect(() => {\n    fetchDepartments();\n  }, []);\n\n  async function fetchDepartments() {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/departments\");\n      if (!res.ok) throw new Error(\"Failed to fetch\");\n      const data = await res.json();\n      setDepartments(data);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!departmentName || !departmentAbbreviation) return;\n\n    setIsSubmitting(true);\n    try {\n      if (editingDepartment) {\n        // Update existing department\n        const res = await fetch(`/api/departments/${editingDepartment.id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name: departmentName, abbreviation: departmentAbbreviation }),\n        });\n        if (!res.ok) throw new Error(\"Update failed\");\n        const updated = await res.json();\n        setDepartments((prev) => prev.map((d) => (d.id === updated.id ? updated : d)));\n        toast.success(\"Department updated successfully\");\n        setEditingDepartment(null);\n      } else {\n        // Create new department\n        const res = await fetch(\"/api/departments\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name: departmentName, abbreviation: departmentAbbreviation }),\n        });\n        if (!res.ok) throw new Error(\"Create failed\");\n        const created = await res.json();\n        setDepartments((prev) => [created, ...prev]);\n        toast.success(\"Department created successfully\");\n      }\n\n      setIsModalOpen(false);\n      setDepartmentName(\"\");\n      setDepartmentAbbreviation(\"\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Save failed\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  async function handleDelete(id?: string) {\n    if (!id) return;\n    setIsSubmitting(true);\n    try {\n      const res = await fetch(`/api/departments/${id}`, { method: \"DELETE\" });\n      const json = await res.json().catch(() => null);\n      if (!res.ok) throw new Error(json?.error || \"Delete failed\");\n      setDepartments((prev) => prev.filter((d) => d.id !== id));\n      toast.success(\"Department deleted successfully\");\n      setShowDeleteModal(false);\n      setDepartmentToDelete(null);\n    } catch (err) {\n      console.error(err);\n      // consider toasting error\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <div>\n      <PageHeader \n        title=\"Manage Departments\" \n        description=\"Add, edit, and manage academic departments\"\n        action={\n          <button\n            onClick={() => {\n              setEditingDepartment(null);\n              setDepartmentName(\"\");\n              setDepartmentAbbreviation(\"\");\n              setIsModalOpen(true);\n            }}\n            className=\"btn-primary gap-2\"\n          >\n            <Plus size={18} />\n            <span className=\"hidden sm:inline\">Add Department</span>\n            <span className=\"sm:hidden\">Add</span>\n          </button>\n        }\n      />\n\n      {loading ? (\n        <div className=\"table-wrapper\">\n          <SkeletonTable rows={5} columns={3} />\n        </div>\n      ) : departments.length === 0 ? (\n        <EmptyState\n          icon={<Building2 size={48} />}\n          title=\"No departments yet\"\n          description=\"Get started by adding your first department\"\n          action={\n            <button\n              onClick={() => {\n                setEditingDepartment(null);\n                setDepartmentName(\"\");\n                setDepartmentAbbreviation(\"\");\n                setIsModalOpen(true);\n              }}\n              className=\"btn-primary\"\n            >\n              <Plus size={18} />\n              Add Department\n            </button>\n          }\n        />\n      ) : (\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Department Name</th>\n                <th>Abbreviation</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {departments.map((d) => (\n                <tr key={d.id}>\n                  <td className=\"font-medium\">{d.name}</td>\n                  <td>{d.abbreviation}</td>\n                  <td>\n                    <div className=\"flex items-center gap-2\">\n                      <button\n                        onClick={() => {\n                          setEditingDepartment(d);\n                          setDepartmentName(d.name);\n                          setDepartmentAbbreviation(d.abbreviation);\n                          setIsModalOpen(true);\n                        }}\n                        className=\"p-2 rounded-lg transition-colors hover:bg-[var(--hover-overlay)]\"\n                        style={{ color: \"var(--text-secondary)\" }}\n                        aria-label=\"Edit\"\n                      >\n                        <Edit2 size={16} />\n                      </button>\n                      <button\n                        onClick={() => {\n                          setDepartmentToDelete(d);\n                          setShowDeleteModal(true);\n                        }}\n                        type=\"button\"\n                        className=\"p-2 rounded-lg transition-colors\"\n                        style={{ color: \"var(--danger)\" }}\n                        onMouseEnter={(e) => e.currentTarget.style.background = \"var(--danger-light)\"}\n                        onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                        aria-label=\"Delete\"\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {/* Modal */}\n      {isModalOpen && (\n        <div className=\"modal-overlay\" onClick={() => setIsModalOpen(false)}>\n          <div role=\"dialog\" aria-modal=\"true\" className=\"modal-content w-full max-w-md p-6\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n                  {editingDepartment ? \"Edit Department\" : \"Add New Department\"}\n                </h3>\n                <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n                  Enter department details below.\n                </p>\n              </div>\n              <button \n                onClick={() => setIsModalOpen(false)} \n                className=\"p-2 rounded-lg transition-colors hover:bg-[var(--hover-overlay)]\" \n                style={{ color: \"var(--text-secondary)\" }}\n                aria-label=\"Close modal\"\n              >\n                â\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <label className=\"form-label\">Department Name</label>\n                <input \n                  value={departmentName} \n                  onChange={(e) => setDepartmentName(e.target.value)} \n                  className=\"input-field\" \n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">Abbreviation</label>\n                <input \n                  value={departmentAbbreviation} \n                  onChange={(e) => setDepartmentAbbreviation(e.target.value)} \n                  className=\"input-field\"\n                  required \n                />\n              </div>\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <button type=\"button\" onClick={() => setIsModalOpen(false)} className=\"btn-outline\">\n                  Cancel\n                </button>\n                <button type=\"submit\" disabled={isSubmitting} className=\"btn-primary\">\n                  {isSubmitting ? \"Saving...\" : \"Save\"}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      <ConfirmationModal\n        open={showDeleteModal}\n        title=\"Confirm Deletion\"\n        description={`Are you sure you want to delete the department \"${departmentToDelete?.name}\"? This action cannot be undone.`}\n        confirmLabel=\"Delete\"\n        cancelLabel=\"Cancel\"\n        loading={isSubmitting}\n        onCancel={() => {\n          setShowDeleteModal(false);\n          setDepartmentToDelete(null);\n        }}\n        onConfirm={() => handleDelete(departmentToDelete?.id)}\n      />\n    </div>\n  );\n}\n","size_bytes":9990},"src/app/api/hod/release-status/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, feedbackService, assignmentService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff) return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n\n    // Check the first feedback in the department to infer release status\n    // Get all staff in department, then their assignments, then feedback\n    const deptStaff = await staffService.findMany({ where: { departmentId: staff.departmentId } });\n    const staffIds = deptStaff.map(s => s.id);\n    const deptAssignments = await assignmentService.findMany({});\n    const relevantAssignments = deptAssignments.filter(a => staffIds.includes(a.staffId));\n    const assignmentIds = relevantAssignments.map(a => a.id);\n    \n    const allFeedback = await feedbackService.findMany({});\n    const deptFeedback = allFeedback.filter(f => assignmentIds.includes(f.assignmentId));\n    const firstFeedback = deptFeedback.length > 0 ? deptFeedback[0] : null;\n\n    const isReleased = firstFeedback ? firstFeedback.isReleased : false;\n    return NextResponse.json({ isReleased });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch release status\" }, { status: 500 });\n  }\n}\n\nexport async function PATCH(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const body = await request.json();\n    const { shouldBeReleased } = body || {};\n    if (typeof shouldBeReleased !== 'boolean') return NextResponse.json({ error: 'shouldBeReleased must be boolean' }, { status: 400 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff) return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n\n    // Get all staff in department, then their assignments, then bulk update feedback\n    const deptStaff = await staffService.findMany({ where: { departmentId: staff.departmentId } });\n    const staffIds = deptStaff.map(s => s.id);\n    const deptAssignments = await assignmentService.findMany({});\n    const relevantAssignments = deptAssignments.filter(a => staffIds.includes(a.staffId));\n    const assignmentIds = relevantAssignments.map(a => a.id);\n    \n    // Update all feedback for these assignments\n    const allFeedback = await feedbackService.findMany({});\n    const feedbackToUpdate = allFeedback.filter(f => assignmentIds.includes(f.assignmentId));\n    \n    // Update each feedback individually\n    let updated = 0;\n    for (const fb of feedbackToUpdate) {\n      await feedbackService.updateMany({ assignmentId: fb.assignmentId, studentId: fb.studentId }, { isReleased: shouldBeReleased });\n      updated++;\n    }\n\n    return NextResponse.json({ success: true, updated, isReleased: shouldBeReleased });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update release status\" }, { status: 500 });\n  }\n}\n","size_bytes":3700},"src/app/api/assignments/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService, userService } from \"@/lib/mongodb-services\";\n\nconst CURRENT_SEMESTER = \"Odd 2025-26\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    // Fetch all staff from all departments to allow cross-departmental assignments\n    const staff = await staffService.findMany({});\n\n    // Manually fetch user and assignments for each staff member\n    const result = await Promise.all(\n      staff.map(async (s: any) => {\n        const user = await userService.findUnique({ id: s.userId });\n        const assignments = await assignmentService.findMany({\n          where: { staffId: s.id, semester: CURRENT_SEMESTER },\n        });\n        \n        return {\n          id: s.id,\n          user: user,\n          subjectIds: assignments.map((a: any) => a.subjectId),\n        };\n      })\n    );\n\n    return NextResponse.json(result);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch assignments\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    console.log(\"API /assignments POST received body:\", body);\n\n    const staffId = body?.staffId as string | undefined;\n    const subjectIds = Array.isArray(body?.subjectIds) ? body.subjectIds : [];\n    const semester = body?.semester ?? CURRENT_SEMESTER;\n\n    if (!staffId) {\n      return NextResponse.json({ error: \"Invalid payload: staffId required\" }, { status: 400 });\n    }\n\n    console.log(\"API /assignments POST for staffId\", staffId, { subjectIds, semester });\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    const staffRecord = await staffService.findUnique({ where: { id: staffId } });\n    if (!staffRecord) return NextResponse.json({ error: \"Staff not found\" }, { status: 404 });\n\n    // Allow cross-departmental faculty assignments (removed department restriction)\n\n    const createData = subjectIds.map((subjId: string) => ({ staffId, subjectId: subjId, semester }));\n\n    console.log(\"API /assignments POST - deleting existing assignments for staffId\", staffId, \"semester\", semester);\n    const deleteResult = await assignmentService.deleteMany({ staffId, semester });\n    console.log(\"API /assignments POST - deleteMany result:\", deleteResult);\n\n    let createResult = null;\n    if (createData.length) {\n      console.log(\"API /assignments POST - creating assignments\", createData.length, \"rows\");\n      createResult = await assignmentService.createMany({ data: createData });\n      console.log(\"API /assignments POST - createMany result:\", createResult);\n    } else {\n      console.log(\"API /assignments POST - no subjects provided; skipped createMany\");\n    }\n\n    return NextResponse.json({ success: true, deleted: deleteResult.count, created: createResult?.count ?? 0 });\n  } catch (error: any) {\n    console.error(\"API /assignments POST error:\", error);\n    return NextResponse.json({ error: error?.message || \"Failed to save assignments\" }, { status: 500 });\n  }\n}\n","size_bytes":4038},"src/app/(dashboard)/student/dashboard/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { ClipboardList, CheckCircle2, FileText } from \"lucide-react\";\nimport { PageHeader } from \"@/components/page-header\";\nimport { EmptyState } from \"@/components/empty-state\";\nimport { SkeletonTaskCard } from \"@/components/skeletons\";\n\ntype Task = { assignmentId: string; facultyName: string; subjectName: string; status: string };\n\nexport default function StudentDashboard(): React.ReactElement {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [currentSemester, setCurrentSemester] = useState<string>(\"Semester 2025-26\");\n\n  useEffect(() => {\n    fetchTasks();\n    fetchSemester();\n  }, []);\n\n  async function fetchSemester() {\n    try {\n      const res = await fetch(\"/api/admin/semester-settings\");\n      if (res.ok) {\n        const data = await res.json();\n        setCurrentSemester(data.semesterString || \"Semester 2025-26\");\n      }\n    } catch (err) {\n      console.error(\"Failed to fetch semester:\", err);\n    }\n  }\n\n  async function fetchTasks() {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/student/tasks\");\n      const data = await res.json();\n      if (!res.ok) {\n        const message = data?.error || JSON.stringify(data);\n        throw new Error(message || \"Failed to fetch tasks\");\n      }\n      setTasks(data || []);\n    } catch (err) {\n      console.error(err);\n      setError((err as Error).message || \"Failed to fetch tasks\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  if (loading) {\n    return (\n      <div>\n        <PageHeader \n          title=\"My Feedback Tasks\" \n          description={currentSemester} \n        />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n          <SkeletonTaskCard />\n          <SkeletonTaskCard />\n          <SkeletonTaskCard />\n          <SkeletonTaskCard />\n          <SkeletonTaskCard />\n          <SkeletonTaskCard />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader \n        title=\"My Feedback Tasks\" \n        description={currentSemester} \n      />\n\n      {error ? (\n        <div className=\"card content-spacing\">\n          <div className=\"flex items-center gap-3 text-red-600 dark:text-red-400\">\n            <div className=\"flex-shrink-0\">â </div>\n            <div>{error}</div>\n          </div>\n        </div>\n      ) : tasks.length === 0 ? (\n        <EmptyState\n          icon={<ClipboardList size={48} />}\n          title=\"No feedback tasks\"\n          description=\"You have no pending feedback tasks at the moment. Check back later when tasks are assigned.\"\n        />\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n          {tasks.map((t) => (\n            <article key={t.assignmentId} className=\"card content-spacing flex flex-col gap-4\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"p-2 rounded-lg\" style={{ background: \"var(--primary-light)\" }}>\n                  <FileText size={20} style={{ color: \"var(--primary)\" }} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-xs font-medium mb-1\" style={{ color: \"var(--text-muted)\" }}>\n                    Faculty\n                  </div>\n                  <div className=\"font-semibold text-base truncate\" style={{ color: \"var(--text-primary)\" }}>\n                    {t.facultyName}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n                Subject: <span className=\"font-medium\" style={{ color: \"var(--text-primary)\" }}>{t.subjectName}</span>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 mt-auto pt-3 border-t\" style={{ borderColor: \"var(--card-border)\" }}>\n                {t.status === \"Pending\" ? (\n                  <Link\n                    href={`/student/feedback/${t.assignmentId}`}\n                    className=\"btn-primary w-full sm:w-auto\"\n                  >\n                    Start Feedback\n                  </Link>\n                ) : (\n                  <div className=\"inline-flex items-center gap-2 px-3 py-1.5 rounded-full bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400\">\n                    <CheckCircle2 size={16} />\n                    <span className=\"text-sm font-medium\">Completed</span>\n                  </div>\n                )}\n              </div>\n            </article>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4769},"src/components/theme-toggle.tsx":{"content":"\"use client\";\n\nimport { Moon, Sun } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = stored || (prefersDark ? \"dark\" : \"light\");\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n    setMounted(true);\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  // Render placeholder on server and until mounted on client\n  if (!mounted) {\n    return (\n      <div className=\"w-10 h-10\" suppressHydrationWarning />\n    );\n  }\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"w-10 h-10 flex items-center justify-center rounded-xl transition-all duration-200\"\n      style={{\n        background: \"transparent\",\n      }}\n      onMouseEnter={(e) => e.currentTarget.style.background = \"var(--hover-overlay)\"}\n      onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n      title={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n    >\n      {theme === \"light\" ? (\n        <Moon size={20} style={{ color: \"var(--text-secondary)\" }} />\n      ) : (\n        <Sun size={20} style={{ color: \"var(--text-secondary)\" }} />\n      )}\n    </button>\n  );\n}\n","size_bytes":1790},"src/components/modern-sidebar.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport {\n  LayoutDashboard,\n  Building2,\n  Users,\n  User,\n  Book,\n  Clipboard,\n  LogOut,\n  ClipboardList,\n  GraduationCap,\n  School,\n  ChevronLeft,\n  ChevronRight,\n  MoreHorizontal,\n  Briefcase,\n  FileText,\n  Calendar,\n} from \"lucide-react\";\nimport ThemeToggle from \"./theme-toggle\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\ntype NavItem = {\n  href: string;\n  label: string;\n  icon: React.ReactNode;\n  group?: string;\n};\n\nconst adminLinks: NavItem[] = [\n  { href: \"/admin\", label: \"Dashboard\", icon: <LayoutDashboard size={20} /> },\n  { href: \"/admin/semester-settings\", label: \"Semester Settings\", icon: <Calendar size={20} /> },\n  { href: \"/admin/departments\", label: \"Departments\", icon: <Building2 size={20} /> },\n  { href: \"/admin/years\", label: \"Academic Years\", icon: <GraduationCap size={20} /> },\n  { href: \"/admin/hods\", label: \"HOD Management\", icon: <Users size={20} /> },\n  { href: \"/admin/staff\", label: \"Staff Management\", icon: <User size={20} /> },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={20} /> },\n];\n\nconst hodLinks: NavItem[] = [\n  { href: \"/hod/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard size={20} /> },\n  { href: \"/hod/subjects\", label: \"Subject Management\", icon: <Book size={20} />, group: \"management\" },\n  { href: \"/hod/students\", label: \"Student Management\", icon: <School size={20} />, group: \"management\" },\n  { href: \"/hod/assignment\", label: \"Faculty Assignment\", icon: <ClipboardList size={20} /> },\n  { href: \"/hod/reports\", label: \"Feedback Reports\", icon: <Clipboard size={20} />, group: \"reports\" },\n  { href: \"/hod/submission-status\", label: \"Submission Status\", icon: <FileText size={20} />, group: \"reports\" },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={20} />, group: \"more\" },\n];\n\nconst studentLinks: NavItem[] = [\n  { href: \"/student/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard size={20} /> },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={20} /> },\n];\n\nconst staffLinks: NavItem[] = [\n  { href: \"/faculty/report\", label: \"Dashboard\", icon: <LayoutDashboard size={20} /> },\n  { href: \"/profile\", label: \"My Profile\", icon: <User size={20} /> },\n];\n\nexport default function ModernSidebar({ \n  collapsed, \n  setCollapsed \n}: { \n  collapsed: boolean; \n  setCollapsed: (value: boolean) => void;\n}) {\n  const pathname = usePathname() || \"/\";\n  const { data: session } = useSession();\n  const role = (session as any)?.user?.role;\n  const userName = (session as any)?.user?.name;\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [mobileGroupOpen, setMobileGroupOpen] = useState<string | null>(null);\n\n  const links = role === \"HOD\" ? hodLinks : role === \"STUDENT\" ? studentLinks : (role === \"STAFF\" || role === \"FACULTY\") ? staffLinks : adminLinks;\n\n  const bestMatch = links.reduce<string | null>((best, l) => {\n    if (!l.href) return best;\n    if (pathname === l.href || pathname.startsWith(l.href + \"/\")) {\n      if (!best) return l.href;\n      return l.href.length > best.length ? l.href : best;\n    }\n    return best;\n  }, null);\n\n  // For HOD mobile view, create grouped tabs\n  const getMobileTabsForHOD = () => {\n    return [\n      { href: \"/hod/dashboard\", label: \"Dashboard\", icon: <LayoutDashboard size={20} />, type: \"link\" as const },\n      { href: \"#\", label: \"Manage\", icon: <Briefcase size={20} />, type: \"group\" as const, groupKey: \"management\" },\n      { href: \"/hod/assignment\", label: \"Assign\", icon: <ClipboardList size={20} />, type: \"link\" as const },\n      { href: \"#\", label: \"Reports\", icon: <FileText size={20} />, type: \"group\" as const, groupKey: \"reports\" },\n      { href: \"#\", label: \"More\", icon: <MoreHorizontal size={20} />, type: \"menu\" as const },\n    ];\n  };\n\n  const mobileTabsHOD = role === \"HOD\" ? getMobileTabsForHOD() : null;\n\n  const getGroupItems = (groupKey: string) => {\n    return links.filter(link => link.group === groupKey);\n  };\n\n  const isActiveInGroup = (groupKey: string) => {\n    return links.some(link => link.group === groupKey && bestMatch === link.href);\n  };\n\n  const getRoleTitle = () => {\n  if (role === \"HOD\") return \"HOD Portal\";\n  if (role === \"STUDENT\") return \"Student Portal\";\n  if (role === \"STAFF\" || role === \"FACULTY\") return \"Faculty Portal\";\n  return \"Admin Portal\";\n  };\n\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <aside\n        className={`hidden md:flex flex-col fixed left-0 top-0 h-screen border-r transition-all duration-300 ease-out z-40 ${\n          collapsed ? \"w-20\" : \"w-64\"\n        }`}\n        style={{\n          background: \"var(--sidebar-bg)\",\n          borderColor: \"var(--sidebar-border)\",\n        }}\n      >\n        {/* Collapse Button - Top Right Edge */}\n        <button\n          onClick={() => setCollapsed(!collapsed)}\n          className=\"absolute top-6 -right-3 w-6 h-6 rounded-full flex items-center justify-center shadow-lg transition-all duration-200 z-50\"\n          style={{ \n            background: \"var(--primary)\",\n            color: \"white\"\n          }}\n          onMouseEnter={(e) => {\n            e.currentTarget.style.transform = \"scale(1.1)\";\n            e.currentTarget.style.boxShadow = \"var(--shadow-lg)\";\n          }}\n          onMouseLeave={(e) => {\n            e.currentTarget.style.transform = \"scale(1)\";\n            e.currentTarget.style.boxShadow = \"var(--shadow-md)\";\n          }}\n          aria-label={collapsed ? \"Expand sidebar\" : \"Collapse sidebar\"}\n        >\n          {collapsed ? <ChevronRight size={16} /> : <ChevronLeft size={16} />}\n        </button>\n\n        {/* Header */}\n        <div className=\"flex items-center justify-between px-4 h-16 border-b shrink-0\" style={{ borderColor: \"var(--sidebar-border)\" }}>\n          {!collapsed && (\n            <div className=\"flex items-center gap-3 overflow-hidden\">\n              <div\n                className=\"w-10 h-10 rounded-xl flex items-center justify-center text-white font-bold text-sm shadow-sm shrink-0\"\n                style={{ background: \"var(--primary)\" }}\n              >\n                SP\n              </div>\n              <div className=\"overflow-hidden\">\n                <div className=\"text-sm font-semibold truncate\" style={{ color: \"var(--text-primary)\" }}>\n                  {getRoleTitle()}\n                </div>\n                <div className=\"text-xs truncate\" style={{ color: \"var(--text-muted)\" }}>\n                  {userName || \"SPIOT\"}\n                </div>\n              </div>\n            </div>\n          )}\n          {collapsed && (\n            <div\n              className=\"w-10 h-10 rounded-xl flex items-center justify-center text-white font-bold text-sm mx-auto shadow-sm\"\n              style={{ background: \"var(--primary)\" }}\n            >\n              SP\n            </div>\n          )}\n        </div>\n\n        {/* Navigation */}\n        <nav className={`flex-1 overflow-y-auto py-4 ${collapsed ? \"px-2\" : \"px-3\"}`}>\n          <div className=\"space-y-1\">\n            {links.filter(link => !link.group || link.group === \"management\" || link.group === \"reports\").map((item) => {\n              const isActive = !!bestMatch && item.href === bestMatch;\n              return (\n                <Link \n                  key={item.href} \n                  href={item.href} \n                  className={isActive ? \"nav-link-active\" : \"nav-link\"} \n                  title={collapsed ? item.label : \"\"}\n                >\n                  <span className=\"shrink-0\">{item.icon}</span>\n                  {!collapsed && <span className=\"truncate\">{item.label}</span>}\n                </Link>\n              );\n            })}\n          </div>\n        </nav>\n\n        {/* Footer */}\n        <div className={`border-t p-3 space-y-2 shrink-0`} style={{ borderColor: \"var(--sidebar-border)\" }}>\n          <div className=\"flex items-center justify-center\">\n            <ThemeToggle />\n          </div>\n          <button \n            onClick={async () => {\n              await signOut({ redirect: false });\n              window.location.href = \"/login\";\n            }}\n            className=\"nav-link w-full justify-center\" \n            title={collapsed ? \"Logout\" : \"\"}\n          >\n            <span className=\"shrink-0\">\n              <LogOut size={20} />\n            </span>\n            {!collapsed && <span>Logout</span>}\n          </button>\n        </div>\n      </aside>\n\n      {/* Mobile Bottom Tab Bar */}\n      {role === \"HOD\" && mobileTabsHOD ? (\n        <nav\n          className=\"md:hidden fixed bottom-0 left-0 right-0 border-t z-50 safe-area-inset-bottom\"\n          style={{\n            background: \"var(--sidebar-bg)\",\n            borderColor: \"var(--sidebar-border)\",\n            boxShadow: \"var(--shadow-md)\",\n          }}\n        >\n          <div className=\"flex items-center justify-around h-16 px-2\">\n            {mobileTabsHOD.map((tab, idx) => {\n              if (tab.type === \"link\") {\n                const isActive = bestMatch === tab.href;\n                return (\n                  <Link\n                    key={idx}\n                    href={tab.href}\n                    className=\"flex flex-col items-center justify-center gap-1 px-3 py-2 rounded-lg transition-all duration-200 min-w-0 flex-1\"\n                    style={{\n                      color: isActive ? \"var(--primary)\" : \"var(--text-secondary)\",\n                    }}\n                  >\n                    <span className=\"shrink-0\">{tab.icon}</span>\n                    <span className=\"text-xs font-medium truncate w-full text-center\">{tab.label}</span>\n                  </Link>\n                );\n              } else if (tab.type === \"group\") {\n                const isActive = isActiveInGroup(tab.groupKey!);\n                return (\n                  <button\n                    key={idx}\n                    onClick={() => setMobileGroupOpen(mobileGroupOpen === tab.groupKey ? null : tab.groupKey!)}\n                    className=\"flex flex-col items-center justify-center gap-1 px-3 py-2 rounded-lg transition-all duration-200 min-w-0 flex-1\"\n                    style={{\n                      color: isActive || mobileGroupOpen === tab.groupKey ? \"var(--primary)\" : \"var(--text-secondary)\",\n                    }}\n                  >\n                    <span className=\"shrink-0\">{tab.icon}</span>\n                    <span className=\"text-xs font-medium truncate w-full text-center\">{tab.label}</span>\n                  </button>\n                );\n              } else {\n                return (\n                  <button\n                    key={idx}\n                    onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                    className=\"flex flex-col items-center justify-center gap-1 px-3 py-2 rounded-lg transition-all duration-200 min-w-0 flex-1\"\n                    style={{\n                      color: mobileMenuOpen ? \"var(--primary)\" : \"var(--text-secondary)\",\n                    }}\n                  >\n                    <span className=\"shrink-0\">{tab.icon}</span>\n                    <span className=\"text-xs font-medium truncate w-full text-center\">{tab.label}</span>\n                  </button>\n                );\n              }\n            })}\n          </div>\n        </nav>\n      ) : (\n        <nav\n          className=\"md:hidden fixed bottom-0 left-0 right-0 border-t z-50 safe-area-inset-bottom\"\n          style={{\n            background: \"var(--sidebar-bg)\",\n            borderColor: \"var(--sidebar-border)\",\n            boxShadow: \"var(--shadow-md)\",\n          }}\n        >\n          <div className=\"flex items-center justify-around h-16\">\n            {links.slice(0, 3).map((item) => {\n              const isActive = !!bestMatch && item.href === bestMatch;\n              return (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className=\"flex flex-col items-center justify-center gap-1 px-3 py-2 rounded-lg transition-all duration-200 min-w-0 flex-1\"\n                  style={{\n                    color: isActive ? \"var(--primary)\" : \"var(--text-secondary)\",\n                  }}\n                >\n                  <span className=\"shrink-0\">{item.icon}</span>\n                  <span className=\"text-xs font-medium truncate w-full text-center\">{item.label.split(\" \")[0]}</span>\n                </Link>\n              );\n            })}\n            <button\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              className=\"flex flex-col items-center justify-center gap-1 px-3 py-2 rounded-lg transition-all duration-200 min-w-0 flex-1\"\n              style={{\n                color: mobileMenuOpen ? \"var(--primary)\" : \"var(--text-secondary)\",\n              }}\n            >\n              <MoreHorizontal size={20} />\n              <span className=\"text-xs font-medium\">More</span>\n            </button>\n          </div>\n        </nav>\n      )}\n\n      {/* Mobile Group Sheet for HOD */}\n      {mobileGroupOpen && role === \"HOD\" && (\n        <div\n          className=\"md:hidden fixed inset-0 bg-black bg-opacity-60 z-[60] fade-in backdrop-blur-sm\"\n          onClick={() => setMobileGroupOpen(null)}\n        >\n          <div\n            className=\"absolute bottom-16 left-0 right-0 rounded-t-3xl p-6 slide-up\"\n            style={{ background: \"var(--card-bg)\", maxHeight: \"60vh\", overflowY: \"auto\" }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"w-12 h-1.5 rounded-full mx-auto mb-6\" style={{ background: \"var(--text-muted)\", opacity: 0.3 }}></div>\n            <h3 className=\"text-lg font-bold mb-4\" style={{ color: \"var(--text-primary)\" }}>\n              {mobileGroupOpen === \"management\" ? \"Management\" : \"Reports\"}\n            </h3>\n            <div className=\"space-y-2\">\n              {getGroupItems(mobileGroupOpen).map((item) => {\n                const isActive = bestMatch === item.href;\n                return (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    onClick={() => setMobileGroupOpen(null)}\n                    className=\"flex items-center gap-3 p-4 rounded-xl transition-all\"\n                    style={{\n                      background: isActive ? \"var(--primary-light)\" : \"transparent\",\n                      color: isActive ? \"var(--primary)\" : \"var(--text-primary)\",\n                    }}\n                    onMouseEnter={(e) => !isActive && (e.currentTarget.style.background = \"var(--hover-overlay)\")}\n                    onMouseLeave={(e) => !isActive && (e.currentTarget.style.background = \"transparent\")}\n                  >\n                    <span>{item.icon}</span>\n                    <span className=\"font-medium\">{item.label}</span>\n                  </Link>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Mobile More Menu */}\n      {mobileMenuOpen && (\n        <div\n          className=\"md:hidden fixed inset-0 bg-black bg-opacity-60 z-[60] fade-in backdrop-blur-sm\"\n          onClick={() => setMobileMenuOpen(false)}\n        >\n          <div\n            className=\"absolute bottom-16 left-0 right-0 rounded-t-3xl p-6 slide-up\"\n            style={{ background: \"var(--card-bg)\", maxHeight: \"60vh\", overflowY: \"auto\" }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"w-12 h-1.5 rounded-full mx-auto mb-6\" style={{ background: \"var(--text-muted)\", opacity: 0.3 }}></div>\n            <h3 className=\"text-lg font-bold mb-4\" style={{ color: \"var(--text-primary)\" }}>\n              More Options\n            </h3>\n            <div className=\"space-y-2\">\n              {role === \"HOD\" ? (\n                <>\n                  {getGroupItems(\"more\").map((item) => (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      onClick={() => setMobileMenuOpen(false)}\n                      className=\"flex items-center gap-3 p-4 rounded-xl transition-all\"\n                      style={{ color: \"var(--text-primary)\" }}\n                      onMouseEnter={(e) => e.currentTarget.style.background = \"var(--hover-overlay)\"}\n                      onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                    >\n                      <span>{item.icon}</span>\n                      <span className=\"font-medium\">{item.label}</span>\n                    </Link>\n                  ))}\n                  <div className=\"flex items-center justify-between p-4 rounded-xl\" style={{ background: \"var(--hover-overlay)\" }}>\n                    <div className=\"flex items-center gap-3\">\n                      <span style={{ color: \"var(--text-secondary)\" }} className=\"font-medium\">Theme</span>\n                    </div>\n                    <ThemeToggle />\n                  </div>\n                  <button\n                    onClick={() => {\n                      setMobileMenuOpen(false);\n                      signOut({ callbackUrl: \"/login\" });\n                    }}\n                    className=\"flex items-center gap-3 p-4 rounded-xl transition-all w-full text-left\"\n                    style={{ color: \"var(--danger)\" }}\n                    onMouseEnter={(e) => e.currentTarget.style.background = \"var(--danger-light)\"}\n                    onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                  >\n                    <LogOut size={20} />\n                    <span className=\"font-medium\">Logout</span>\n                  </button>\n                </>\n              ) : (\n                <>\n                  {links.slice(3).map((item) => (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      onClick={() => setMobileMenuOpen(false)}\n                      className=\"flex items-center gap-3 p-4 rounded-xl transition-all\"\n                      style={{ color: \"var(--text-primary)\" }}\n                      onMouseEnter={(e) => e.currentTarget.style.background = \"var(--hover-overlay)\"}\n                      onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                    >\n                      <span>{item.icon}</span>\n                      <span className=\"font-medium\">{item.label}</span>\n                    </Link>\n                  ))}\n                  <div className=\"flex items-center justify-between p-4 rounded-xl\" style={{ background: \"var(--hover-overlay)\" }}>\n                    <div className=\"flex items-center gap-3\">\n                      <span style={{ color: \"var(--text-secondary)\" }} className=\"font-medium\">Theme</span>\n                    </div>\n                    <ThemeToggle />\n                  </div>\n                  <button\n                    onClick={() => {\n                      setMobileMenuOpen(false);\n                      signOut({ callbackUrl: \"/login\" });\n                    }}\n                    className=\"flex items-center gap-3 p-4 rounded-xl transition-all w-full text-left\"\n                    style={{ color: \"var(--danger)\" }}\n                    onMouseEnter={(e) => e.currentTarget.style.background = \"var(--danger-light)\"}\n                    onMouseLeave={(e) => e.currentTarget.style.background = \"transparent\"}\n                  >\n                    <LogOut size={20} />\n                    <span className=\"font-medium\">Logout</span>\n                  </button>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":19688},"replit.md":{"content":"# SPIOT Feedback Portal\n\n## Project Overview\nA comprehensive Student Feedback Portal for Sharadchandra Pawar Institute of Technology (SPIOT), a diploma college. The system manages feedback collection, analysis, and reporting across multiple user roles with support for diploma program structure (6 semesters).\n\n**Technology Stack:**\n- Frontend: Next.js 14+ with React\n- Backend: Next.js API Routes\n- Database: MongoDB\n- Authentication: NextAuth.js\n- Styling: Tailwind CSS with custom design system\n- PDF Generation: pdf-lib\n- Charts: Recharts\n\n## User Roles\n1. **Admin** - System-wide settings, semester management, user management\n2. **HOD (Head of Department)** - Faculty assignments, subject management, report viewing, HOD suggestions\n3. **Faculty/Staff** - View own feedback reports and download PDFs\n4. **Student** - Submit feedback for assigned faculty\n\n## Recent Changes (October 22, 2025)\n\n### 1. Mobile Logout Fix â\n**Issue:** Students and other roles couldn't access logout on mobile devices\n**Solution:** Added logout button to the \"More\" menu in the mobile sidebar for all roles\n**Files Modified:**\n- `src/components/modern-sidebar.tsx` - Added logout option to mobile menu\n\n### 2. Dynamic Semester Management System â\n**Feature:** Admin can now configure current semester (1-6) with automatic odd/even detection and academic year formatting\n\n**Components Created:**\n- Admin settings page: `src/app/(dashboard)/admin/semester-settings/page.tsx`\n- API endpoint: `src/app/api/admin/semester-settings/route.ts`\n- MongoDB service: Added `semesterSettingsService` in `src/lib/mongodb-services.ts`\n\n**Database Schema:**\n```javascript\n{\n  _id: ObjectId,\n  currentSemester: Number (1-6),\n  academicYear: String (e.g., \"2025-26\"),\n  semesterType: String (\"Odd\" or \"Even\"),\n  semesterString: String (e.g., \"Odd Semester 2025-26\"),\n  updatedAt: Date\n}\n```\n\n**Semester Logic:**\n- Semesters 1, 3, 5 = Odd\n- Semesters 2, 4, 6 = Even\n- Format: \"{Odd/Even} Semester {AcademicYear}\"\n\n### 3. Semester Field in Subjects â\n**Feature:** Subjects now include semester number (1-6) for proper organization\n\n**Changes:**\n- Added semester dropdown to HOD subject creation/editing UI\n- Updated subject API to validate and store semester (1-6)\n- Subjects are now organized by semester for better clarity\n\n**Files Modified:**\n- `src/app/(dashboard)/hod/subjects/page.tsx`\n- `src/app/api/subjects/route.ts`\n\n### 4. Dynamic Semester Integration â\n**Change:** Replaced all hardcoded semester references with dynamic fetching from settings\n\n**Pages Updated:**\n- HOD Assignment Page: Displays current semester in title, uses it for faculty assignments\n- Student Dashboard: Shows current semester in page header\n- All pages now fetch semester from `/api/admin/semester-settings`\n\n**Files Modified:**\n- `src/app/(dashboard)/hod/assignment/page.tsx`\n- `src/app/(dashboard)/student/dashboard/page.tsx`\n\n### 5. PDF Download Fix â\n**Issue:** Faculty PDF reports had MongoDB compatibility issues with `include: { feedbacks: true }`\n**Root Cause:** MongoDB service doesn't support including related feedbacks directly\n**Solution:** Changed to fetch feedbacks separately for each assignment using `feedbackService.findMany()`\n\n**Files Modified:**\n- `src/app/api/faculty/[staffId]/report.pdf/route.ts`\n\n**Performance Note:** Current N+1 query pattern is acceptable for typical faculty assignment counts. Future optimization available if needed via batch fetching.\n\n### 6. CustomSelect Component Fix â\n**Issue:** Import error for CustomSelect in semester settings page\n**Solution:** Changed from default import to named import `{ CustomSelect }`\n\n**Files Modified:**\n- `src/app/(dashboard)/admin/semester-settings/page.tsx`\n\n## Cross-Department Faculty Support\n**Status:** Already implemented and working correctly\n\nThe system fully supports faculty from different departments teaching subjects in other departments. HOD reports correctly include all faculty assigned to their department's subjects, regardless of the faculty member's home department.\n\n**Example:** A Mechanical Engineering faculty member can teach a subject in Computer Science, and they will appear in the Computer Science HOD's reports.\n\n## Project Structure\n\n```\nsrc/\nâââ app/\nâ   âââ (auth)/                    # Authentication pages\nâ   âââ (dashboard)/               # Protected dashboard pages\nâ   â   âââ admin/                 # Admin-only pages\nâ   â   â   âââ semester-settings/ # Semester configuration\nâ   â   âââ hod/                   # HOD pages\nâ   â   â   âââ assignment/        # Faculty-subject assignments\nâ   â   â   âââ subjects/          # Subject management\nâ   â   â   âââ reports/           # Faculty feedback reports\nâ   â   âââ faculty/               # Faculty pages\nâ   â   âââ student/               # Student pages\nâ   âââ api/                       # API routes\nâ       âââ auth/                  # NextAuth configuration\nâ       âââ admin/                 # Admin APIs\nâ       â   âââ semester-settings/ # Semester settings API\nâ       âââ subjects/              # Subject CRUD\nâ       âââ faculty/               # Faculty reports & PDFs\nâ       âââ hod/                   # HOD-specific APIs\nâ       âââ student/               # Student APIs\nâââ components/                    # Reusable React components\nâ   âââ modern-sidebar.tsx         # Responsive sidebar with mobile support\nâ   âââ custom-select.tsx          # Custom dropdown component\nâ   âââ ui-controls.tsx            # Button, Input, etc.\nâââ lib/\nâ   âââ mongodb-services.ts        # MongoDB data access layer\nâââ styles/                        # Global styles and themes\n```\n\n## MongoDB Collections\n\n1. **users** - All system users\n2. **departments** - Academic departments\n3. **staff** - Faculty/staff profiles\n4. **students** - Student profiles\n5. **academic_years** - Academic year records\n6. **subjects** - Course subjects with semester field\n7. **faculty_assignments** - Faculty-subject-semester mappings\n8. **feedback** - Student feedback submissions\n9. **hod_suggestions** - HOD suggestions to faculty\n10. **settings** - System settings including semester configuration\n\n## Development Notes\n\n### MongoDB Service Pattern\nThe project uses a custom MongoDB service layer (`mongodb-services.ts`) that mimics Prisma's API for consistency:\n- `findUnique({ where, include })` - Single record\n- `findMany({ where, include, orderBy })` - Multiple records\n- `create(data)` - Create record\n- `update({ where, data })` - Update record\n- `delete({ where })` - Delete record\n\n### Include Support\nNot all services support all `include` options. Check the service implementation before using nested includes. Example:\n- `assignmentService` supports `include.subject` and `include._count.feedback`\n- Does NOT support `include.feedbacks` (fetch separately using feedbackService)\n\n### Semester Management Workflow\n1. Admin sets current semester via Settings page\n2. System stores in MongoDB `settings` collection\n3. All pages fetch current semester from API\n4. HOD creates assignments for current semester\n5. Students see tasks for current semester\n6. Reports are semester-specific\n\n### Design System\nThe application uses CSS custom properties for theming:\n- `--primary` - Primary brand color (emerald)\n- `--bg-base`, `--bg-elevated` - Background colors\n- `--text-primary`, `--text-secondary`, `--text-muted` - Text colors\n- `--card-bg`, `--card-border` - Card styling\n- Supports light/dark mode switching\n\n## Deployment Considerations\n\n1. **MongoDB Connection:** Ensure MongoDB connection string is set in environment variables\n2. **NextAuth Secret:** Configure NEXTAUTH_SECRET for production\n3. **Initial Setup:** Admin should configure semester settings before faculty assignments\n4. **Data Seeding:** May need to seed initial semester settings for new deployments\n\n## Future Enhancements (Architect Suggestions)\n\n1. **PDF Performance:** If faculty assignment counts grow, consider batch-fetching feedbacks to avoid N+1 queries\n2. **AssignmentService:** Optionally extend to support `include.feedbacks` for better code reuse\n3. **Integration Tests:** Add tests for PDF generation with multiple assignments\n4. **Semester Initialization:** Auto-initialize semester settings on first deployment\n\n## User Preferences\n\n### Coding Standards\n- Use TypeScript for type safety\n- Follow Next.js 14+ App Router conventions\n- Keep MongoDB service layer consistent with Prisma-like API\n- Maintain mobile responsiveness across all pages\n- Support light/dark mode everywhere\n\n### File Organization\n- Group related functionality by feature/role\n- Keep API routes parallel to page structure\n- Centralize reusable components\n- Maintain clear separation between client and server components\n\n## Known Issues & Limitations\n\n1. **PDF N+1 Queries:** Current implementation fetches feedbacks per assignment (acceptable for typical usage, optimize if needed)\n2. **First-Run Setup:** Semester settings must be configured by admin before system is fully functional\n3. **WebSocket Warning:** Hot reload WebSocket connection warning in development (cosmetic only)\n\n## Contact & Support\n\nFor technical issues or questions about the SPIOT Feedback Portal, refer to:\n- Project documentation in this file\n- MongoDB service implementation in `src/lib/mongodb-services.ts`\n- API route structure in `src/app/api/`\n\n---\n\n**Last Updated:** October 22, 2025\n**Current Version:** Diploma Program Support with Dynamic Semester Management\n**Status:** Production Ready â\n","size_bytes":9697},"src/components/content-card.tsx":{"content":"import React from \"react\";\n\ntype ContentCardProps = {\n  children: React.ReactNode;\n  className?: string;\n  noPadding?: boolean;\n};\n\nexport function ContentCard({ children, className = \"\", noPadding = false }: ContentCardProps) {\n  return (\n    <div className={`card ${noPadding ? \"\" : \"content-spacing\"} ${className}`}>\n      {children}\n    </div>\n  );\n}\n\ntype ContentCardHeaderProps = {\n  title: string;\n  description?: string;\n  action?: React.ReactNode;\n};\n\nexport function ContentCardHeader({ title, description, action }: ContentCardHeaderProps) {\n  return (\n    <div className=\"card-header flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n      <div>\n        <h3 className=\"text-lg font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n          {title}\n        </h3>\n        {description && (\n          <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n            {description}\n          </p>\n        )}\n      </div>\n      {action && <div className=\"flex-shrink-0\">{action}</div>}\n    </div>\n  );\n}\n\nexport function ContentCardBody({ children, className = \"\" }: { children: React.ReactNode; className?: string }) {\n  return <div className={`card-body ${className}`}>{children}</div>;\n}\n\nexport function ContentCardFooter({ children, className = \"\" }: { children: React.ReactNode; className?: string }) {\n  return <div className={`card-footer ${className}`}>{children}</div>;\n}\n","size_bytes":1426},"src/components/page-header.tsx":{"content":"import React from \"react\";\n\ntype PageHeaderProps = {\n  title: string;\n  description?: string;\n  action?: React.ReactNode;\n  className?: string;\n};\n\nexport function PageHeader({ title, description, action, className = \"\" }: PageHeaderProps) {\n  return (\n    <div className={`page-header flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 ${className}`}>\n      <div>\n        <h1 className=\"page-title\">{title}</h1>\n        {description && <p className=\"page-description\">{description}</p>}\n      </div>\n      {action && <div className=\"flex-shrink-0\">{action}</div>}\n    </div>\n  );\n}\n\ntype SectionHeaderProps = {\n  title: string;\n  description?: string;\n  action?: React.ReactNode;\n  className?: string;\n};\n\nexport function SectionHeader({ title, description, action, className = \"\" }: SectionHeaderProps) {\n  return (\n    <div className={`flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4 ${className}`}>\n      <div>\n        <h2 className=\"section-title\">{title}</h2>\n        {description && <p className=\"text-sm\" style={{ color: \"var(--text-muted)\" }}>{description}</p>}\n      </div>\n      {action && <div className=\"flex-shrink-0\">{action}</div>}\n    </div>\n  );\n}\n","size_bytes":1206},"src/components/empty-state.tsx":{"content":"import React from \"react\";\n\ntype EmptyStateProps = {\n  icon: React.ReactNode;\n  title: string;\n  description?: string;\n  action?: React.ReactNode;\n  className?: string;\n};\n\nexport function EmptyState({ icon, title, description, action, className = \"\" }: EmptyStateProps) {\n  return (\n    <div className={`empty-state ${className}`}>\n      <div className=\"empty-state-icon\">{icon}</div>\n      <div className=\"empty-state-title\">{title}</div>\n      {description && <div className=\"empty-state-description\">{description}</div>}\n      {action && <div className=\"mt-4\">{action}</div>}\n    </div>\n  );\n}\n","size_bytes":598},"src/components/stat-card.tsx":{"content":"import React from \"react\";\n\ntype StatCardProps = {\n  title: string;\n  value: string | number;\n  icon: React.ReactNode;\n  iconBgColor?: string;\n  iconColor?: string;\n  trend?: {\n    value: number;\n    isPositive: boolean;\n  };\n  className?: string;\n};\n\nexport function StatCard({\n  title,\n  value,\n  icon,\n  iconBgColor = \"var(--primary-light)\",\n  iconColor = \"var(--primary)\",\n  trend,\n  className = \"\",\n}: StatCardProps) {\n  return (\n    <div className={`card p-6 hover-lift ${className}`}>\n      <div className=\"flex items-start gap-4\">\n        <div\n          className=\"p-3.5 rounded-xl flex items-center justify-center shrink-0 transition-transform duration-200\"\n          style={{ background: iconBgColor }}\n        >\n          <span style={{ color: iconColor }}>{icon}</span>\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium mb-1.5\" style={{ color: \"var(--text-secondary)\" }}>\n            {title}\n          </div>\n          <div className=\"text-2xl md:text-3xl font-bold mb-1\" style={{ color: \"var(--text-primary)\" }}>\n            {value}\n          </div>\n          {trend && (\n            <div \n              className=\"text-xs font-semibold inline-flex items-center gap-1 px-2 py-0.5 rounded-full\"\n              style={{\n                background: trend.isPositive ? \"var(--success-light)\" : \"var(--danger-light)\",\n                color: trend.isPositive ? \"var(--success)\" : \"var(--danger)\",\n              }}\n            >\n              <span>{trend.isPositive ? \"â\" : \"â\"}</span>\n              <span>{Math.abs(trend.value)}%</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1678},"src/lib/env-config.ts":{"content":"// Default environment configuration for zero-setup deployment\n// These values are used if environment variables are not set or are empty strings\n\n// Helper to get the correct database URL\nconst getDatabaseUrl = () => {\n  if (process.env.DATABASE_URL && process.env.DATABASE_URL.trim() !== \"\") {\n    return process.env.DATABASE_URL;\n  }\n  return process.env.DATABASE_URL_REPLIT || \"postgres://8423ec093c3a53c0c27d1c9ec71a462f96dc55b5ad31d81e7ee82f9ec99098c9:sk_pngJjThsF8zs08sVXH4R-@db.prisma.io:5432/postgres?sslmode=require\";\n};\n\n// Helper to get the correct NextAuth secret\nconst getNextAuthSecret = () => {\n  if (process.env.NEXTAUTH_SECRET && process.env.NEXTAUTH_SECRET.trim() !== \"\") {\n    return process.env.NEXTAUTH_SECRET;\n  }\n  return \"4M6PmUDdOTgSuDLaE1+9fAxJFnD0Jbxgklph8RqzheA=\";\n};\n\n// Helper to get the correct NextAuth URL\nconst getNextAuthUrl = () => {\n  if (process.env.NEXTAUTH_URL && process.env.NEXTAUTH_URL.trim() !== \"\") {\n    return process.env.NEXTAUTH_URL;\n  }\n  // Use Replit domain if available, otherwise fallback URL\n  const replitDomain = process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAINS;\n  if (replitDomain) {\n    return `https://${replitDomain}`;\n  }\n  return \"https://771ca17c-b5c4-45b1-9da6-e251ac4b9e9e-00-21v72j2xwgq2z.pike.replit.dev\";\n};\n\n// Set the environment variables\nprocess.env.DATABASE_URL = getDatabaseUrl();\nprocess.env.NEXTAUTH_SECRET = getNextAuthSecret();\nprocess.env.NEXTAUTH_URL = getNextAuthUrl();\n\nexport const config = {\n  databaseUrl: process.env.DATABASE_URL,\n  nextAuthSecret: process.env.NEXTAUTH_SECRET,\n  nextAuthUrl: process.env.NEXTAUTH_URL,\n};\n","size_bytes":1621},"src/app/hod/page.tsx":{"content":"import { redirect } from \"next/navigation\";\n\nexport default function HODPage() {\n  redirect(\"/hod/dashboard\");\n}\n","size_bytes":113},"src/app/api/hod/metrics/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, subjectService, userService, assignmentService, feedbackService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  const session = await getServerSession(authOptions);\n  if (!session?.user || (session.user as any).role !== \"HOD\") {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  try {\n    const userId = (session.user as any).id;\n    const staffProfile = await staffService.findFirst({\n      where: { userId },\n    });\n\n    if (!staffProfile) {\n      return NextResponse.json({ error: \"Staff profile not found\" }, { status: 404 });\n    }\n\n    const departmentId = staffProfile.departmentId;\n    const semester = \"Odd 2025-26\";\n\n    // Get all staff in department to filter assignments and feedback\n    const deptStaff = await staffService.findMany({ where: { departmentId } });\n    const staffIds = deptStaff.map(s => s.id);\n\n    // Get all assignments for this department in this semester\n    const allAssignments = await assignmentService.findMany({ where: { semester } });\n    const deptAssignments = allAssignments.filter(a => staffIds.includes(a.staffId));\n    const assignmentIds = deptAssignments.map(a => a.id);\n\n    // Get all feedback for these assignments\n    const allFeedback = await feedbackService.findMany({});\n    const deptFeedback = allFeedback.filter(f => assignmentIds.includes(f.assignmentId));\n\n    // OPTIMIZED: Run all counts in parallel\n    const [totalStaff, totalSubjects, totalStudents] = await Promise.all([\n      staffService.count({ departmentId }),\n      subjectService.count({}),\n      userService.count({ departmentId, role: \"STUDENT\" }),\n    ]);\n\n    const totalAssignments = deptAssignments.length;\n    const totalFeedbackSubmissions = deptFeedback.length;\n\n    return NextResponse.json({\n      staffCount: totalStaff,\n      subjectCount: totalSubjects,\n      studentCount: totalStudents,\n      totalStaff,\n      totalSubjects,\n      totalStudents,\n      totalAssignments,\n      totalFeedbackSubmissions,\n    });\n  } catch (error) {\n    console.error(\"Error fetching HOD metrics:\", error);\n    return NextResponse.json({ error: \"Failed to fetch metrics\" }, { status: 500 });\n  }\n}\n","size_bytes":2351},"src/components/custom-select.tsx":{"content":"\"use client\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { ChevronDown, Check } from \"lucide-react\";\n\ntype Option = {\n  value: string;\n  label: string;\n};\n\ntype CustomSelectProps = {\n  options: Option[];\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  label?: string;\n  className?: string;\n  disabled?: boolean;\n};\n\nexport function CustomSelect({\n  options,\n  value,\n  onChange,\n  placeholder = \"Select an option\",\n  label,\n  className = \"\",\n  disabled = false,\n}: CustomSelectProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const selectedOption = options.find((opt) => opt.value === value);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [isOpen]);\n\n  const handleSelect = (optionValue: string) => {\n    onChange(optionValue);\n    setIsOpen(false);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      e.preventDefault();\n      if (!disabled) {\n        setIsOpen(!isOpen);\n      }\n    } else if (e.key === \"Escape\") {\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <div className={`w-full ${className}`}>\n      {label && <label className=\"form-label\">{label}</label>}\n      <div className=\"relative\" ref={containerRef}>\n        <button\n          type=\"button\"\n          onClick={() => !disabled && setIsOpen(!isOpen)}\n          onKeyDown={handleKeyDown}\n          disabled={disabled}\n          className=\"input-field w-full flex items-center justify-between cursor-pointer\"\n          aria-haspopup=\"listbox\"\n          aria-expanded={isOpen}\n        >\n          <span style={{ color: selectedOption ? \"var(--text-primary)\" : \"var(--text-muted)\" }}>\n            {selectedOption?.label || placeholder}\n          </span>\n          <ChevronDown\n            size={16}\n            className={`transition-transform duration-200 ${isOpen ? \"rotate-180\" : \"\"}`}\n            style={{ color: \"var(--text-muted)\" }}\n          />\n        </button>\n\n        {isOpen && (\n          <div\n            className=\"absolute z-50 w-full mt-2 rounded-lg overflow-hidden shadow-lg fade-in\"\n            style={{\n              background: \"var(--card-bg)\",\n              border: \"1px solid var(--card-border)\",\n              maxHeight: \"240px\",\n              overflowY: \"auto\",\n            }}\n            role=\"listbox\"\n          >\n            {options.map((option) => (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => handleSelect(option.value)}\n                className=\"w-full px-4 py-2.5 text-left text-sm flex items-center justify-between transition-colors\"\n                style={{\n                  color: \"var(--text-primary)\",\n                  background: option.value === value ? \"var(--primary-light)\" : \"transparent\",\n                }}\n                onMouseEnter={(e) => {\n                  if (option.value !== value) {\n                    e.currentTarget.style.background = \"var(--hover-overlay)\";\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  if (option.value !== value) {\n                    e.currentTarget.style.background = \"transparent\";\n                  }\n                }}\n                role=\"option\"\n                aria-selected={option.value === value}\n              >\n                <span>{option.label}</span>\n                {option.value === value && (\n                  <Check size={16} style={{ color: \"var(--primary)\" }} />\n                )}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4016},"src/components/loading-overlay.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\n\nexport default function LoadingOverlay() {\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\" style={{ background: \"var(--background)\" }}>\n      <div className=\"flex flex-col items-center gap-4\">\n        <div \n          className=\"w-12 h-12 border-4 rounded-full animate-spin\"\n          style={{ \n            borderColor: \"var(--primary-light)\",\n            borderTopColor: \"var(--primary)\"\n          }}\n        />\n        <p className=\"text-sm font-medium\" style={{ color: \"var(--text-secondary)\" }}>\n          Loading...\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":643},"prisma/seed.ts":{"content":"import { PrismaClient } from '@prisma/client';\nimport bcrypt from 'bcrypt';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  console.log('ð± Seeding database...\\n');\n\n  try {\n    // Clear existing data\n    console.log('Clearing existing data...');\n    await prisma.feedback.deleteMany({});\n    await prisma.facultyAssignment.deleteMany({});\n    await prisma.hodSuggestion.deleteMany({});\n    await prisma.subject.deleteMany({});\n    await prisma.staff.deleteMany({});\n    await prisma.department.deleteMany({});\n    await prisma.academicYear.deleteMany({});\n    await prisma.account.deleteMany({});\n    await prisma.session.deleteMany({});\n    await prisma.user.deleteMany({});\n    console.log('â Database cleared\\n');\n\n    // Create admin user\n    console.log('Creating admin user...');\n    const hashedPassword = await bcrypt.hash('123', 10);\n\n    const admin = await prisma.user.create({\n      data: {\n        email: 'admin@gmail.com',\n        name: 'Administrator',\n        role: 'ADMIN',\n        hashedPassword,\n      },\n    });\n\n    console.log('â Admin user created successfully!');\n    console.log(`   ID: ${admin.id}`);\n    console.log(`   Email: ${admin.email}`);\n    console.log(`   Name: ${admin.name}`);\n    console.log(`   Role: ${admin.role}\\n`);\n\n    console.log('â Seeding complete!\\n');\n    console.log('Login credentials:');\n    console.log('   Email:    admin@gmail.com');\n    console.log('   Password: 123\\n');\n\n  } catch (error) {\n    console.error('â Error seeding database:', error);\n    throw error;\n  }\n}\n\nmain()\n  .catch((e) => {\n    console.error(e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n","size_bytes":1692},"prisma/migrations/migration_lock.toml":{"content":"# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n","size_bytes":128},"src/app/api/years/[id]/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { academicYearService } from \"@/lib/mongodb-services\";\n\nexport async function PATCH(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { name, abbreviation, departmentId } = body || {};\n    if (!name || !abbreviation) {\n      return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\n    }\n\n    const updated = await academicYearService.update(\n      { id: params.id },\n      { name, abbreviation, departmentId: departmentId || null }\n    );\n    return NextResponse.json(updated);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update academic year\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    await academicYearService.delete({ id: params.id });\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to delete academic year\" }, { status: 500 });\n  }\n}\n","size_bytes":1709},"src/middleware.ts":{"content":"import { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { getToken } from \"next-auth/jwt\";\n\nexport async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname;\n\n  // Allow public routes\n  if (\n    pathname === \"/login\" ||\n    pathname.startsWith(\"/api/auth\") ||\n    pathname.startsWith(\"/_next\") ||\n    pathname.startsWith(\"/favicon\")\n  ) {\n    return NextResponse.next();\n  }\n\n  // Get the token\n  const token = await getToken({\n    req: request,\n    secret: process.env.NEXTAUTH_SECRET,\n  });\n\n  // Redirect to login if no token\n  if (!token) {\n    const url = new URL(\"/login\", request.url);\n    return NextResponse.redirect(url);\n  }\n\n  // If logged in and trying to access login page, redirect to home\n  if (pathname === \"/login\") {\n    const url = new URL(\"/\", request.url);\n    return NextResponse.redirect(url);\n  }\n\n  // Role-based access control\n  const role = token.role as string;\n\n  // Admin routes\n  if (pathname.startsWith(\"/admin\") && role !== \"ADMIN\") {\n    const url = new URL(\"/\", request.url);\n    return NextResponse.redirect(url);\n  }\n\n  // HOD routes\n  if (pathname.startsWith(\"/hod\") && role !== \"HOD\") {\n    const url = new URL(\"/\", request.url);\n    return NextResponse.redirect(url);\n  }\n\n  // Faculty routes (accessible by both FACULTY and STAFF roles)\n  if (pathname.startsWith(\"/faculty\") && role !== \"FACULTY\" && role !== \"STAFF\") {\n    const url = new URL(\"/\", request.url);\n    return NextResponse.redirect(url);\n  }\n\n  // Student routes\n  if (pathname.startsWith(\"/student\") && role !== \"STUDENT\") {\n    const url = new URL(\"/\", request.url);\n    return NextResponse.redirect(url);\n  }\n\n  const response = NextResponse.next();\n  \n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n  \n  return response;\n}\n\n// Protect all routes except public ones\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except static files\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};\n","size_bytes":2348},"src/app/(dashboard)/admin/staff/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { Trash2, Pencil, Plus, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui-controls\";\nimport { SkeletonTable } from \"@/components/skeletons\";\nimport { CustomSelect } from \"@/components/custom-select\";\nimport toast from \"react-hot-toast\";\n\ntype Department = {\n  id: string;\n  name: string;\n  abbreviation?: string;\n};\n\ntype Staff = {\n  id: string;\n  user?: {\n    id: string;\n    name?: string | null;\n    email?: string | null;\n  } | null;\n  department?: Department | null;\n};\n\nexport default function ManageStaffPage(): React.ReactElement {\n  const [staff, setStaff] = useState<Staff[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingStaff, setEditingStaff] = useState<Staff | null>(null);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [departmentId, setDepartmentId] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  useEffect(() => {\n    fetchStaff();\n    fetchDepartments();\n  }, []);\n\n  async function fetchStaff() {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/staff\");\n      if (!res.ok) throw new Error(\"Failed to fetch staff\");\n      const data = await res.json();\n      setStaff(data);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function fetchDepartments() {\n    try {\n      const res = await fetch(\"/api/departments\");\n      if (!res.ok) throw new Error(\"Failed to fetch departments\");\n      const data = await res.json();\n      setDepartments(data);\n      if (data.length > 0) setDepartmentId(data[0].id);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleDelete = useCallback(async (id: string) => {\n    if (!confirm(\"Delete this staff member?\")) return;\n    try {\n      const res = await fetch(`/api/staff/${id}`, { method: \"DELETE\" });\n      if (!res.ok) throw new Error(\"Delete failed\");\n      setStaff((prev) => prev.filter((s) => s.id !== id));\n      toast.success(\"Staff member deleted successfully\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Delete failed\");\n    }\n  }, []);\n\n  const handleSubmit = useCallback(async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!name || !email || !departmentId) return;\n    if (!editingStaff && !password) {\n      toast.error(\"Password is required for new staff\");\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      if (editingStaff) {\n        const res = await fetch(`/api/staff/${editingStaff.id}`, {\n          method: \"PATCH\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, email, departmentId }),\n        });\n        if (!res.ok) {\n          const err = await res.json();\n          throw new Error(err?.error || \"Failed to update staff\");\n        }\n        await fetchStaff();\n        toast.success(\"Staff member updated successfully\");\n        setEditingStaff(null);\n      } else {\n        const res = await fetch(\"/api/staff\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ name, email, password, departmentId }),\n        });\n        if (!res.ok) {\n          const err = await res.json();\n          throw new Error(err?.error || \"Failed to create staff\");\n        }\n        await fetchStaff();\n        toast.success(\"Staff member created successfully\");\n      }\n\n      setIsModalOpen(false);\n      setName(\"\");\n      setEmail(\"\");\n      setPassword(\"\");\n    } catch (err) {\n      console.error(err);\n      toast.error((err as Error).message || \"Save failed\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [name, email, password, departmentId, editingStaff]);\n\n  const openCreateModal = useCallback(() => {\n    setEditingStaff(null);\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n    if (departments.length > 0) setDepartmentId(departments[0].id);\n    setIsModalOpen(true);\n  }, [departments]);\n\n  const openEditModal = useCallback((staffMember: Staff) => {\n    setEditingStaff(staffMember);\n    setName(staffMember.user?.name || \"\");\n    setEmail(staffMember.user?.email || \"\");\n    setPassword(\"\");\n    setDepartmentId(staffMember.department?.id || (departments.length > 0 ? departments[0].id : \"\"));\n    setIsModalOpen(true);\n  }, [departments]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n    setEditingStaff(null);\n    setName(\"\");\n    setEmail(\"\");\n    setPassword(\"\");\n  }, []);\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-2xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n          Staff Management\n        </h1>\n        <Button onClick={openCreateModal}>\n          <Plus size={16} className=\"mr-2\" />\n          Add Staff\n        </Button>\n      </div>\n\n      {loading ? (\n        <div className=\"table-wrapper\">\n          <SkeletonTable rows={6} columns={6} />\n        </div>\n      ) : (\n        <div className=\"table-wrapper\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Department</th>\n                <th className=\"text-right\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {staff.length === 0 ? (\n                <tr>\n                  <td colSpan={4} className=\"text-center py-8\" style={{ color: \"var(--text-muted)\" }}>\n                    No staff members found\n                  </td>\n                </tr>\n              ) : (\n                staff.map((s) => (\n                <tr key={s.id}>\n                  <td>{s.user?.name || \"â\"}</td>\n                  <td>{s.user?.email || \"â\"}</td>\n                  <td>{s.department?.name || \"â\"}</td>\n                  <td className=\"text-right\">\n                    <div className=\"flex items-center justify-end gap-2\">\n                      <button\n                        onClick={() => openEditModal(s)}\n                        className=\"btn-icon\"\n                        title=\"Edit\"\n                      >\n                        <Pencil size={16} />\n                      </button>\n                      <button\n                        onClick={() => handleDelete(s.id)}\n                        className=\"btn-icon\"\n                        title=\"Delete\"\n                        style={{ color: \"var(--danger)\" }}\n                      >\n                        <Trash2 size={16} />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      )}\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\" onClick={closeModal}>\n          <div \n            className=\"modal-content max-w-md w-full mx-4 p-6\" \n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <h2 className=\"text-xl font-semibold\" style={{ color: \"var(--text-primary)\" }}>\n                  {editingStaff ? \"Edit Staff\" : \"Add Staff\"}\n                </h2>\n                <p className=\"text-sm mt-1\" style={{ color: \"var(--text-muted)\" }}>\n                  {editingStaff ? \"Update staff member information\" : \"Add a new staff member to the system\"}\n                </p>\n              </div>\n              <button \n                onClick={closeModal} \n                className=\"p-2 rounded-lg hover:bg-[var(--hover-overlay)] transition-colors\"\n                style={{ color: \"var(--text-secondary)\" }}\n              >\n                <X size={20} />\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-5\">\n              <div>\n                <label className=\"form-label\">\n                  Name <span style={{ color: \"var(--danger)\" }}>*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  className=\"input-field\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">\n                  Email <span style={{ color: \"var(--danger)\" }}>*</span>\n                </label>\n                <input\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"input-field\"\n                  required\n                  disabled={!!editingStaff}\n                />\n              </div>\n\n              <div>\n                <label className=\"form-label\">\n                  Password {!editingStaff && <span style={{ color: \"var(--danger)\" }}>*</span>}\n                </label>\n                <input\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"input-field\"\n                  required={!editingStaff}\n                  placeholder={editingStaff ? \"Leave blank to keep current password\" : \"\"}\n                />\n              </div>\n\n              <div>\n                <CustomSelect\n                  label={\n                    <span>\n                      Department <span style={{ color: \"var(--danger)\" }}>*</span>\n                    </span>\n                  }\n                  options={departments.map((dept) => ({\n                    value: dept.id,\n                    label: `${dept.name} (${dept.abbreviation})`\n                  }))}\n                  value={departmentId}\n                  onChange={setDepartmentId}\n                  placeholder=\"Select department\"\n                />\n              </div>\n\n              <div className=\"flex gap-3 justify-end pt-6\">\n                <button type=\"button\" onClick={closeModal} className=\"btn-outline\">\n                  Cancel\n                </button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? (editingStaff ? \"Saving...\" : \"Creating...\") : (editingStaff ? \"Save Changes\" : \"Create Staff\")}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10668},"src/app/api/hod/faculty-assignments/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, assignmentService } from \"@/lib/mongodb-services\";\n\nconst CURRENT_SEMESTER = \"Odd 2025-26\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    // Fetch all assignments for the current semester\n    const allAssignments = await assignmentService.findMany({\n      where: { semester: CURRENT_SEMESTER },\n    });\n\n    return NextResponse.json(allAssignments);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch assignments\" }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"HOD\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const semester = body?.semester ?? CURRENT_SEMESTER;\n    const assignments = Array.isArray(body?.assignments) ? body.assignments : [];\n\n    const hodUserId = session.user.id as string;\n    const hodProfile = await staffService.findUnique({ where: { userId: hodUserId } });\n    if (!hodProfile) return NextResponse.json({ error: \"HOD profile not found\" }, { status: 404 });\n\n    // Delete all existing assignments for this semester\n    console.log(\"Deleting all existing assignments for semester:\", semester);\n    const deleteResult = await assignmentService.deleteMany({ semester });\n    console.log(\"Deleted assignments:\", deleteResult.count);\n\n    // Create new assignments\n    let createResult = null;\n    if (assignments.length > 0) {\n      const createData = assignments.map((a: any) => ({\n        staffId: a.staffId,\n        subjectId: a.subjectId,\n        semester,\n      }));\n\n  console.log(\"Creating new assignments:\", createData.length);\n  // assignmentService.createMany expects an array of docs, so pass the array directly\n  createResult = await assignmentService.createMany(createData);\n      console.log(\"Created assignments:\", createResult?.count ?? 0);\n    }\n\n    return NextResponse.json({\n      success: true,\n      deleted: deleteResult.count,\n      created: createResult?.count ?? 0,\n    });\n  } catch (error: any) {\n    console.error(\"API /hod/faculty-assignments POST error:\", error);\n    return NextResponse.json({ error: error?.message || \"Failed to save assignments\" }, { status: 500 });\n  }\n}\n","size_bytes":3000},"src/components/skeletons.tsx":{"content":"import React from \"react\";\n\nexport function SkeletonPulse({ className = \"\" }: { className?: string }) {\n  return (\n    <div \n      className={`pulse rounded ${className}`}\n      style={{ \n        background: \"linear-gradient(90deg, var(--hover-overlay) 25%, var(--active-overlay) 50%, var(--hover-overlay) 75%)\",\n        backgroundSize: \"200% 100%\",\n        animation: \"shimmer 1.5s ease-in-out infinite\"\n      }}\n    />\n  );\n}\n\nexport function SkeletonText({ \n  lines = 1, \n  className = \"\" \n}: { \n  lines?: number; \n  className?: string;\n}) {\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {Array.from({ length: lines }).map((_, i) => (\n        <SkeletonPulse \n          key={i} \n          className={`h-4 ${i === lines - 1 ? 'w-3/4' : 'w-full'}`} \n        />\n      ))}\n    </div>\n  );\n}\n\nexport function SkeletonCard({ children, className = \"\" }: { children?: React.ReactNode; className?: string }) {\n  return (\n    <div className={`card card-body ${className}`}>\n      {children}\n    </div>\n  );\n}\n\nexport function SkeletonStatCard() {\n  return (\n    <div className=\"card content-spacing\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <SkeletonPulse className=\"h-4 w-24 mb-3\" />\n          <SkeletonPulse className=\"h-8 w-16\" />\n        </div>\n        <SkeletonPulse className=\"h-12 w-12 rounded-lg\" />\n      </div>\n    </div>\n  );\n}\n\nexport function SkeletonTaskCard() {\n  return (\n    <article className=\"card content-spacing flex flex-col gap-4\">\n      <div className=\"flex items-start gap-3\">\n        <SkeletonPulse className=\"h-10 w-10 rounded-lg\" />\n        <div className=\"flex-1 min-w-0\">\n          <SkeletonPulse className=\"h-3 w-16 mb-2\" />\n          <SkeletonPulse className=\"h-5 w-32\" />\n        </div>\n      </div>\n      <SkeletonPulse className=\"h-4 w-full\" />\n      <div className=\"flex items-center gap-3 mt-auto pt-3 border-t\" style={{ borderColor: \"var(--card-border)\" }}>\n        <SkeletonPulse className=\"h-10 w-full rounded-lg\" />\n      </div>\n    </article>\n  );\n}\n\nexport function SkeletonTable({ rows = 5, columns = 4 }: { rows?: number; columns?: number }) {\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr>\n            {Array.from({ length: columns }).map((_, i) => (\n              <th key={i} className=\"text-left p-3\">\n                <SkeletonPulse className=\"h-4 w-24\" />\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from({ length: rows }).map((_, rowIndex) => (\n            <tr key={rowIndex} className=\"border-t\" style={{ borderColor: \"var(--card-border)\" }}>\n              {Array.from({ length: columns }).map((_, colIndex) => (\n                <td key={colIndex} className=\"p-3\">\n                  <SkeletonPulse className=\"h-4 w-full\" />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport function SkeletonMetricRow() {\n  return (\n    <div className=\"flex items-center justify-between p-4 rounded-xl\" style={{ background: \"var(--hover-overlay)\" }}>\n      <div className=\"flex items-center gap-3 flex-1\">\n        <SkeletonPulse className=\"h-5 w-5 rounded\" />\n        <SkeletonPulse className=\"h-4 w-32\" />\n      </div>\n      <SkeletonPulse className=\"h-6 w-12\" />\n    </div>\n  );\n}\n\nexport function SkeletonList({ items = 3 }: { items?: number }) {\n  return (\n    <div className=\"space-y-3\">\n      {Array.from({ length: items }).map((_, i) => (\n        <div key={i} className=\"flex items-center gap-3 p-3 rounded-lg\" style={{ background: \"var(--hover-overlay)\" }}>\n          <SkeletonPulse className=\"h-10 w-10 rounded-lg\" />\n          <div className=\"flex-1\">\n            <SkeletonPulse className=\"h-4 w-3/4 mb-2\" />\n            <SkeletonPulse className=\"h-3 w-1/2\" />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport function SkeletonDashboardStats() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-5 md:gap-6 section-spacing\">\n      <SkeletonStatCard />\n      <SkeletonStatCard />\n      <SkeletonStatCard />\n      <SkeletonStatCard />\n    </div>\n  );\n}\n\nexport function SkeletonReportCard() {\n  return (\n    <SkeletonCard>\n      <div className=\"mb-4\">\n        <SkeletonPulse className=\"h-6 w-48 mb-2\" />\n        <SkeletonPulse className=\"h-4 w-32\" />\n      </div>\n      <div className=\"space-y-3\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"flex justify-between items-center border-b py-2\" style={{ borderColor: \"var(--card-border)\" }}>\n            <SkeletonPulse className=\"h-4 w-2/3\" />\n            <SkeletonPulse className=\"h-4 w-16\" />\n          </div>\n        ))}\n      </div>\n    </SkeletonCard>\n  );\n}\n","size_bytes":4828},"src/app/api/hod/years/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, academicYearService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"HOD\") return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff || !staff.departmentId) {\n      return NextResponse.json({ error: \"HOD or department not found\" }, { status: 404 });\n    }\n\n    const departmentId = staff.departmentId;\n\n    const allYears = await academicYearService.findMany({ orderBy: { name: \"asc\" } });\n    \n    const filteredYears = allYears.filter((year: any) => {\n      return !year.departmentId || year.departmentId === departmentId;\n    });\n\n    return NextResponse.json(filteredYears);\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch academic years\" }, { status: 500 });\n  }\n}\n","size_bytes":1292},"scripts/add-staff.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Script to add staff members to the database\n * Run with: npx tsx scripts/add-staff.ts\n */\n\nconst staffData = [\n  { name: \"Mrs. Bhosale S. S.\", email: \"bhosale@gmail.com\", password: \"bhosale\" },\n  { name: \"Mrs. Raut D. A\", email: \"raut@gmail.com\", password: \"raut\" },\n  { name: \"Ms. Rajwade V. V\", email: \"rajwade@gmail.com\", password: \"rajwade\" },\n  { name: \"Ms. Wagh S. S.\", email: \"wagh@gmail.com\", password: \"wagh\" },\n  { name: \"Mr. Kadam R. C.\", email: \"kadam@gmail.com\", password: \"kadam\" },\n  { name: \"Ms. Kamble P. D.\", email: \"kamble@gmail.com\", password: \"Kamble\" },\n];\n\nasync function addStaff() {\n  console.log(\"Adding staff members...\");\n  \n  // First, get the list of departments\n  const deptResponse = await fetch(\"http://localhost:5000/api/departments\");\n  const departments = await deptResponse.json();\n  \n  if (!departments || departments.length === 0) {\n    console.error(\"No departments found. Please create departments first.\");\n    return;\n  }\n  \n  console.log(\"\\nAvailable departments:\");\n  departments.forEach((dept: any, index: number) => {\n    console.log(`${index + 1}. ${dept.name} (${dept.abbreviation})`);\n  });\n  \n  // For this script, we'll assign all staff to the first department\n  // In production, you'd want to specify which department each staff belongs to\n  const defaultDepartmentId = departments[0].id;\n  console.log(`\\nAssigning all staff to: ${departments[0].name}\\n`);\n  \n  for (const staff of staffData) {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/staff\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          // Note: This will need authentication in production\n          // You'll need to add authentication headers here\n        },\n        body: JSON.stringify({\n          name: staff.name,\n          email: staff.email,\n          password: staff.password,\n          departmentId: defaultDepartmentId,\n          employeeId: \"\",\n          designation: \"Faculty\",\n        }),\n      });\n      \n      if (response.ok) {\n        console.log(`â Added: ${staff.name}`);\n      } else {\n        const error = await response.json();\n        console.error(`â Failed to add ${staff.name}: ${error.error}`);\n      }\n    } catch (error) {\n      console.error(`â Error adding ${staff.name}:`, error);\n    }\n  }\n  \n  console.log(\"\\nStaff addition complete!\");\n}\n\naddStaff().catch(console.error);\n","size_bytes":2472},"src/lib/mongodb.ts":{"content":"import { MongoClient, Db } from 'mongodb';\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Please add your MONGODB_URI to environment variables');\n}\n\nconst uri = process.env.MONGODB_URI;\nconst options = {};\n\nlet client: MongoClient;\nlet clientPromise: Promise<MongoClient>;\n\nif (process.env.NODE_ENV === 'development') {\n  const globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>;\n  };\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    globalWithMongo._mongoClientPromise = client.connect().catch((err) => {\n      console.error('Failed to connect to MongoDB. Check MONGODB_URI, network/DNS and Atlas IP access list. Error:');\n      console.error(err);\n      throw err;\n    });\n  }\n  clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect().catch((err) => {\n    console.error('Failed to connect to MongoDB. Check MONGODB_URI, network/DNS and Atlas IP access list. Error:');\n    console.error(err);\n    throw err;\n  });\n}\n\nexport async function getDatabase(): Promise<Db> {\n  const client = await clientPromise;\n  return client.db('feedbackPortal');\n}\n\nexport default clientPromise;\n","size_bytes":1258},"scripts/add-staff-members.ts":{"content":"#!/usr/bin/env tsx\n\nimport { MongoClient } from 'mongodb';\nimport bcrypt from 'bcrypt';\n\nconst MONGODB_URI = process.env.DATABASE_URL || process.env.MONGODB_URI;\n\nif (!MONGODB_URI) {\n  throw new Error('DATABASE_URL or MONGODB_URI environment variable is required');\n}\n\nconst staffMembers = [\n  { name: \"Mrs. Bhosale S. S.\", email: \"bhosale@gmail.com\", password: \"bhosale\", department: \"CO\" },\n  { name: \"Mrs. Raut D. A\", email: \"raut@gmail.com\", password: \"raut\", department: \"EE\" },\n  { name: \"MS. Rajwade V. V\", email: \"rajwade@gmail.com\", password: \"rajwade\", department: \"CO\" },\n  { name: \"Ms. Wagh S. S.\", email: \"wagh@gmail.com\", password: \"wagh\", department: \"CO\" },\n  { name: \"Mr. Kadam R. C.\", email: \"kadam@gmail.com\", password: \"kadam\", department: \"CO\" },\n  { name: \"Ms. Kamble P. D.\", email: \"kamble@gmail.com\", password: \"Kamble\", department: \"CO\" },\n  { name: \"Mr. Jagtap R. G.\", email: \"jagtap@gmail.com\", password: \"jagtap\", department: \"NA\" },\n  { name: \"Ms. Dhapte S. N.\", email: \"dhapte@gmail.com\", password: \"dhapte\", department: \"NA\" },\n  { name: \"Mrs. Bankar P. S.\", email: \"bankar@gmail.com\", password: \"bankar\", department: \"NA\" },\n  { name: \"Mr. Hajare S. K.\", email: \"hajare@gmail.com\", password: \"hajare\", department: \"CE\" },\n  { name: \"Mr. Khatake R. B.\", email: \"khatake@gmail.com\", password: \"khatake\", department: \"NA\" },\n  { name: \"Ms. Shinde P.J.\", email: \"shinde@gmail.com\", password: \"shinde\", department: \"NA\" },\n  { name: \"Mr. Gharjare V. N.\", email: \"gharjare@gmail.com\", password: \"gharjare\", department: \"NA\" },\n  { name: \"Ms. Bhoite D. C.\", email: \"bhoite@gmail.com\", password: \"bhoite\", department: \"NA\" },\n  { name: \"Mr. Pawar A. N.\", email: \"pawar@gmail.com\", password: \"pawar\", department: \"ME\" },\n  { name: \"Mr. Bhoite M. A.\", email: \"bhoite2@gmail.com\", password: \"bhoite2\", department: \"ME\" },\n  { name: \"Mrs. Nagawade M. S.\", email: \"nagawade@gmail.com\", password: \"nagawade\", department: \"NA\" },\n  { name: \"Mr. Wagh S.T.\", email: \"wagh2@gmail.com\", password: \"wagh2\", department: \"NA\" },\n];\n\nasync function main() {\n  const client = new MongoClient(MONGODB_URI!);\n\n  try {\n    console.log('\\nð Connecting to MongoDB...');\n    await client.connect();\n    console.log('â Connected to MongoDB\\n');\n\n    const db = client.db('spiot_feedback_portal');\n    const usersCollection = db.collection('users');\n    const staffCollection = db.collection('staff');\n    const departmentsCollection = db.collection('departments');\n\n    console.log('ð Fetching departments...');\n    const departments = await departmentsCollection.find({}).toArray();\n    console.log(`â Found ${departments.length} departments\\n`);\n\n    const departmentMap = new Map();\n    for (const dept of departments) {\n      if (dept.abbreviation) {\n        departmentMap.set(dept.abbreviation.toUpperCase(), dept._id.toString());\n      }\n    }\n\n    console.log('Department mappings:');\n    departmentMap.forEach((id, abbr) => {\n      console.log(`  ${abbr} -> ${id}`);\n    });\n    console.log('');\n\n    console.log('ð§¹ Cleaning up employeeId and designation fields from existing staff...');\n    const updateResult = await staffCollection.updateMany(\n      {},\n      { $unset: { employeeId: \"\", designation: \"\" } }\n    );\n    console.log(`â Updated ${updateResult.modifiedCount} staff records\\n`);\n\n    console.log('ð¥ Adding staff members...\\n');\n\n    let addedCount = 0;\n    let skippedCount = 0;\n    let errorCount = 0;\n\n    for (const member of staffMembers) {\n      try {\n        const existingUser = await usersCollection.findOne({ email: member.email });\n\n        if (existingUser) {\n          console.log(`â­ï¸  Skipping ${member.name} (${member.email}) - already exists`);\n          skippedCount++;\n          continue;\n        }\n\n        const deptAbbr = member.department.toUpperCase();\n        const departmentId = departmentMap.get(deptAbbr);\n\n        if (!departmentId) {\n          console.log(`â Error: Department ${member.department} not found for ${member.name}`);\n          errorCount++;\n          continue;\n        }\n\n        const hashedPassword = await bcrypt.hash(member.password, 10);\n\n        const userResult = await usersCollection.insertOne({\n          name: member.name,\n          email: member.email,\n          hashedPassword,\n          role: 'STAFF',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        });\n\n        await staffCollection.insertOne({\n          userId: userResult.insertedId.toString(),\n          departmentId,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        });\n\n        console.log(`â Added ${member.name} (${member.email}) to department ${member.department}`);\n        addedCount++;\n      } catch (error) {\n        console.error(`â Error adding ${member.name}:`, error);\n        errorCount++;\n      }\n    }\n\n    console.log('\\nð Summary:');\n    console.log(`  â Added: ${addedCount}`);\n    console.log(`  â­ï¸  Skipped (already exists): ${skippedCount}`);\n    console.log(`  â Errors: ${errorCount}`);\n    console.log(`  ð Total: ${staffMembers.length}`);\n\n  } catch (error) {\n    console.error('â Fatal error:', error);\n    process.exit(1);\n  } finally {\n    await client.close();\n    console.log('\\nâ Connection closed');\n  }\n}\n\nmain();\n","size_bytes":5280},"src/lib/mongodb-services.ts":{"content":"import { getDatabase } from './mongodb';\nimport { ObjectId } from 'mongodb';\n\n// Collection names\nexport const COLLECTIONS = {\n  USERS: 'users',\n  DEPARTMENTS: 'departments',\n  STAFF: 'staff',\n  ACADEMIC_YEARS: 'academicYears',\n  SUBJECTS: 'subjects',\n  FACULTY_ASSIGNMENTS: 'facultyAssignments',\n  FEEDBACK: 'feedback',\n  HOD_SUGGESTIONS: 'hodSuggestions',\n  SETTINGS: 'settings',\n};\n\n// Helper to convert MongoDB _id to id\nconst docWithId = (doc: any) => {\n  if (!doc) return null;\n  const { _id, ...rest } = doc;\n  return { id: _id.toString(), ...rest };\n};\n\n// Helper to handle date objects\nconst timestampToDate = (timestamp: any) => {\n  if (!timestamp) return null;\n  if (timestamp instanceof Date) return timestamp;\n  return new Date(timestamp);\n};\n\n// ============ USER OPERATIONS ============\n\nexport const userService = {\n  async findUnique(where: { email?: string; id?: string }) {\n    try {\n      const db = await getDatabase();\n      let query: any = {};\n      \n      if (where.id) {\n        query._id = new ObjectId(where.id);\n      } else if (where.email) {\n        query.email = where.email;\n      }\n      \n      const doc = await db.collection(COLLECTIONS.USERS).findOne(query);\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in userService.findUnique:', error);\n      throw error;\n    }\n  },\n\n  async findMany(params?: { where?: any; select?: any; orderBy?: any; limit?: number }) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      if (params?.where) {\n        Object.entries(params.where).forEach(([key, value]) => {\n          if (value !== undefined) {\n            if (key === 'id') {\n              query._id = new ObjectId(value as string);\n            } else {\n              query[key] = value;\n            }\n          }\n        });\n      }\n\n      let cursor = db.collection(COLLECTIONS.USERS).find(query);\n\n      if (params?.orderBy) {\n        const sort: any = {};\n        Object.entries(params.orderBy).forEach(([key, value]) => {\n          sort[key] = value === 'asc' ? 1 : -1;\n        });\n        cursor = cursor.sort(sort);\n      }\n\n      if (params?.limit) {\n        cursor = cursor.limit(params.limit);\n      }\n\n      let results = await cursor.toArray();\n      results = results.map(docWithId);\n\n      if (params?.select) {\n        return results.map((item: any) => {\n          const selected: any = {};\n          Object.keys(params.select).forEach(key => {\n            if (params.select[key]) selected[key] = item[key];\n          });\n          return selected;\n        });\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Error in userService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.USERS).insertOne({\n        ...rest,\n        createdAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in userService.create:', error);\n      throw error;\n    }\n  },\n\n  async update(where: { id: string }, data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      await db.collection(COLLECTIONS.USERS).updateOne(\n        { _id: new ObjectId(where.id) },\n        { $set: rest }\n      );\n      return { id: where.id, ...rest };\n    } catch (error) {\n      console.error('Error in userService.update:', error);\n      throw error;\n    }\n  },\n\n  async updateMany(where: any, data: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.USERS).updateMany(query, { $set: data });\n      return { count: result.modifiedCount };\n    } catch (error) {\n      console.error('Error in userService.updateMany:', error);\n      throw error;\n    }\n  },\n\n  async delete(where: { id: string }) {\n    try {\n      const db = await getDatabase();\n      await db.collection(COLLECTIONS.USERS).deleteOne({ _id: new ObjectId(where.id) });\n      return { success: true };\n    } catch (error) {\n      console.error('Error in userService.delete:', error);\n      throw error;\n    }\n  },\n\n  async deleteMany(where: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.USERS).deleteMany(query);\n      return { count: result.deletedCount };\n    } catch (error) {\n      console.error('Error in userService.deleteMany:', error);\n      throw error;\n    }\n  },\n\n  async count(where?: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = where || {};\n      return await db.collection(COLLECTIONS.USERS).countDocuments(query);\n    } catch (error) {\n      console.error('Error in userService.count:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ DEPARTMENT OPERATIONS ============\n\nexport const departmentService = {\n  async findMany(params?: { where?: any; orderBy?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      let cursor = db.collection(COLLECTIONS.DEPARTMENTS).find(query);\n\n      if (params?.orderBy) {\n        const sort: any = {};\n        Object.entries(params.orderBy).forEach(([key, value]) => {\n          sort[key] = value === 'asc' ? 1 : -1;\n        });\n        cursor = cursor.sort(sort);\n      }\n\n      const results = await cursor.toArray();\n      return results.map(docWithId);\n    } catch (error) {\n      console.error('Error in departmentService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async findUnique(where: { id?: string; abbreviation?: string }) {\n    try {\n      const db = await getDatabase();\n      let query: any = {};\n      \n      if (where.id) {\n        query._id = new ObjectId(where.id);\n      } else if (where.abbreviation) {\n        query.abbreviation = where.abbreviation;\n      }\n\n      const doc = await db.collection(COLLECTIONS.DEPARTMENTS).findOne(query);\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in departmentService.findUnique:', error);\n      throw error;\n    }\n  },\n\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.DEPARTMENTS).insertOne({\n        ...rest,\n        isFeedbackActive: rest.isFeedbackActive ?? false,\n        createdAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in departmentService.create:', error);\n      throw error;\n    }\n  },\n\n  async update(where: { id: string }, data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      await db.collection(COLLECTIONS.DEPARTMENTS).updateOne(\n        { _id: new ObjectId(where.id) },\n        { $set: rest }\n      );\n      return { id: where.id, ...rest };\n    } catch (error) {\n      console.error('Error in departmentService.update:', error);\n      throw error;\n    }\n  },\n\n  async delete(where: { id: string }) {\n    try {\n      const db = await getDatabase();\n      await db.collection(COLLECTIONS.DEPARTMENTS).deleteOne({ _id: new ObjectId(where.id) });\n      return { success: true };\n    } catch (error) {\n      console.error('Error in departmentService.delete:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ STAFF OPERATIONS ============\n\nexport const staffService = {\n  async findMany(params?: { where?: any; include?: any; orderBy?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      if (query.userId) {\n        query.userId = query.userId;\n      }\n      if (query.departmentId) {\n        query.departmentId = query.departmentId;\n      }\n\n      let cursor = db.collection(COLLECTIONS.STAFF).find(query);\n\n      if (params?.orderBy) {\n        const sort: any = {};\n        Object.entries(params.orderBy).forEach(([key, value]) => {\n          sort[key] = value === 'asc' ? 1 : -1;\n        });\n        cursor = cursor.sort(sort);\n      }\n\n      let results = await cursor.toArray();\n      results = results.map(docWithId);\n\n      if (params?.include) {\n        for (const staff of results) {\n          if (params.include.user && staff.userId) {\n            const user = await userService.findUnique({ id: staff.userId });\n            staff.user = user;\n          }\n          if (params.include.department && staff.departmentId) {\n            const dept = await departmentService.findUnique({ id: staff.departmentId });\n            staff.department = dept;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Error in staffService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async findUnique(params: { where: { id?: string; userId?: string }; include?: any }) {\n    try {\n      const db = await getDatabase();\n      let query: any = {};\n      \n      if (params.where.id) {\n        query._id = new ObjectId(params.where.id);\n      } else if (params.where.userId) {\n        query.userId = params.where.userId;\n      }\n\n      const doc = await db.collection(COLLECTIONS.STAFF).findOne(query);\n      let staff = docWithId(doc);\n\n      if (staff && params.include) {\n        if (params.include.user && staff.userId) {\n          const user = await userService.findUnique({ id: staff.userId });\n          staff.user = user;\n        }\n        if (params.include.department && staff.departmentId) {\n          const dept = await departmentService.findUnique({ id: staff.departmentId });\n          staff.department = dept;\n        }\n      }\n\n      return staff;\n    } catch (error) {\n      console.error('Error in staffService.findUnique:', error);\n      throw error;\n    }\n  },\n\n  async findFirst(params: { where: { id?: string; userId?: string }; include?: any }) {\n    return this.findUnique(params);\n  },\n\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.STAFF).insertOne({\n        ...rest,\n        createdAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in staffService.create:', error);\n      throw error;\n    }\n  },\n\n  async update(where: { id: string }, data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      await db.collection(COLLECTIONS.STAFF).updateOne(\n        { _id: new ObjectId(where.id) },\n        { $set: rest }\n      );\n      return { id: where.id, ...rest };\n    } catch (error) {\n      console.error('Error in staffService.update:', error);\n      throw error;\n    }\n  },\n\n  async updateMany(where: any, data: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.STAFF).updateMany(query, { $set: data });\n      return { count: result.modifiedCount };\n    } catch (error) {\n      console.error('Error in staffService.updateMany:', error);\n      throw error;\n    }\n  },\n\n  async deleteMany(where: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.STAFF).deleteMany(query);\n      return { count: result.deletedCount };\n    } catch (error) {\n      console.error('Error in staffService.deleteMany:', error);\n      throw error;\n    }\n  },\n\n  async count(where?: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = where || {};\n      return await db.collection(COLLECTIONS.STAFF).countDocuments(query);\n    } catch (error) {\n      console.error('Error in staffService.count:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ ACADEMIC YEAR OPERATIONS ============\n\nexport const academicYearService = {\n  async findMany(params?: { where?: any; orderBy?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      let cursor = db.collection(COLLECTIONS.ACADEMIC_YEARS).find(query);\n\n      if (params?.orderBy) {\n        const sort: any = {};\n        Object.entries(params.orderBy).forEach(([key, value]) => {\n          sort[key] = value === 'asc' ? 1 : -1;\n        });\n        cursor = cursor.sort(sort);\n      }\n\n      const results = await cursor.toArray();\n      return results.map(docWithId);\n    } catch (error) {\n      console.error('Error in academicYearService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async findUnique(where: { id: string }) {\n    try {\n      const db = await getDatabase();\n      const doc = await db.collection(COLLECTIONS.ACADEMIC_YEARS).findOne({ _id: new ObjectId(where.id) });\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in academicYearService.findUnique:', error);\n      throw error;\n    }\n  },\n\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.ACADEMIC_YEARS).insertOne({\n        ...rest,\n        createdAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in academicYearService.create:', error);\n      throw error;\n    }\n  },\n\n  async update(where: { id: string }, data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      await db.collection(COLLECTIONS.ACADEMIC_YEARS).updateOne(\n        { _id: new ObjectId(where.id) },\n        { $set: rest }\n      );\n      return { id: where.id, ...rest };\n    } catch (error) {\n      console.error('Error in academicYearService.update:', error);\n      throw error;\n    }\n  },\n\n  async delete(where: { id: string }) {\n    try {\n      const db = await getDatabase();\n      await db.collection(COLLECTIONS.ACADEMIC_YEARS).deleteOne({ _id: new ObjectId(where.id) });\n      return { success: true };\n    } catch (error) {\n      console.error('Error in academicYearService.delete:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ SUBJECT OPERATIONS ============\n\nexport const subjectService = {\n  async findMany(params?: { where?: any; include?: any; orderBy?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      let cursor = db.collection(COLLECTIONS.SUBJECTS).find(query);\n\n      if (params?.orderBy) {\n        const sort: any = {};\n        Object.entries(params.orderBy).forEach(([key, value]) => {\n          sort[key] = value === 'asc' ? 1 : -1;\n        });\n        cursor = cursor.sort(sort);\n      }\n\n      let results = await cursor.toArray();\n      results = results.map(docWithId);\n\n      if (params?.include?.academicYear) {\n        for (const subject of results) {\n          if (subject.academicYearId) {\n            const year = await academicYearService.findUnique({ id: subject.academicYearId });\n            subject.academicYear = year;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Error in subjectService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async findUnique(where: { id: string }) {\n    try {\n      const db = await getDatabase();\n      const doc = await db.collection(COLLECTIONS.SUBJECTS).findOne({ _id: new ObjectId(where.id) });\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in subjectService.findUnique:', error);\n      throw error;\n    }\n  },\n\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.SUBJECTS).insertOne({\n        ...rest,\n        createdAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in subjectService.create:', error);\n      throw error;\n    }\n  },\n\n  async update(where: { id: string }, data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      await db.collection(COLLECTIONS.SUBJECTS).updateOne(\n        { _id: new ObjectId(where.id) },\n        { $set: rest }\n      );\n      return { id: where.id, ...rest };\n    } catch (error) {\n      console.error('Error in subjectService.update:', error);\n      throw error;\n    }\n  },\n\n  async delete(where: { id: string }) {\n    try {\n      const db = await getDatabase();\n      await db.collection(COLLECTIONS.SUBJECTS).deleteOne({ _id: new ObjectId(where.id) });\n      return { success: true };\n    } catch (error) {\n      console.error('Error in subjectService.delete:', error);\n      throw error;\n    }\n  },\n\n  async count(where?: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = where || {};\n      return await db.collection(COLLECTIONS.SUBJECTS).countDocuments(query);\n    } catch (error) {\n      console.error('Error in subjectService.count:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ ASSIGNMENT OPERATIONS ============\n\nexport const assignmentService = {\n  async createMany(data: any[]) {\n    try {\n      const db = await getDatabase();\n      const docs = data.map(item => ({\n        ...item,\n        createdAt: new Date(),\n      }));\n      const result = await db.collection(COLLECTIONS.FACULTY_ASSIGNMENTS).insertMany(docs);\n      return { count: Object.keys(result.insertedIds).length };\n    } catch (error) {\n      console.error('Error in assignmentService.createMany:', error);\n      throw error;\n    }\n  },\n\n  async findMany(params?: { where?: any; include?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      const results = await db.collection(COLLECTIONS.FACULTY_ASSIGNMENTS).find(query).toArray();\n      let assignments = results.map(docWithId);\n\n      if (params?.include) {\n        for (const assignment of assignments) {\n          if (params.include.subject && assignment.subjectId) {\n            const subject = await subjectService.findUnique({ id: assignment.subjectId });\n            assignment.subject = subject;\n          }\n          if (params.include._count?.feedback !== undefined) {\n            const feedbackCount = await db.collection(COLLECTIONS.FEEDBACK).countDocuments({\n              staffId: assignment.staffId,\n              subjectId: assignment.subjectId,\n              semester: assignment.semester,\n            });\n            assignment._count = { feedback: feedbackCount };\n          }\n        }\n      }\n\n      return assignments;\n    } catch (error) {\n      console.error('Error in assignmentService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async deleteMany(where: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.FACULTY_ASSIGNMENTS).deleteMany(query);\n      return { count: result.deletedCount };\n    } catch (error) {\n      console.error('Error in assignmentService.deleteMany:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ FEEDBACK OPERATIONS ============\n\nexport const feedbackService = {\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.FEEDBACK).insertOne({\n        ...rest,\n        submittedAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in feedbackService.create:', error);\n      throw error;\n    }\n  },\n\n  async findFirst(where: any) {\n    try {\n      const db = await getDatabase();\n      const doc = await db.collection(COLLECTIONS.FEEDBACK).findOne(where);\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in feedbackService.findFirst:', error);\n      throw error;\n    }\n  },\n\n  async findMany(params?: { where?: any; include?: any; orderBy?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      let cursor = db.collection(COLLECTIONS.FEEDBACK).find(query);\n\n      if (params?.orderBy) {\n        const sort: any = {};\n        Object.entries(params.orderBy).forEach(([key, value]) => {\n          sort[key] = value === 'asc' ? 1 : -1;\n        });\n        cursor = cursor.sort(sort);\n      }\n\n      let results = await cursor.toArray();\n      results = results.map(docWithId);\n\n      if (params?.include) {\n        for (const feedback of results) {\n          if (params.include.student && feedback.studentId) {\n            const student = await userService.findUnique({ id: feedback.studentId });\n            feedback.student = student;\n          }\n          if (params.include.staff && feedback.staffId) {\n            const staff = await staffService.findUnique({ where: { id: feedback.staffId }, include: { user: true } });\n            feedback.staff = staff;\n          }\n          if (params.include.subject && feedback.subjectId) {\n            const subject = await subjectService.findUnique({ id: feedback.subjectId });\n            feedback.subject = subject;\n          }\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error('Error in feedbackService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async count(where?: any) {\n    try {\n      const db = await getDatabase();\n      return await db.collection(COLLECTIONS.FEEDBACK).countDocuments(where || {});\n    } catch (error) {\n      console.error('Error in feedbackService.count:', error);\n      throw error;\n    }\n  },\n\n  async updateMany(where: any, data: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.FEEDBACK).updateMany(query, { $set: data });\n      return { count: result.modifiedCount };\n    } catch (error) {\n      console.error('Error in feedbackService.updateMany:', error);\n      throw error;\n    }\n  },\n};\n\n// ============ HOD SUGGESTION OPERATIONS ============\n\nexport const hodSuggestionService = {\n  async create(data: any) {\n    try {\n      const db = await getDatabase();\n      const { id, ...rest } = data;\n      const result = await db.collection(COLLECTIONS.HOD_SUGGESTIONS).insertOne({\n        ...rest,\n        createdAt: new Date(),\n      });\n      return { id: result.insertedId.toString(), ...rest };\n    } catch (error) {\n      console.error('Error in hodSuggestionService.create:', error);\n      throw error;\n    }\n  },\n\n  async findMany(params?: { where?: any }) {\n    try {\n      const db = await getDatabase();\n      const query: any = params?.where || {};\n\n      const results = await db.collection(COLLECTIONS.HOD_SUGGESTIONS).find(query).toArray();\n      return results.map(docWithId);\n    } catch (error) {\n      console.error('Error in hodSuggestionService.findMany:', error);\n      throw error;\n    }\n  },\n\n  async findUnique(where: { id?: string; staffId_semester?: { staffId: string; semester: string } }) {\n    try {\n      const db = await getDatabase();\n      let query: any = {};\n      if (where.id) {\n        query._id = new ObjectId(where.id);\n      } else if (where.staffId_semester) {\n        const { staffId, semester } = where.staffId_semester;\n        query = { staffId, semester };\n      }\n      const doc = await db.collection(COLLECTIONS.HOD_SUGGESTIONS).findOne(query);\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in hodSuggestionService.findUnique:', error);\n      throw error;\n    }\n  },\n\n  async deleteMany(where: any) {\n    try {\n      const db = await getDatabase();\n      const query: any = {};\n      \n      Object.entries(where).forEach(([key, value]) => {\n        if (value !== undefined) {\n          query[key] = value;\n        }\n      });\n\n      const result = await db.collection(COLLECTIONS.HOD_SUGGESTIONS).deleteMany(query);\n      return { count: result.deletedCount };\n    } catch (error) {\n      console.error('Error in hodSuggestionService.deleteMany:', error);\n      throw error;\n    }\n  },\n};\n\nexport const semesterSettingsService = {\n  async get() {\n    try {\n      const db = await getDatabase();\n      const doc = await db.collection(COLLECTIONS.SETTINGS).findOne({ type: 'semester' });\n      if (!doc) {\n        const defaultSettings = {\n          type: 'semester',\n          currentSemester: 1,\n          academicYear: new Date().getFullYear() + '-' + (new Date().getFullYear() + 1).toString().slice(-2),\n          updatedAt: new Date(),\n        };\n        await db.collection(COLLECTIONS.SETTINGS).insertOne(defaultSettings);\n        return { ...defaultSettings, id: defaultSettings._id?.toString() };\n      }\n      return docWithId(doc);\n    } catch (error) {\n      console.error('Error in semesterSettingsService.get:', error);\n      throw error;\n    }\n  },\n\n  async update(data: { currentSemester: number; academicYear?: string }) {\n    try {\n      const db = await getDatabase();\n      const updateData: any = {\n        currentSemester: data.currentSemester,\n        updatedAt: new Date(),\n      };\n      if (data.academicYear) {\n        updateData.academicYear = data.academicYear;\n      }\n      await db.collection(COLLECTIONS.SETTINGS).updateOne(\n        { type: 'semester' },\n        { $set: updateData },\n        { upsert: true }\n      );\n      return this.get();\n    } catch (error) {\n      console.error('Error in semesterSettingsService.update:', error);\n      throw error;\n    }\n  },\n\n  getCurrentSemesterString(semesterNumber: number, year?: string) {\n    const isOdd = semesterNumber % 2 === 1;\n    const semesterType = isOdd ? 'Odd' : 'Even';\n    const academicYear = year || new Date().getFullYear() + '-' + (new Date().getFullYear() + 1).toString().slice(-2);\n    return `${semesterType} Semester ${academicYear}`;\n  },\n};\n\nexport { timestampToDate };\n","size_bytes":26760},"scripts/seed-initial-data.ts":{"content":"import { getDatabase } from '../src/lib/mongodb';\nimport bcrypt from 'bcrypt';\n\nconst COLLECTIONS = {\n  USERS: 'users',\n  DEPARTMENTS: 'departments',\n  STAFF: 'staff',\n};\n\nasync function seedData() {\n  console.log('ð± Starting database seeding...\\n');\n\n  try {\n    const db = await getDatabase();\n\n    // Clear existing data\n    console.log('ðï¸  Clearing existing data...');\n    await db.collection(COLLECTIONS.STAFF).deleteMany({});\n    await db.collection(COLLECTIONS.USERS).deleteMany({});\n    await db.collection(COLLECTIONS.DEPARTMENTS).deleteMany({});\n    console.log('â Existing data cleared\\n');\n\n    // 1. Create Departments\n    console.log('ð¢ Creating departments...');\n    const departments = [\n      { name: 'Computer Engineering', abbreviation: 'CO' },\n      { name: 'Electronics Engineering', abbreviation: 'EE' },\n      { name: 'Civil Engineering', abbreviation: 'CE' },\n      { name: 'Mechanical Engineering', abbreviation: 'ME' },\n      { name: 'General/Non-Academic', abbreviation: 'NA' },\n    ];\n\n    const departmentMap: Record<string, string> = {};\n    for (const dept of departments) {\n      const result = await db.collection(COLLECTIONS.DEPARTMENTS).insertOne({\n        ...dept,\n        isFeedbackActive: false,\n        createdAt: new Date(),\n      });\n      departmentMap[dept.abbreviation] = result.insertedId.toString();\n      console.log(`  â ${dept.name} (${dept.abbreviation})`);\n    }\n    console.log('');\n\n    // 2. Create Admin User\n    console.log('ð¤ Creating admin user...');\n    const adminPassword = await bcrypt.hash('123', 10);\n    const adminResult = await db.collection(COLLECTIONS.USERS).insertOne({\n      email: 'admin@gmail.com',\n      name: 'Administrator',\n      role: 'ADMIN',\n      hashedPassword: adminPassword,\n      createdAt: new Date(),\n    });\n    console.log('  â Admin user created (email: admin@gmail.com, password: 123)\\n');\n\n    // 3. Create Staff Members\n    console.log('ð¥ Creating staff members...');\n    \n    const staffData = [\n      { name: 'Mrs. Bhosale S. S.', email: 'bhosale@gmail.com', password: 'bhosale', dept: 'CO' },\n      { name: 'Mrs. Raut D. A', email: 'raut@gmail.com', password: 'raut', dept: 'EE' },\n      { name: 'MS. Rajwade V. V', email: 'rajwade@gmail.com', password: 'rajwade', dept: 'CO' },\n      { name: 'Ms. Wagh S. S.', email: 'wagh@gmail.com', password: 'wagh', dept: 'CO' },\n      { name: 'Mr. Kadam R. C.', email: 'kadam@gmail.com', password: 'kadam', dept: 'CO' },\n      { name: 'Ms. Kamble P. D.', email: 'kamble@gmail.com', password: 'Kamble', dept: 'CO' },\n      { name: 'Mr. Jagtap R. G.', email: 'jagtap@gmail.com', password: 'jagtap', dept: 'NA' },\n      { name: 'Ms. Dhapte S. N.', email: 'dhapte@gmail.com', password: 'dhapte', dept: 'NA' },\n      { name: 'Mrs. Bankar P. S.', email: 'bankar@gmail.com', password: 'bankar', dept: 'NA' },\n      { name: 'Mr. Hajare S. K.', email: 'hajare@gmail.com', password: 'hajare', dept: 'CE' },\n      { name: 'Mr. Khatake R. B.', email: 'khatake@gmail.com', password: 'khatake', dept: 'NA' },\n      { name: 'Ms. Shinde P.J.', email: 'shinde@gmail.com', password: 'shinde', dept: 'NA' },\n      { name: 'Mr. Gharjare V. N.', email: 'gharjare@gmail.com', password: 'gharjare', dept: 'NA' },\n      { name: 'Ms. Bhoite D. C.', email: 'bhoite@gmail.com', password: 'bhoite', dept: 'NA' },\n      { name: 'Mr. Pawar A. N.', email: 'pawar@gmail.com', password: 'pawar', dept: 'ME' },\n      { name: 'Mr. Bhoite M. A.', email: 'bhoite2@gmail.com', password: 'bhoite2', dept: 'ME' },\n      { name: 'Mrs. Nagawade M. S.', email: 'nagawade@gmail.com', password: 'nagawade', dept: 'NA' },\n      { name: 'Mr. Wagh S.T.', email: 'wagh2@gmail.com', password: 'wagh2', dept: 'NA' },\n    ];\n\n    for (const staff of staffData) {\n      try {\n        // Create user account for staff\n        const hashedPassword = await bcrypt.hash(staff.password, 10);\n        const userResult = await db.collection(COLLECTIONS.USERS).insertOne({\n          email: staff.email,\n          name: staff.name,\n          role: 'STAFF',\n          hashedPassword: hashedPassword,\n          createdAt: new Date(),\n        });\n\n        // Create staff profile\n        await db.collection(COLLECTIONS.STAFF).insertOne({\n          userId: userResult.insertedId.toString(),\n          departmentId: departmentMap[staff.dept],\n          createdAt: new Date(),\n        });\n\n        console.log(`  â ${staff.name} (${staff.dept})`);\n      } catch (error) {\n        console.log(`  â Failed to create ${staff.name}: ${error}`);\n      }\n    }\n\n    console.log('\\nâ Database seeding completed successfully!\\n');\n    console.log('ð Login Credentials:');\n    console.log('   Admin:');\n    console.log('     Email:    admin@gmail.com');\n    console.log('     Password: 123\\n');\n    console.log('   Sample Staff:');\n    console.log('     Email:    bhosale@gmail.com');\n    console.log('     Password: bhosale\\n');\n\n    process.exit(0);\n  } catch (error) {\n    console.error('â Seeding failed:', error);\n    process.exit(1);\n  }\n}\n\nseedData();\n","size_bytes":5053},"scripts/seed-admin-and-staff.ts":{"content":"import { getDatabase } from '../src/lib/mongodb';\nimport { ObjectId } from 'mongodb';\nimport bcrypt from 'bcrypt';\n\nconst COLLECTIONS = {\n  USERS: 'users',\n  DEPARTMENTS: 'departments',\n  STAFF: 'staff',\n  ACADEMIC_YEARS: 'academicYears',\n  SUBJECTS: 'subjects',\n  FACULTY_ASSIGNMENTS: 'facultyAssignments',\n  FEEDBACK: 'feedback',\n  HOD_SUGGESTIONS: 'hodSuggestions',\n};\n\nasync function seedDatabase() {\n  try {\n    console.log('ð Connecting to database...');\n    const db = await getDatabase();\n    \n    console.log('ðï¸  Clearing existing students and staff...');\n    await db.collection(COLLECTIONS.USERS).deleteMany({ role: { $in: ['STUDENT', 'STAFF', 'FACULTY', 'HOD'] } });\n    await db.collection(COLLECTIONS.STAFF).deleteMany({});\n    await db.collection(COLLECTIONS.FACULTY_ASSIGNMENTS).deleteMany({});\n    await db.collection(COLLECTIONS.FEEDBACK).deleteMany({});\n    await db.collection(COLLECTIONS.HOD_SUGGESTIONS).deleteMany({});\n    \n    console.log('ð Creating departments...');\n    const departments = [\n      { name: 'Computer Engineering', abbreviation: 'CO' },\n      { name: 'Electrical Engineering', abbreviation: 'EE' },\n      { name: 'Civil Engineering', abbreviation: 'CE' },\n      { name: 'Mechanical Engineering', abbreviation: 'ME' },\n      { name: 'Not Assigned', abbreviation: 'NA' },\n    ];\n\n    const departmentMap: Record<string, string> = {};\n    \n    for (const dept of departments) {\n      const existing = await db.collection(COLLECTIONS.DEPARTMENTS).findOne({ abbreviation: dept.abbreviation });\n      if (existing) {\n        departmentMap[dept.abbreviation] = existing._id.toString();\n        console.log(`   â Department ${dept.abbreviation} already exists`);\n      } else {\n        const result = await db.collection(COLLECTIONS.DEPARTMENTS).insertOne({\n          ...dept,\n          isFeedbackActive: false,\n          createdAt: new Date(),\n        });\n        departmentMap[dept.abbreviation] = result.insertedId.toString();\n        console.log(`   â Created department: ${dept.name} (${dept.abbreviation})`);\n      }\n    }\n\n    console.log('ð¤ Creating admin user...');\n    const adminEmail = 'admin@gmail.com';\n    const existingAdmin = await db.collection(COLLECTIONS.USERS).findOne({ email: adminEmail });\n    \n    if (existingAdmin) {\n      console.log('   â ï¸  Admin user already exists');\n    } else {\n      const hashedPassword = await bcrypt.hash('123', 10);\n      await db.collection(COLLECTIONS.USERS).insertOne({\n        email: adminEmail,\n        name: 'Admin',\n        role: 'ADMIN',\n        hashedPassword,\n        createdAt: new Date(),\n      });\n      console.log(`   â Created admin user: ${adminEmail}`);\n    }\n\n    console.log('ð¥ Creating staff members...');\n    const staffMembers = [\n      { name: 'Mrs. Bhosale S. S.', email: 'bhosale@gmail.com', password: 'bhosale', department: 'CO' },\n      { name: 'Mrs. Raut D. A', email: 'raut@gmail.com', password: 'raut', department: 'EE' },\n      { name: 'MS. Rajwade V. V', email: 'rajwade@gmail.com', password: 'rajwade', department: 'CO' },\n      { name: 'Ms. Wagh S. S.', email: 'wagh@gmail.com', password: 'wagh', department: 'CO' },\n      { name: 'Mr. Kadam R. C.', email: 'kadam@gmail.com', password: 'kadam', department: 'CO' },\n      { name: 'Ms. Kamble P. D.', email: 'kamble@gmail.com', password: 'Kamble', department: 'CO' },\n      { name: 'Mr. Jagtap R. G.', email: 'jagtap@gmail.com', password: 'jagtap', department: 'NA' },\n      { name: 'Ms. Dhapte S. N.', email: 'dhapte@gmail.com', password: 'dhapte', department: 'NA' },\n      { name: 'Mrs. Bankar P. S.', email: 'bankar@gmail.com', password: 'bankar', department: 'NA' },\n      { name: 'Mr. Hajare S. K.', email: 'hajare@gmail.com', password: 'hajare', department: 'CE' },\n      { name: 'Mr. Khatake R. B.', email: 'khatake@gmail.com', password: 'khatake', department: 'NA' },\n      { name: 'Ms. Shinde P.J.', email: 'shinde@gmail.com', password: 'shinde', department: 'NA' },\n      { name: 'Mr. Gharjare V. N.', email: 'gharjare@gmail.com', password: 'gharjare', department: 'NA' },\n      { name: 'Ms. Bhoite D. C.', email: 'bhoite@gmail.com', password: 'bhoite', department: 'NA' },\n      { name: 'Mr. Pawar A. N.', email: 'pawar@gmail.com', password: 'pawar', department: 'ME' },\n      { name: 'Mr. Bhoite M. A.', email: 'bhoite2@gmail.com', password: 'bhoite2', department: 'ME' },\n      { name: 'Mrs. Nagawade M. S.', email: 'nagawade@gmail.com', password: 'nagawade', department: 'NA' },\n      { name: 'Mr. Wagh S.T.', email: 'wagh2@gmail.com', password: 'wagh2', department: 'NA' },\n    ];\n\n    let staffCreated = 0;\n    let staffSkipped = 0;\n\n    for (const staff of staffMembers) {\n      const existingUser = await db.collection(COLLECTIONS.USERS).findOne({ email: staff.email });\n      \n      if (existingUser) {\n        console.log(`   â ï¸  Staff ${staff.email} already exists`);\n        staffSkipped++;\n        continue;\n      }\n\n      const hashedPassword = await bcrypt.hash(staff.password, 10);\n      const departmentId = departmentMap[staff.department];\n\n      const userResult = await db.collection(COLLECTIONS.USERS).insertOne({\n        email: staff.email,\n        name: staff.name,\n        role: 'FACULTY',\n        hashedPassword,\n        departmentId,\n        createdAt: new Date(),\n      });\n\n      await db.collection(COLLECTIONS.STAFF).insertOne({\n        userId: userResult.insertedId.toString(),\n        departmentId,\n        createdAt: new Date(),\n      });\n\n      console.log(`   â Created staff: ${staff.name} (${staff.department})`);\n      staffCreated++;\n    }\n\n    console.log('\\nâ Seeding completed successfully!');\n    console.log(`   ð Summary:`);\n    console.log(`      - Departments: ${Object.keys(departmentMap).length}`);\n    console.log(`      - Admin users: 1`);\n    console.log(`      - Staff created: ${staffCreated}`);\n    console.log(`      - Staff skipped: ${staffSkipped}`);\n    console.log(`      - Students cleared: â`);\n    console.log(`      - Old staff cleared: â`);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('â Error seeding database:', error);\n    process.exit(1);\n  }\n}\n\nseedDatabase();\n","size_bytes":6179},"SECURITY.md":{"content":"# Security Improvements\n\nThis document outlines the security enhancements implemented in the SPIOT Feedback Portal.\n\n## Authentication & Authorization\n\n### 1. Rate Limiting\n- **Implementation**: Added rate limiting to login attempts (5 attempts per 15 minutes per email)\n- **Location**: `src/lib/security-utils.ts` and `src/app/api/auth/[...nextauth]/route.ts`\n- **Protection**: Prevents brute force attacks on user accounts\n\n### 2. Secure Session Management\n- **Session Duration**: Reduced from 30 days to 24 hours\n- **Cookie Security**: \n  - HttpOnly: Prevents JavaScript access to cookies\n  - Secure: Requires HTTPS connection\n  - SameSite: 'lax' prevents CSRF attacks\n- **Secret Management**: Moved from hardcoded secret to environment variable (NEXTAUTH_SECRET)\n\n### 3. Role-Based Access Control (RBAC)\n- **Fixed**: Staff login redirect loop issue\n- **Enhanced**: Middleware now properly validates both STAFF and FACULTY roles for /faculty routes\n- **Protection**: Unauthorized users cannot access protected routes\n\n## Input Validation & Sanitization\n\n### 1. Enrollment Number Validation\n- **Requirement**: Must be exactly 11 digits\n- **Applied to**:\n  - Single student creation endpoint\n  - Bulk student upload endpoint\n- **Protection**: Prevents invalid data entry and potential injection attacks\n\n### 2. String Sanitization\n- **Implementation**: All user inputs are sanitized to remove potentially dangerous characters\n- **Functions**: `sanitizeString()`, `sanitizeEmail()`, `sanitizeEnrollmentNumber()`\n- **Protection**: Prevents XSS (Cross-Site Scripting) attacks\n\n### 3. Password Validation\n- **Requirements**:\n  - Minimum 6 characters\n  - Maximum 128 characters\n- **Protection**: Prevents weak passwords and buffer overflow attacks\n\n## Security Headers\n\nThe following security headers are now set on all responses:\n\n1. **X-Frame-Options: DENY**\n   - Prevents clickjacking attacks\n   - Blocks the site from being embedded in iframes\n\n2. **X-Content-Type-Options: nosniff**\n   - Prevents MIME-type sniffing\n   - Forces browser to respect declared content types\n\n3. **X-XSS-Protection: 1; mode=block**\n   - Enables browser XSS filtering\n   - Blocks page rendering if attack detected\n\n4. **Referrer-Policy: strict-origin-when-cross-origin**\n   - Controls referrer information sent with requests\n   - Enhances privacy\n\n5. **Permissions-Policy**\n   - Disables camera, microphone, and geolocation access\n   - Reduces attack surface\n\n## Database Security\n\n### 1. Input Validation\n- All database queries use sanitized inputs\n- Protection against NoSQL injection attacks\n\n### 2. Error Handling\n- Generic error messages prevent information leakage\n- Detailed errors logged server-side only\n\n## API Security\n\n### 1. Authentication Required\n- All API endpoints verify user session\n- Unauthorized requests return 401 status\n\n### 2. Authorization Checks\n- Role-based validation on all protected endpoints\n- HOD and ADMIN roles required for sensitive operations\n\n### 3. Request Validation\n- All request bodies validated before processing\n- Missing or invalid fields return 400 status with clear error messages\n\n## Best Practices Implemented\n\n1. **Environment Variables**: Sensitive data stored in environment variables\n2. **HTTPS Enforcement**: Secure cookie flag requires HTTPS\n3. **Minimal Error Disclosure**: Generic error messages to users\n4. **Defense in Depth**: Multiple layers of security controls\n5. **Least Privilege**: Users only have access to necessary resources\n\n## Remaining Recommendations\n\n1. **Consider implementing**:\n   - Two-factor authentication (2FA)\n   - Account lockout after multiple failed attempts\n   - Password complexity requirements\n   - Regular security audits\n   - Automated vulnerability scanning\n\n2. **Monitor**:\n   - Failed login attempts\n   - Unusual access patterns\n   - API usage patterns\n\n3. **Regular Updates**:\n   - Keep all dependencies up to date\n   - Review and update security policies\n   - Conduct periodic security assessments\n\n## Security Contact\n\nFor security issues or concerns, please contact the system administrator.\n\n---\n\n**Last Updated**: October 22, 2025\n**Version**: 1.0\n","size_bytes":4125},"src/lib/security-utils.ts":{"content":"export function sanitizeString(input: string): string {\n  if (!input) return '';\n  return input\n    .replace(/[<>]/g, '')\n    .trim()\n    .substring(0, 1000);\n}\n\nexport function sanitizeEmail(email: string): string {\n  if (!email) return '';\n  const sanitized = email.toLowerCase().trim();\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(sanitized)) {\n    throw new Error('Invalid email format');\n  }\n  return sanitized;\n}\n\nexport function sanitizeEnrollmentNumber(enrollment: string): string {\n  if (!enrollment) return '';\n  const sanitized = enrollment.trim();\n  if (!/^\\d{11}$/.test(sanitized)) {\n    throw new Error('Enrollment number must be exactly 11 digits');\n  }\n  return sanitized;\n}\n\nexport function validateObjectId(id: string): boolean {\n  if (!id) return false;\n  return /^[0-9a-fA-F]{24}$/.test(id);\n}\n\nexport function sanitizeSearchQuery(query: string): string {\n  if (!query) return '';\n  return query\n    .replace(/[<>${}]/g, '')\n    .trim()\n    .substring(0, 100);\n}\n\nexport function validatePassword(password: string): void {\n  if (!password || password.length < 6) {\n    throw new Error('Password must be at least 6 characters long');\n  }\n  if (password.length > 128) {\n    throw new Error('Password is too long');\n  }\n}\n\nconst rateLimitMap = new Map<string, { count: number; resetTime: number }>();\n\nexport function rateLimit(identifier: string, maxAttempts: number = 5, windowMs: number = 15 * 60 * 1000): boolean {\n  const now = Date.now();\n  const record = rateLimitMap.get(identifier);\n\n  if (!record || now > record.resetTime) {\n    rateLimitMap.set(identifier, { count: 1, resetTime: now + windowMs });\n    return true;\n  }\n\n  if (record.count >= maxAttempts) {\n    return false;\n  }\n\n  record.count++;\n  return true;\n}\n\nexport function clearRateLimit(identifier: string): void {\n  rateLimitMap.delete(identifier);\n}\n","size_bytes":1872},"src/app/api/test-console/route.ts":{"content":"export async function GET() {\n  console.log('[TEST] This is a test console log');\n  console.error('[TEST] This is a test console error');\n  return Response.json({ message: 'Test endpoint', timestamp: new Date().toISOString() });\n}\n","size_bytes":231},"test-auth-api.ts":{"content":"// Test the authentication API endpoint\nasync function testAuth() {\n  const baseUrl = 'http://localhost:5000';\n  \n  const testCredentials = [\n    { email: 'admin@gmail.com', password: '123', expectedRole: 'ADMIN' },\n    { email: 'kharat@gmail.com', password: 'kharat', expectedRole: 'HOD' },\n    { email: 'bhosale@gmail.com', password: 'bhosale', expectedRole: 'FACULTY' }\n  ];\n  \n  console.log('=== Testing Authentication API ===\\n');\n  \n  for (const cred of testCredentials) {\n    console.log(`Testing: ${cred.email} (${cred.expectedRole})`);\n    \n    try {\n      const response = await fetch(`${baseUrl}/api/auth/callback/credentials`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          email: cred.email,\n          password: cred.password,\n          redirect: 'false',\n          json: 'true',\n          callbackUrl: `${baseUrl}`\n        }),\n      });\n      \n      console.log('Response status:', response.status);\n      \n      if (response.status === 200) {\n        const data = await response.json();\n        console.log('â Authentication successful!');\n        console.log('Response:', JSON.stringify(data, null, 2));\n      } else {\n        const text = await response.text();\n        console.log('â Authentication failed');\n        console.log('Response:', text.substring(0, 200));\n      }\n    } catch (error: any) {\n      console.log('â Error:', error.message);\n    }\n    \n    console.log('---\\n');\n  }\n}\n\ntestAuth();\n","size_bytes":1546},"check-mongodb-users.ts":{"content":"import { getDatabase } from './src/lib/mongodb';\n\nasync function checkUsers() {\n  try {\n    const db = await getDatabase();\n    const users = await db.collection('users').find({}).toArray();\n    \n    console.log('=== Users in MongoDB ===');\n    console.log('Total users:', users.length);\n    \n    users.forEach(user => {\n      console.log('\\n---');\n      console.log('Email:', user.email);\n      console.log('Role:', user.role);\n      console.log('Has password:', !!user.hashedPassword);\n      console.log('Password length:', user.hashedPassword?.length || 0);\n      console.log('Name:', user.name);\n    });\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\ncheckUsers();\n","size_bytes":732},"test-login.ts":{"content":"import { getDatabase } from './src/lib/mongodb';\nimport bcrypt from 'bcrypt';\n\nasync function testLogin() {\n  try {\n    const db = await getDatabase();\n    \n    const testCredentials = [\n      { email: 'admin@gmail.com', password: '123' },\n      { email: 'kharat@gmail.com', password: 'kharat' },\n      { email: 'bhosale@gmail.com', password: 'bhosale' }\n    ];\n    \n    console.log('=== Testing Login Credentials ===\\n');\n    \n    for (const cred of testCredentials) {\n      console.log(`Testing: ${cred.email}`);\n      \n      const user = await db.collection('users').findOne({ email: cred.email });\n      \n      if (!user) {\n        console.log('â User not found\\n');\n        continue;\n      }\n      \n      if (!user.hashedPassword) {\n        console.log('â No hashed password found\\n');\n        continue;\n      }\n      \n      const isMatch = await bcrypt.compare(cred.password, user.hashedPassword);\n      \n      if (isMatch) {\n        console.log(`â Password matches! Role: ${user.role}\\n`);\n      } else {\n        console.log(`â Password does NOT match\\n`);\n      }\n    }\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\ntestLogin();\n","size_bytes":1209},"scripts/fix-subject-dept-and-ids.js":{"content":"#!/usr/bin/env node\n/*\n  Migration helper for spiot-feedback-portal\n  - Backs up subjects and facultyAssignments to JSON files\n  - Sets missing departmentId on subjects (for a given departmentId)\n  - Converts facultyAssignments.subjectId from string to ObjectId when possible\n  - Usage:\n      node scripts/fix-subject-dept-and-ids.js --uri=\"<MONGODB_URI>\" --db=\"<DB_NAME>\" --dept=\"68f6390b641c7bcb2781b39c\" --apply --self-delete\n    Flags:\n      --uri     MongoDB connection string (or set MONGODB_URI env)\n      --db      Database name (optional, default: feedbackPortal)\n      --dept    Department id to set on subjects (required if --apply)\n      --apply   Actually perform updates (without this the script only reports what it would do)\n      --self-delete  Delete this script after successful run\n\n  WARNING: This script performs destructive updates when run with --apply. It will create JSON backups first.\n*/\n\nconst { MongoClient, ObjectId } = require('mongodb');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction parseArgs() {\n  const args = process.argv.slice(2);\n  const out = {};\n  args.forEach(a => {\n    if (a.startsWith('--')) {\n      const [k, v] = a.slice(2).split('=');\n      out[k] = v === undefined ? true : v;\n    }\n  });\n  return out;\n}\n\nasync function run() {\n  const args = parseArgs();\n  const uri = args.uri || process.env.MONGODB_URI;\n  if (!uri) {\n    console.error('Missing --uri or MONGODB_URI');\n    process.exit(1);\n  }\n  const dbName = args.db || 'feedbackPortal';\n  const deptId = args.dept || args.departmentId;\n  const doApply = !!args.apply;\n  const selfDelete = !!args['self-delete'] || !!args.selfDelete;\n\n  console.log('Connecting to', uri, 'db:', dbName);\n  const client = new MongoClient(uri, { useUnifiedTopology: true });\n  await client.connect();\n  const db = client.db(dbName);\n\n  try {\n    // Read collections\n    const subjectsColl = db.collection('subjects');\n    const assignmentsColl = db.collection('facultyAssignments');\n\n    // Find subjects missing departmentId\n    const missingSubjects = await subjectsColl.find({ $or: [{ departmentId: { $exists: false } }, { departmentId: null }] }).toArray();\n    console.log('Subjects missing departmentId:', missingSubjects.length);\n\n    // Backup affected documents to JSON files\n    const ts = new Date().toISOString().replace(/[:.]/g, '-');\n    const outDir = path.join(process.cwd(), 'migration-backups');\n    if (!fs.existsSync(outDir)) fs.mkdirSync(outDir);\n    const subjectsBackup = path.join(outDir, `subjects-backup-${ts}.json`);\n    const assignmentsBackup = path.join(outDir, `assignments-backup-${ts}.json`);\n\n    console.log('Writing full subjects backup to', subjectsBackup);\n    const allSubjects = await subjectsColl.find({}).toArray();\n    fs.writeFileSync(subjectsBackup, JSON.stringify(allSubjects, null, 2));\n\n    console.log('Writing full assignments backup to', assignmentsBackup);\n    const allAssignments = await assignmentsColl.find({}).toArray();\n    fs.writeFileSync(assignmentsBackup, JSON.stringify(allAssignments, null, 2));\n\n    // Report sample missing subjects\n    if (missingSubjects.length > 0) {\n      console.log('Sample missing subjects (first 10):');\n      missingSubjects.slice(0, 10).forEach(s => console.log({ id: s._id ? s._id.toString() : null, name: s.name, subjectCode: s.subjectCode, academicYearId: s.academicYearId }));\n    }\n\n    // If apply flag not set, stop here after reporting\n    if (!doApply) {\n      console.log('\\nDry run complete. To apply updates, re-run with --apply and supply --dept if needed.');\n      await client.close();\n      return;\n    }\n\n    if (!deptId) {\n      console.error('--dept is required when running with --apply');\n      await client.close();\n      process.exit(1);\n    }\n\n    // Determine whether deptId should be ObjectId or string\n    let deptValue = deptId;\n    if (/^[0-9a-fA-F]{24}$/.test(deptId)) {\n      deptValue = new ObjectId(deptId);\n    }\n\n    // Update subjects missing departmentId\n    const updateResult = await subjectsColl.updateMany(\n      { $or: [{ departmentId: { $exists: false } }, { departmentId: null }] },\n      { $set: { departmentId: deptValue } }\n    );\n    console.log('Subjects updated (departmentId set):', updateResult.modifiedCount);\n\n    // Convert assignment.subjectId strings to ObjectId when possible\n    const stringAssignmentsCursor = assignmentsColl.find({ subjectId: { $type: 'string' } });\n    let converted = 0;\n    while (await stringAssignmentsCursor.hasNext()) {\n      const doc = await stringAssignmentsCursor.next();\n      const sid = doc.subjectId;\n      if (typeof sid === 'string' && /^[0-9a-fA-F]{24}$/.test(sid)) {\n        try {\n          await assignmentsColl.updateOne({ _id: doc._id }, { $set: { subjectId: new ObjectId(sid) } });\n          converted++;\n        } catch (e) {\n          console.warn('Failed to convert subjectId for assignment', doc._id.toString(), e.message);\n        }\n      }\n    }\n    console.log('Assignments converted (subjectId string -> ObjectId):', converted);\n\n    console.log('Migration applied successfully. Backups are in', outDir);\n\n    if (selfDelete) {\n      const scriptPath = path.join(process.cwd(), 'scripts', 'fix-subject-dept-and-ids.js');\n      try {\n        await client.close();\n        fs.unlinkSync(scriptPath);\n        console.log('Script self-deleted:', scriptPath);\n      } catch (e) {\n        console.error('Self-delete failed:', e.message);\n      }\n    } else {\n      await client.close();\n    }\n  } catch (err) {\n    console.error('Migration failed:', err);\n    try { await client.close(); } catch (_) {}\n    process.exit(1);\n  }\n}\n\nrun().catch(err => { console.error(err); process.exit(1); });\n","size_bytes":5695},"src/app/api/debug/assignments-counts/route.ts":{"content":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { staffService, subjectService, assignmentService, academicYearService } from \"@/lib/mongodb-services\";\nimport { getDatabase } from '@/lib/mongodb';\nimport { ObjectId } from 'mongodb';\n\nexport async function GET() {\n  try {\n    // Only enable in non-production to avoid leaking data\n    if (process.env.NODE_ENV === 'production') {\n      return NextResponse.json({ error: 'Not available in production' }, { status: 403 });\n    }\n\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n\n    // Require HOD role for department-scoped debug\n    if (session.user?.role !== 'HOD') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n\n    const staff = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!staff || !staff.departmentId) return NextResponse.json({ error: 'HOD or department not found' }, { status: 404 });\n    const departmentId = staff.departmentId;\n\n    // Use raw DB queries that try both string and ObjectId matches because the stored documents may mix types.\n    const db = await getDatabase();\n\n    const tryObjectId = (id: string) => {\n      try {\n        return new ObjectId(id);\n      } catch (e) {\n        return null;\n      }\n    };\n\n    const deptObjId = tryObjectId(departmentId);\n\n    // Fetch subjects belonging to this department (match either string or ObjectId)\n    const subjectQuery: any = deptObjId\n      ? { $or: [{ departmentId }, { departmentId: deptObjId }] }\n      : { departmentId };\n\n    const subjectDocs = await db.collection('subjects').find(subjectQuery).toArray();\n    const subjects = subjectDocs.map((d: any) => ({ id: d._id.toString(), name: d.name, academicYearId: d.academicYearId ? d.academicYearId.toString() : null }));\n    const subjectIdSet = new Set(subjects.map((s: any) => s.id));\n\n    // Fetch all assignments and filter by subjectId or staff department\n    const assignmentDocs = await db.collection('facultyAssignments').find({}).toArray();\n    // Normalize assignments (subjectId/staffId may be ObjectId or string)\n    const assignments = assignmentDocs.map((d: any) => ({ id: d._id.toString(), subjectId: d.subjectId ? d.subjectId.toString() : null, staffId: d.staffId ? d.staffId.toString() : null }));\n\n    // First try matching by subjectId\n    let deptAssignments = assignments.filter((a: any) => a.subjectId && subjectIdSet.has(a.subjectId));\n\n    if (deptAssignments.length === 0) {\n      // Fallback: find staff in department and match by staffId\n      const deptStaffDocs = await db.collection('staff').find(deptObjId ? { $or: [{ departmentId }, { departmentId: deptObjId }] } : { departmentId }).toArray();\n      const deptStaffIds = new Set(deptStaffDocs.map((s: any) => s._id.toString()));\n      deptAssignments = assignments.filter((a: any) => a.staffId && deptStaffIds.has(a.staffId));\n    }\n\n    const byYear: Record<string, { assignments: number; subjects: number }> = {};\n\n    for (const a of deptAssignments) {\n      let yearId = 'unknown';\n      if (a.subjectId) {\n        const subj = subjects.find((s: any) => s.id === a.subjectId);\n        yearId = subj && subj.academicYearId ? subj.academicYearId : 'unknown';\n      }\n      byYear[yearId] = byYear[yearId] || { assignments: 0, subjects: 0 };\n      byYear[yearId].assignments += 1;\n    }\n\n    // Count subjects per academic year\n    for (const s of subjects) {\n      const y = s.academicYearId || 'unknown';\n      byYear[y] = byYear[y] || { assignments: 0, subjects: 0 };\n      byYear[y].subjects += 1;\n    }\n\n    // Resolve academic year names for keys that are not 'unknown'\n    const yearIds = Object.keys(byYear).filter(id => id !== 'unknown');\n    const yearRows = await Promise.all(yearIds.map((id) => academicYearService.findUnique({ id })));\n    const yearMap: Record<string,string> = {};\n    yearRows.forEach((r:any) => { if (r) yearMap[r.id] = r.abbreviation || r.name; });\n\n    const human: Record<string, any> = {};\n    Object.entries(byYear).forEach(([k, v]) => {\n      human[yearMap[k] || k || 'unknown'] = v;\n    });\n\n    return NextResponse.json({ departmentId, totalSubjects: subjects.length, totalAssignments: deptAssignments.length, byYear: human });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Debug failed' }, { status: 500 });\n  }\n}\n","size_bytes":4599},"src/app/api/debug/subjects-assignments/route.ts":{"content":"import { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\nimport { subjectService, assignmentService, staffService } from '@/lib/mongodb-services';\n\n// Dev-only diagnostic endpoint to inspect subjects, assignments and assigned staff for the HOD's department\nexport async function GET(req: Request) {\n  try {\n    if (process.env.NODE_ENV === 'production') return NextResponse.json({ error: 'Not allowed in production' }, { status: 403 });\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    if (session.user?.role !== 'HOD') return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n\n    const hodProfile = await staffService.findFirst({ where: { userId: session.user.id } });\n    if (!hodProfile) return NextResponse.json({ error: 'HOD profile not found' }, { status: 404 });\n    const departmentId = hodProfile.departmentId;\n\n    const subjects = await subjectService.findMany();\n    const deptSubjects = subjects.filter((s: any) => String(s.departmentId) === String(departmentId));\n    const subjectsMissingDept = subjects.filter((s: any) => !s.departmentId || String(s.departmentId) !== String(departmentId));\n\n    const assignments = await assignmentService.findMany({});\n    const assignmentsForDeptSubjects = assignments.filter((a: any) => a.subjectId && deptSubjects.some((s: any) => String(s.id) === String(a.subjectId)));\n\n    // Unique staff ids assigned to dept subjects\n    const assignedStaffIds = Array.from(new Set(assignmentsForDeptSubjects.map((a: any) => a.staffId).filter(Boolean)));\n    const assignedStaff = await Promise.all(assignedStaffIds.map((id: string) => staffService.findUnique({ where: { id }, include: { user: true, department: true } })));\n\n    return NextResponse.json({\n      departmentId,\n      totalSubjects: subjects.length,\n      deptSubjectsCount: deptSubjects.length,\n      deptSubjects,\n      subjectsMissingDeptCount: subjectsMissingDept.length,\n      subjectsMissingDept,\n      totalAssignments: assignments.length,\n      assignmentsForDeptSubjectsCount: assignmentsForDeptSubjects.length,\n      assignmentsForDeptSubjects,\n      assignedStaffCount: assignedStaff.length,\n      assignedStaff,\n    });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: 'Failed to fetch diagnostics' }, { status: 500 });\n  }\n}\n","size_bytes":2511},"src/app/(dashboard)/admin/semester-settings/page.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { PageHeader } from \"@/components/page-header\";\nimport { Calendar, Save } from \"lucide-react\";\nimport { CustomSelect } from \"@/components/custom-select\";\n\nexport default function SemesterSettingsPage() {\n  const [currentSemester, setCurrentSemester] = useState<number>(1);\n  const [academicYear, setAcademicYear] = useState<string>(\"\");\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [semesterString, setSemesterString] = useState(\"\");\n\n  const semesterOptions = [\n    { value: 1, label: \"1st Semester (Odd)\" },\n    { value: 2, label: \"2nd Semester (Even)\" },\n    { value: 3, label: \"3rd Semester (Odd)\" },\n    { value: 4, label: \"4th Semester (Even)\" },\n    { value: 5, label: \"5th Semester (Odd)\" },\n    { value: 6, label: \"6th Semester (Even)\" },\n  ];\n\n  const fetchSettings = useCallback(async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/api/admin/semester-settings\");\n      if (!res.ok) throw new Error(\"Failed to fetch settings\");\n      const data = await res.json();\n      setCurrentSemester(data.currentSemester || 1);\n      setAcademicYear(data.academicYear || \"\");\n      setSemesterString(data.semesterString || \"\");\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Failed to load semester settings\");\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchSettings();\n  }, [fetchSettings]);\n\n  const handleSave = async () => {\n    if (!academicYear || academicYear.trim() === \"\") {\n      toast.error(\"Please enter an academic year\");\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const res = await fetch(\"/api/admin/semester-settings\", {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          currentSemester,\n          academicYear: academicYear.trim(),\n        }),\n      });\n\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.error || \"Failed to update settings\");\n      }\n\n      const data = await res.json();\n      setSemesterString(data.semesterString);\n      toast.success(\"Semester settings updated successfully!\");\n    } catch (error) {\n      console.error(error);\n      toast.error((error as Error).message || \"Failed to update settings\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const generateCurrentYear = () => {\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const nextYear = currentYear + 1;\n    return `${currentYear}-${nextYear.toString().slice(-2)}`;\n  };\n\n  return (\n    <main className=\"max-w-4xl mx-auto\">\n      <PageHeader\n        title=\"Semester Settings\"\n        description=\"Configure the current active semester for the feedback portal\"\n      />\n\n      <div className=\"card content-spacing\">\n        <div className=\"flex items-start gap-3 mb-6 p-4 rounded-lg\" style={{ background: \"var(--primary-light)\" }}>\n          <Calendar size={24} style={{ color: \"var(--primary)\" }} className=\"shrink-0 mt-0.5\" />\n          <div>\n            <div className=\"font-semibold mb-1\" style={{ color: \"var(--text-primary)\" }}>\n              Current Semester\n            </div>\n            <div className=\"text-lg font-bold\" style={{ color: \"var(--primary)\" }}>\n              {semesterString || \"Loading...\"}\n            </div>\n          </div>\n        </div>\n\n        {loading ? (\n          <div style={{ color: \"var(--text-secondary)\" }}>Loading settings...</div>\n        ) : (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"form-label\">Select Current Semester</label>\n              <CustomSelect\n                value={currentSemester}\n                onChange={(value) => setCurrentSemester(Number(value))}\n                options={semesterOptions}\n                placeholder=\"Select semester\"\n              />\n              <p className=\"text-sm mt-2\" style={{ color: \"var(--text-muted)\" }}>\n                Odd semesters: 1, 3, 5 | Even semesters: 2, 4, 6\n              </p>\n            </div>\n\n            <div>\n              <label className=\"form-label\">Academic Year</label>\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"text\"\n                  value={academicYear}\n                  onChange={(e) => setAcademicYear(e.target.value)}\n                  placeholder=\"2025-26\"\n                  className=\"input-field flex-1\"\n                />\n                <button\n                  onClick={() => setAcademicYear(generateCurrentYear())}\n                  className=\"btn-secondary whitespace-nowrap\"\n                  type=\"button\"\n                >\n                  Use Current\n                </button>\n              </div>\n              <p className=\"text-sm mt-2\" style={{ color: \"var(--text-muted)\" }}>\n                Format: YYYY-YY (e.g., 2025-26)\n              </p>\n            </div>\n\n            <div className=\"border-t pt-6\" style={{ borderColor: \"var(--card-border)\" }}>\n              <button\n                onClick={handleSave}\n                disabled={saving}\n                className=\"btn-primary gap-2\"\n              >\n                <Save size={18} />\n                {saving ? \"Saving...\" : \"Save Settings\"}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"card content-spacing mt-6\">\n        <h3 className=\"text-lg font-semibold mb-3\" style={{ color: \"var(--text-primary)\" }}>\n          Important Notes\n        </h3>\n        <ul className=\"space-y-2 text-sm\" style={{ color: \"var(--text-secondary)\" }}>\n          <li>â¢ The current semester setting affects feedback collection and reporting across the entire portal</li>\n          <li>â¢ HODs will see this semester when assigning faculty to subjects</li>\n          <li>â¢ Students will see this semester on their feedback dashboard</li>\n          <li>â¢ Make sure to update this at the beginning of each new semester</li>\n          <li>â¢ The system automatically detects odd/even semesters based on the number you select</li>\n        </ul>\n      </div>\n    </main>\n  );\n}\n","size_bytes":6252},"src/app/api/admin/semester-settings/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\nimport { semesterSettingsService } from \"@/lib/mongodb-services\";\n\nexport async function GET() {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session) return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    if (session.user?.role !== \"ADMIN\" && session.user?.role !== \"HOD\" && session.user?.role !== \"STAFF\" && session.user?.role !== \"FACULTY\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const settings = await semesterSettingsService.get();\n    const semesterString = semesterSettingsService.getCurrentSemesterString(\n      settings.currentSemester,\n      settings.academicYear\n    );\n\n    return NextResponse.json({\n      ...settings,\n      semesterString,\n    });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to fetch semester settings\" }, { status: 500 });\n  }\n}\n\nexport async function PATCH(request: Request) {\n  try {\n    const session = (await getServerSession(authOptions as any)) as any;\n    if (!session || session.user?.role !== \"ADMIN\") {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { currentSemester, academicYear } = body;\n\n    if (!currentSemester || currentSemester < 1 || currentSemester > 6) {\n      return NextResponse.json({ error: \"Invalid semester number (must be 1-6)\" }, { status: 400 });\n    }\n\n    const updated = await semesterSettingsService.update({\n      currentSemester: Number(currentSemester),\n      academicYear,\n    });\n\n    const semesterString = semesterSettingsService.getCurrentSemesterString(\n      updated.currentSemester,\n      updated.academicYear\n    );\n\n    return NextResponse.json({\n      ...updated,\n      semesterString,\n    });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json({ error: \"Failed to update semester settings\" }, { status: 500 });\n  }\n}\n","size_bytes":2131}},"version":2}